// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: iot_pb_front_data.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// dataValidFlag 位定义
type VS_PB_GPS_DATA_VALID_FLAG int32

const (
	VS_PB_GPS_DATA_VALID_FLAG_LONG_LAT         VS_PB_GPS_DATA_VALID_FLAG = 0  //经纬度
	VS_PB_GPS_DATA_VALID_FLAG_SPEED            VS_PB_GPS_DATA_VALID_FLAG = 1  //速度
	VS_PB_GPS_DATA_VALID_FLAG_DIRECTION        VS_PB_GPS_DATA_VALID_FLAG = 2  //方向
	VS_PB_GPS_DATA_VALID_FLAG_NET_SIGNAL       VS_PB_GPS_DATA_VALID_FLAG = 3  //网络信号
	VS_PB_GPS_DATA_VALID_FLAG_SATELLITE_NUM    VS_PB_GPS_DATA_VALID_FLAG = 4  //卫星数
	VS_PB_GPS_DATA_VALID_FLAG_DEVICE_MILEAGE   VS_PB_GPS_DATA_VALID_FLAG = 5  //设备里程
	VS_PB_GPS_DATA_VALID_FLAG_PLATFORM_MILEAGE VS_PB_GPS_DATA_VALID_FLAG = 6  //平台里程
	VS_PB_GPS_DATA_VALID_FLAG_DATA_FLOW        VS_PB_GPS_DATA_VALID_FLAG = 7  //数据流量
	VS_PB_GPS_DATA_VALID_FLAG_ALTITUDE         VS_PB_GPS_DATA_VALID_FLAG = 8  //海拔
	VS_PB_GPS_DATA_VALID_FLAG_STATUS_FLAG      VS_PB_GPS_DATA_VALID_FLAG = 9  //状态
	VS_PB_GPS_DATA_VALID_FLAG_OIL_VALUE        VS_PB_GPS_DATA_VALID_FLAG = 10 //油量值
	VS_PB_GPS_DATA_VALID_FLAG_ADAS             VS_PB_GPS_DATA_VALID_FLAG = 11 //ADAS
	VS_PB_GPS_DATA_VALID_FLAG_DSM              VS_PB_GPS_DATA_VALID_FLAG = 12 //DSM
	VS_PB_GPS_DATA_VALID_FLAG_TPMS             VS_PB_GPS_DATA_VALID_FLAG = 13 //TMPS
	VS_PB_GPS_DATA_VALID_FLAG_BSD              VS_PB_GPS_DATA_VALID_FLAG = 14 //BSD
	VS_PB_GPS_DATA_VALID_FLAG_MSPAY            VS_PB_GPS_DATA_VALID_FLAG = 15 //里程项目
)

// Enum value maps for VS_PB_GPS_DATA_VALID_FLAG.
var (
	VS_PB_GPS_DATA_VALID_FLAG_name = map[int32]string{
		0:  "LONG_LAT",
		1:  "SPEED",
		2:  "DIRECTION",
		3:  "NET_SIGNAL",
		4:  "SATELLITE_NUM",
		5:  "DEVICE_MILEAGE",
		6:  "PLATFORM_MILEAGE",
		7:  "DATA_FLOW",
		8:  "ALTITUDE",
		9:  "STATUS_FLAG",
		10: "OIL_VALUE",
		11: "ADAS",
		12: "DSM",
		13: "TPMS",
		14: "BSD",
		15: "MSPAY",
	}
	VS_PB_GPS_DATA_VALID_FLAG_value = map[string]int32{
		"LONG_LAT":         0,
		"SPEED":            1,
		"DIRECTION":        2,
		"NET_SIGNAL":       3,
		"SATELLITE_NUM":    4,
		"DEVICE_MILEAGE":   5,
		"PLATFORM_MILEAGE": 6,
		"DATA_FLOW":        7,
		"ALTITUDE":         8,
		"STATUS_FLAG":      9,
		"OIL_VALUE":        10,
		"ADAS":             11,
		"DSM":              12,
		"TPMS":             13,
		"BSD":              14,
		"MSPAY":            15,
	}
)

func (x VS_PB_GPS_DATA_VALID_FLAG) Enum() *VS_PB_GPS_DATA_VALID_FLAG {
	p := new(VS_PB_GPS_DATA_VALID_FLAG)
	*p = x
	return p
}

func (x VS_PB_GPS_DATA_VALID_FLAG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_PB_GPS_DATA_VALID_FLAG) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[0].Descriptor()
}

func (VS_PB_GPS_DATA_VALID_FLAG) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[0]
}

func (x VS_PB_GPS_DATA_VALID_FLAG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_PB_GPS_DATA_VALID_FLAG.Descriptor instead.
func (VS_PB_GPS_DATA_VALID_FLAG) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{0}
}

// mspayAlarmFlag 位定义
type VS_PB_GPS_MSPAY_ALARM_FLAG int32

const (
	VS_PB_GPS_MSPAY_ALARM_FLAG_DEVICE_POWER_DOWN     VS_PB_GPS_MSPAY_ALARM_FLAG = 0  //终端电源掉电
	VS_PB_GPS_MSPAY_ALARM_FLAG_DEVICE_BATTERY_VOL    VS_PB_GPS_MSPAY_ALARM_FLAG = 1  //终端电池电量报警
	VS_PB_GPS_MSPAY_ALARM_FLAG_DEVICE_POWER_LOWER    VS_PB_GPS_MSPAY_ALARM_FLAG = 2  //主电源欠压报警
	VS_PB_GPS_MSPAY_ALARM_FLAG_COMMUNICATE_EXCEPTION VS_PB_GPS_MSPAY_ALARM_FLAG = 4  //通信模块异常工作
	VS_PB_GPS_MSPAY_ALARM_FLAG_GNSS_FAULT            VS_PB_GPS_MSPAY_ALARM_FLAG = 5  //GNSS模块故障
	VS_PB_GPS_MSPAY_ALARM_FLAG_GNSS_ANTE_DIS         VS_PB_GPS_MSPAY_ALARM_FLAG = 6  //GNSS 天线未接或被剪断
	VS_PB_GPS_MSPAY_ALARM_FLAG_GNSS_ANTE_SHORT       VS_PB_GPS_MSPAY_ALARM_FLAG = 7  //GNSS 天线短路报警
	VS_PB_GPS_MSPAY_ALARM_FLAG_TIME_SYNC             VS_PB_GPS_MSPAY_ALARM_FLAG = 8  //时间同步异常
	VS_PB_GPS_MSPAY_ALARM_FLAG_BT_MODULE             VS_PB_GPS_MSPAY_ALARM_FLAG = 9  //蓝牙模块故障
	VS_PB_GPS_MSPAY_ALARM_FLAG_SE_MODULE             VS_PB_GPS_MSPAY_ALARM_FLAG = 10 //SE加密模块
	VS_PB_GPS_MSPAY_ALARM_FLAG_DEV_UNINSTALL         VS_PB_GPS_MSPAY_ALARM_FLAG = 17 //终端拆卸报警
	VS_PB_GPS_MSPAY_ALARM_FLAG_EMERGENCY_ALARM       VS_PB_GPS_MSPAY_ALARM_FLAG = 18 //紧急报警
	VS_PB_GPS_MSPAY_ALARM_FLAG_STORAGE_SPACE         VS_PB_GPS_MSPAY_ALARM_FLAG = 19 //存储空间
	VS_PB_GPS_MSPAY_ALARM_FLAG_AREA                  VS_PB_GPS_MSPAY_ALARM_FLAG = 20 //区域报警
	VS_PB_GPS_MSPAY_ALARM_FLAG_LINE                  VS_PB_GPS_MSPAY_ALARM_FLAG = 21 //线路报警
	VS_PB_GPS_MSPAY_ALARM_FLAG_GNSS_DISTURB          VS_PB_GPS_MSPAY_ALARM_FLAG = 22 //GNSS干扰报警
	VS_PB_GPS_MSPAY_ALARM_FLAG_BATTERY_FAULT         VS_PB_GPS_MSPAY_ALARM_FLAG = 23 //备用电池故障报警
)

// Enum value maps for VS_PB_GPS_MSPAY_ALARM_FLAG.
var (
	VS_PB_GPS_MSPAY_ALARM_FLAG_name = map[int32]string{
		0:  "DEVICE_POWER_DOWN",
		1:  "DEVICE_BATTERY_VOL",
		2:  "DEVICE_POWER_LOWER",
		4:  "COMMUNICATE_EXCEPTION",
		5:  "GNSS_FAULT",
		6:  "GNSS_ANTE_DIS",
		7:  "GNSS_ANTE_SHORT",
		8:  "TIME_SYNC",
		9:  "BT_MODULE",
		10: "SE_MODULE",
		17: "DEV_UNINSTALL",
		18: "EMERGENCY_ALARM",
		19: "STORAGE_SPACE",
		20: "AREA",
		21: "LINE",
		22: "GNSS_DISTURB",
		23: "BATTERY_FAULT",
	}
	VS_PB_GPS_MSPAY_ALARM_FLAG_value = map[string]int32{
		"DEVICE_POWER_DOWN":     0,
		"DEVICE_BATTERY_VOL":    1,
		"DEVICE_POWER_LOWER":    2,
		"COMMUNICATE_EXCEPTION": 4,
		"GNSS_FAULT":            5,
		"GNSS_ANTE_DIS":         6,
		"GNSS_ANTE_SHORT":       7,
		"TIME_SYNC":             8,
		"BT_MODULE":             9,
		"SE_MODULE":             10,
		"DEV_UNINSTALL":         17,
		"EMERGENCY_ALARM":       18,
		"STORAGE_SPACE":         19,
		"AREA":                  20,
		"LINE":                  21,
		"GNSS_DISTURB":          22,
		"BATTERY_FAULT":         23,
	}
)

func (x VS_PB_GPS_MSPAY_ALARM_FLAG) Enum() *VS_PB_GPS_MSPAY_ALARM_FLAG {
	p := new(VS_PB_GPS_MSPAY_ALARM_FLAG)
	*p = x
	return p
}

func (x VS_PB_GPS_MSPAY_ALARM_FLAG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_PB_GPS_MSPAY_ALARM_FLAG) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[1].Descriptor()
}

func (VS_PB_GPS_MSPAY_ALARM_FLAG) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[1]
}

func (x VS_PB_GPS_MSPAY_ALARM_FLAG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_PB_GPS_MSPAY_ALARM_FLAG.Descriptor instead.
func (VS_PB_GPS_MSPAY_ALARM_FLAG) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{1}
}

// 部标报警标志位定义
type VS_PB_MOT_ALARM_FLAG int32

const (
	VS_PB_MOT_ALARM_FLAG_MAF_EMERGENCY              VS_PB_MOT_ALARM_FLAG = 0  //紧急报警
	VS_PB_MOT_ALARM_FLAG_MAF_OVER_SPEED             VS_PB_MOT_ALARM_FLAG = 1  //超速报警
	VS_PB_MOT_ALARM_FLAG_MAF_TIRED                  VS_PB_MOT_ALARM_FLAG = 2  //疲劳驾驶
	VS_PB_MOT_ALARM_FLAG_MAF_DANGEROUS              VS_PB_MOT_ALARM_FLAG = 3  //危险报警
	VS_PB_MOT_ALARM_FLAG_MAF_GNSS_MODULE_ERR        VS_PB_MOT_ALARM_FLAG = 4  //GNSS模块故障
	VS_PB_MOT_ALARM_FLAG_MAF_GNSS_ANT_CUT           VS_PB_MOT_ALARM_FLAG = 5  //GNSS天线未接或剪断
	VS_PB_MOT_ALARM_FLAG_MAF_GNSS_ANT_SHORT         VS_PB_MOT_ALARM_FLAG = 6  //GNSS 天线短路
	VS_PB_MOT_ALARM_FLAG_MAF_POWER_LOW              VS_PB_MOT_ALARM_FLAG = 7  //主电源欠压
	VS_PB_MOT_ALARM_FLAG_MAF_POWER_DOWN             VS_PB_MOT_ALARM_FLAG = 8  //主电源掉电
	VS_PB_MOT_ALARM_FLAG_MAF_LCD_ERR                VS_PB_MOT_ALARM_FLAG = 9  //LCD故障
	VS_PB_MOT_ALARM_FLAG_MAF_TTS_ERR                VS_PB_MOT_ALARM_FLAG = 10 //TTS故障
	VS_PB_MOT_ALARM_FLAG_MAF_CAMERA_ERR             VS_PB_MOT_ALARM_FLAG = 11 //摄像头故障
	VS_PB_MOT_ALARM_FLAG_MAF_IC_CARD_ERR            VS_PB_MOT_ALARM_FLAG = 12 //IC卡故障
	VS_PB_MOT_ALARM_FLAG_MAF_OVER_SPEED_WARING      VS_PB_MOT_ALARM_FLAG = 13 //超速预警
	VS_PB_MOT_ALARM_FLAG_MAF_TIRE_WARING            VS_PB_MOT_ALARM_FLAG = 14 //疲劳预警
	VS_PB_MOT_ALARM_FLAG_MAF_BREAK_DRIVE            VS_PB_MOT_ALARM_FLAG = 15 //违规行驶(JT-2019)
	VS_PB_MOT_ALARM_FLAG_MAF_TIRE_PRESSURE          VS_PB_MOT_ALARM_FLAG = 16 //胎压预警(JT-2019)
	VS_PB_MOT_ALARM_FLAG_MAF_RIGHT_BLIND_AREA       VS_PB_MOT_ALARM_FLAG = 17 //右转盲区异常(JT-2019)
	VS_PB_MOT_ALARM_FLAG_MAF_CUR_DAY_DRIVE_TIME_OUT VS_PB_MOT_ALARM_FLAG = 18 //当天驾驶超时
	VS_PB_MOT_ALARM_FLAG_MAF_STOP_TIME_OUT          VS_PB_MOT_ALARM_FLAG = 19 //超时停车
	VS_PB_MOT_ALARM_FLAG_MAF_AREA                   VS_PB_MOT_ALARM_FLAG = 20 //进出区域
	VS_PB_MOT_ALARM_FLAG_MAF_LINE                   VS_PB_MOT_ALARM_FLAG = 21 //进出线路
	VS_PB_MOT_ALARM_FLAG_MAF_ROAD_SHORT_LONG        VS_PB_MOT_ALARM_FLAG = 22 //路段行驶不足或过长
	VS_PB_MOT_ALARM_FLAG_MAF_LINE_OFFSET            VS_PB_MOT_ALARM_FLAG = 23 //路线偏离
	VS_PB_MOT_ALARM_FLAG_MAF_VSS_ERR                VS_PB_MOT_ALARM_FLAG = 24 //VSS故障
	VS_PB_MOT_ALARM_FLAG_MAF_OIL_ERR                VS_PB_MOT_ALARM_FLAG = 25 //油量异常
	VS_PB_MOT_ALARM_FLAG_MAF_VEHICLE_STOLEN         VS_PB_MOT_ALARM_FLAG = 26 //车辆被盗
	VS_PB_MOT_ALARM_FLAG_MAF_ILLEGAL_FIRE           VS_PB_MOT_ALARM_FLAG = 27 //非法点火
	VS_PB_MOT_ALARM_FLAG_MAF_ILLEGAL_MOVE           VS_PB_MOT_ALARM_FLAG = 28 //非法位移
	VS_PB_MOT_ALARM_FLAG_MAF_IMPACT                 VS_PB_MOT_ALARM_FLAG = 29 //碰撞侧翻
	VS_PB_MOT_ALARM_FLAG_MAF_IMPACT_WARING          VS_PB_MOT_ALARM_FLAG = 30 //碰撞侧翻预警
	VS_PB_MOT_ALARM_FLAG_MAF_ILLEGAL_OPEN_DOOR      VS_PB_MOT_ALARM_FLAG = 31 //非法开门(JT2013)
)

// Enum value maps for VS_PB_MOT_ALARM_FLAG.
var (
	VS_PB_MOT_ALARM_FLAG_name = map[int32]string{
		0:  "MAF_EMERGENCY",
		1:  "MAF_OVER_SPEED",
		2:  "MAF_TIRED",
		3:  "MAF_DANGEROUS",
		4:  "MAF_GNSS_MODULE_ERR",
		5:  "MAF_GNSS_ANT_CUT",
		6:  "MAF_GNSS_ANT_SHORT",
		7:  "MAF_POWER_LOW",
		8:  "MAF_POWER_DOWN",
		9:  "MAF_LCD_ERR",
		10: "MAF_TTS_ERR",
		11: "MAF_CAMERA_ERR",
		12: "MAF_IC_CARD_ERR",
		13: "MAF_OVER_SPEED_WARING",
		14: "MAF_TIRE_WARING",
		15: "MAF_BREAK_DRIVE",
		16: "MAF_TIRE_PRESSURE",
		17: "MAF_RIGHT_BLIND_AREA",
		18: "MAF_CUR_DAY_DRIVE_TIME_OUT",
		19: "MAF_STOP_TIME_OUT",
		20: "MAF_AREA",
		21: "MAF_LINE",
		22: "MAF_ROAD_SHORT_LONG",
		23: "MAF_LINE_OFFSET",
		24: "MAF_VSS_ERR",
		25: "MAF_OIL_ERR",
		26: "MAF_VEHICLE_STOLEN",
		27: "MAF_ILLEGAL_FIRE",
		28: "MAF_ILLEGAL_MOVE",
		29: "MAF_IMPACT",
		30: "MAF_IMPACT_WARING",
		31: "MAF_ILLEGAL_OPEN_DOOR",
	}
	VS_PB_MOT_ALARM_FLAG_value = map[string]int32{
		"MAF_EMERGENCY":              0,
		"MAF_OVER_SPEED":             1,
		"MAF_TIRED":                  2,
		"MAF_DANGEROUS":              3,
		"MAF_GNSS_MODULE_ERR":        4,
		"MAF_GNSS_ANT_CUT":           5,
		"MAF_GNSS_ANT_SHORT":         6,
		"MAF_POWER_LOW":              7,
		"MAF_POWER_DOWN":             8,
		"MAF_LCD_ERR":                9,
		"MAF_TTS_ERR":                10,
		"MAF_CAMERA_ERR":             11,
		"MAF_IC_CARD_ERR":            12,
		"MAF_OVER_SPEED_WARING":      13,
		"MAF_TIRE_WARING":            14,
		"MAF_BREAK_DRIVE":            15,
		"MAF_TIRE_PRESSURE":          16,
		"MAF_RIGHT_BLIND_AREA":       17,
		"MAF_CUR_DAY_DRIVE_TIME_OUT": 18,
		"MAF_STOP_TIME_OUT":          19,
		"MAF_AREA":                   20,
		"MAF_LINE":                   21,
		"MAF_ROAD_SHORT_LONG":        22,
		"MAF_LINE_OFFSET":            23,
		"MAF_VSS_ERR":                24,
		"MAF_OIL_ERR":                25,
		"MAF_VEHICLE_STOLEN":         26,
		"MAF_ILLEGAL_FIRE":           27,
		"MAF_ILLEGAL_MOVE":           28,
		"MAF_IMPACT":                 29,
		"MAF_IMPACT_WARING":          30,
		"MAF_ILLEGAL_OPEN_DOOR":      31,
	}
)

func (x VS_PB_MOT_ALARM_FLAG) Enum() *VS_PB_MOT_ALARM_FLAG {
	p := new(VS_PB_MOT_ALARM_FLAG)
	*p = x
	return p
}

func (x VS_PB_MOT_ALARM_FLAG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_PB_MOT_ALARM_FLAG) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[2].Descriptor()
}

func (VS_PB_MOT_ALARM_FLAG) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[2]
}

func (x VS_PB_MOT_ALARM_FLAG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_PB_MOT_ALARM_FLAG.Descriptor instead.
func (VS_PB_MOT_ALARM_FLAG) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{2}
}

// 部标视频报警标志位定义
type VS_PB_MOT_VIDEO_ALARM_FLAG int32

const (
	VS_PB_MOT_VIDEO_ALARM_FLAG_VAF_VIDEO_LOST VS_PB_MOT_VIDEO_ALARM_FLAG = 0 //视频丢失
	VS_PB_MOT_VIDEO_ALARM_FLAG_VAF_VIDEO_MASK VS_PB_MOT_VIDEO_ALARM_FLAG = 1 //视频遮挡
	VS_PB_MOT_VIDEO_ALARM_FLAG_VAF_STORAGE    VS_PB_MOT_VIDEO_ALARM_FLAG = 2 //存储介质
)

// Enum value maps for VS_PB_MOT_VIDEO_ALARM_FLAG.
var (
	VS_PB_MOT_VIDEO_ALARM_FLAG_name = map[int32]string{
		0: "VAF_VIDEO_LOST",
		1: "VAF_VIDEO_MASK",
		2: "VAF_STORAGE",
	}
	VS_PB_MOT_VIDEO_ALARM_FLAG_value = map[string]int32{
		"VAF_VIDEO_LOST": 0,
		"VAF_VIDEO_MASK": 1,
		"VAF_STORAGE":    2,
	}
)

func (x VS_PB_MOT_VIDEO_ALARM_FLAG) Enum() *VS_PB_MOT_VIDEO_ALARM_FLAG {
	p := new(VS_PB_MOT_VIDEO_ALARM_FLAG)
	*p = x
	return p
}

func (x VS_PB_MOT_VIDEO_ALARM_FLAG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_PB_MOT_VIDEO_ALARM_FLAG) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[3].Descriptor()
}

func (VS_PB_MOT_VIDEO_ALARM_FLAG) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[3]
}

func (x VS_PB_MOT_VIDEO_ALARM_FLAG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_PB_MOT_VIDEO_ALARM_FLAG.Descriptor instead.
func (VS_PB_MOT_VIDEO_ALARM_FLAG) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{3}
}

// 应用状态标志位
type VS_PB_APP_STATUS_FLAG int32

const (
	VS_PB_APP_STATUS_FLAG_ASF_IS_BLIND_AREA VS_PB_APP_STATUS_FLAG = 0 //盲区补报
)

// Enum value maps for VS_PB_APP_STATUS_FLAG.
var (
	VS_PB_APP_STATUS_FLAG_name = map[int32]string{
		0: "ASF_IS_BLIND_AREA",
	}
	VS_PB_APP_STATUS_FLAG_value = map[string]int32{
		"ASF_IS_BLIND_AREA": 0,
	}
)

func (x VS_PB_APP_STATUS_FLAG) Enum() *VS_PB_APP_STATUS_FLAG {
	p := new(VS_PB_APP_STATUS_FLAG)
	*p = x
	return p
}

func (x VS_PB_APP_STATUS_FLAG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_PB_APP_STATUS_FLAG) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[4].Descriptor()
}

func (VS_PB_APP_STATUS_FLAG) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[4]
}

func (x VS_PB_APP_STATUS_FLAG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_PB_APP_STATUS_FLAG.Descriptor instead.
func (VS_PB_APP_STATUS_FLAG) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{4}
}

// 每新增一个需要在iot_pub_data_type.go 做分类定义
type VS_APP_ALARM_TYPE int32

const (
	VS_APP_ALARM_TYPE_ALARM_TYPE_NONE VS_APP_ALARM_TYPE = 0 //未定义
	//主动安全
	VS_APP_ALARM_TYPE_DSM_TIRED                 VS_APP_ALARM_TYPE = 1  //疲劳     alarmInfo:疲劳值
	VS_APP_ALARM_TYPE_DSM_CALL                  VS_APP_ALARM_TYPE = 2  //打电话
	VS_APP_ALARM_TYPE_DSM_SMOKE                 VS_APP_ALARM_TYPE = 3  //抽烟
	VS_APP_ALARM_TYPE_DSM_DISTRICT              VS_APP_ALARM_TYPE = 4  //分神
	VS_APP_ALARM_TYPE_DSM_DRIVER_EXCEPTION      VS_APP_ALARM_TYPE = 5  //驾驶员异常
	VS_APP_ALARM_TYPE_DSM_AUTO_CAPTURE          VS_APP_ALARM_TYPE = 6  //自动抓拍
	VS_APP_ALARM_TYPE_DSM_DRIVER_CHANGE_EVENT   VS_APP_ALARM_TYPE = 7  //驾驶员变更事件
	VS_APP_ALARM_TYPE_ADAS_IMPACT               VS_APP_ALARM_TYPE = 20 //向前碰撞
	VS_APP_ALARM_TYPE_ADAS_LANE_DEPARTURE       VS_APP_ALARM_TYPE = 21 //车道偏离报警
	VS_APP_ALARM_TYPE_ADAS_VEHICLE_NEAR         VS_APP_ALARM_TYPE = 22 //车距过近报警
	VS_APP_ALARM_TYPE_ADAS_PEDESTRIAN_IMPACT    VS_APP_ALARM_TYPE = 23 //行人碰撞报警
	VS_APP_ALARM_TYPE_ADAS_FREQUENT_LANE_CHANGE VS_APP_ALARM_TYPE = 24 //频繁变道报警
	VS_APP_ALARM_TYPE_ADAS_ROAD_SIGN_LIMIT      VS_APP_ALARM_TYPE = 25 //道路标识超限报警
	VS_APP_ALARM_TYPE_ADAS_BARRIER              VS_APP_ALARM_TYPE = 26 //障碍物报警
	VS_APP_ALARM_TYPE_ADAS_ROAD_SIGN            VS_APP_ALARM_TYPE = 27 //道路标识识别事件
	VS_APP_ALARM_TYPE_ADAS_ACTIVE_CAPTURE       VS_APP_ALARM_TYPE = 28 //主动抓拍事件
	VS_APP_ALARM_TYPE_BSD_BACK                  VS_APP_ALARM_TYPE = 35 //后方
	VS_APP_ALARM_TYPE_BSD_LEFT_BACK             VS_APP_ALARM_TYPE = 36 //左后方
	VS_APP_ALARM_TYPE_BSD_RIGHT_BACK            VS_APP_ALARM_TYPE = 37 //右后方
	VS_APP_ALARM_TYPE_TPMS_ALARM                VS_APP_ALARM_TYPE = 43 //胎压报警
	//设备报警
	VS_APP_ALARM_TYPE_OVER_SPEED        VS_APP_ALARM_TYPE = 50 //超速
	VS_APP_ALARM_TYPE_TIMEOUT           VS_APP_ALARM_TYPE = 51 //超时
	VS_APP_ALARM_TYPE_GNSS_MODULE_FAULT VS_APP_ALARM_TYPE = 52 //GNSS模块异常
	VS_APP_ALARM_TYPE_ANT_SHORT         VS_APP_ALARM_TYPE = 53 //天线短路
	VS_APP_ALARM_TYPE_ANT_NOT_CONNECT   VS_APP_ALARM_TYPE = 54 //天线未接
	VS_APP_ALARM_TYPE_POWER_LOW         VS_APP_ALARM_TYPE = 55 //低电压异常
	VS_APP_ALARM_TYPE_POWER_DOWN        VS_APP_ALARM_TYPE = 56 //主电源掉电报警
	VS_APP_ALARM_TYPE_TTS               VS_APP_ALARM_TYPE = 57 //TTS故障
	VS_APP_ALARM_TYPE_IC_CARD           VS_APP_ALARM_TYPE = 58 //IC卡故障
	VS_APP_ALARM_TYPE_VSS_ERR           VS_APP_ALARM_TYPE = 59 //VSS故障
	VS_APP_ALARM_TYPE_OIL_ERR           VS_APP_ALARM_TYPE = 60 //油量异常
	VS_APP_ALARM_TYPE_ILLEGAL_FIRE      VS_APP_ALARM_TYPE = 61 //非法点火
	VS_APP_ALARM_TYPE_ILLEGAL_MOVE      VS_APP_ALARM_TYPE = 62 //非法位移
	VS_APP_ALARM_TYPE_ILLEGAL_OPEN_DOOR VS_APP_ALARM_TYPE = 63 //非法开门
	VS_APP_ALARM_TYPE_DANGEROUS         VS_APP_ALARM_TYPE = 64 //危险预警
	VS_APP_ALARM_TYPE_EMERGENCY         VS_APP_ALARM_TYPE = 65 //紧急报警
	VS_APP_ALARM_TYPE_VEHICLE_STOLEN    VS_APP_ALARM_TYPE = 66 //车辆被盗
	VS_APP_ALARM_TYPE_HIGH_TEMP         VS_APP_ALARM_TYPE = 67 //高温报警
	VS_APP_ALARM_TYPE_NET_MODULE_ERR    VS_APP_ALARM_TYPE = 68 //通信模块异常
	//视频相关
	VS_APP_ALARM_TYPE_VIDEO_LOST    VS_APP_ALARM_TYPE = 70 //视频丢失     alarmInfo:丢失通道,按位
	VS_APP_ALARM_TYPE_STORAGE_FAULT VS_APP_ALARM_TYPE = 71 //存储介质故障  alarmInfo:存储介质,按位
	VS_APP_ALARM_TYPE_VIDEO_MASK    VS_APP_ALARM_TYPE = 72 //视频遮挡  alarmInfo:遮挡通道 按位
	//平台报警
	VS_APP_ALARM_TYPE_OFFLINE_TIMEOUT VS_APP_ALARM_TYPE = 100 //离线超时
	//以下是定制的报警类型
	VS_APP_ALARM_TYPE_ROAD_ANALYZE      VS_APP_ALARM_TYPE = 200 //路面分析
	VS_APP_ALARM_TYPE_ROAD_INFO_COLLECT VS_APP_ALARM_TYPE = 201 //道路信息采集
	VS_APP_ALARM_TYPE_ONE_KEY_ALARM     VS_APP_ALARM_TYPE = 202 //一键报警
)

// Enum value maps for VS_APP_ALARM_TYPE.
var (
	VS_APP_ALARM_TYPE_name = map[int32]string{
		0:   "ALARM_TYPE_NONE",
		1:   "DSM_TIRED",
		2:   "DSM_CALL",
		3:   "DSM_SMOKE",
		4:   "DSM_DISTRICT",
		5:   "DSM_DRIVER_EXCEPTION",
		6:   "DSM_AUTO_CAPTURE",
		7:   "DSM_DRIVER_CHANGE_EVENT",
		20:  "ADAS_IMPACT",
		21:  "ADAS_LANE_DEPARTURE",
		22:  "ADAS_VEHICLE_NEAR",
		23:  "ADAS_PEDESTRIAN_IMPACT",
		24:  "ADAS_FREQUENT_LANE_CHANGE",
		25:  "ADAS_ROAD_SIGN_LIMIT",
		26:  "ADAS_BARRIER",
		27:  "ADAS_ROAD_SIGN",
		28:  "ADAS_ACTIVE_CAPTURE",
		35:  "BSD_BACK",
		36:  "BSD_LEFT_BACK",
		37:  "BSD_RIGHT_BACK",
		43:  "TPMS_ALARM",
		50:  "OVER_SPEED",
		51:  "TIMEOUT",
		52:  "GNSS_MODULE_FAULT",
		53:  "ANT_SHORT",
		54:  "ANT_NOT_CONNECT",
		55:  "POWER_LOW",
		56:  "POWER_DOWN",
		57:  "TTS",
		58:  "IC_CARD",
		59:  "VSS_ERR",
		60:  "OIL_ERR",
		61:  "ILLEGAL_FIRE",
		62:  "ILLEGAL_MOVE",
		63:  "ILLEGAL_OPEN_DOOR",
		64:  "DANGEROUS",
		65:  "EMERGENCY",
		66:  "VEHICLE_STOLEN",
		67:  "HIGH_TEMP",
		68:  "NET_MODULE_ERR",
		70:  "VIDEO_LOST",
		71:  "STORAGE_FAULT",
		72:  "VIDEO_MASK",
		100: "OFFLINE_TIMEOUT",
		200: "ROAD_ANALYZE",
		201: "ROAD_INFO_COLLECT",
		202: "ONE_KEY_ALARM",
	}
	VS_APP_ALARM_TYPE_value = map[string]int32{
		"ALARM_TYPE_NONE":           0,
		"DSM_TIRED":                 1,
		"DSM_CALL":                  2,
		"DSM_SMOKE":                 3,
		"DSM_DISTRICT":              4,
		"DSM_DRIVER_EXCEPTION":      5,
		"DSM_AUTO_CAPTURE":          6,
		"DSM_DRIVER_CHANGE_EVENT":   7,
		"ADAS_IMPACT":               20,
		"ADAS_LANE_DEPARTURE":       21,
		"ADAS_VEHICLE_NEAR":         22,
		"ADAS_PEDESTRIAN_IMPACT":    23,
		"ADAS_FREQUENT_LANE_CHANGE": 24,
		"ADAS_ROAD_SIGN_LIMIT":      25,
		"ADAS_BARRIER":              26,
		"ADAS_ROAD_SIGN":            27,
		"ADAS_ACTIVE_CAPTURE":       28,
		"BSD_BACK":                  35,
		"BSD_LEFT_BACK":             36,
		"BSD_RIGHT_BACK":            37,
		"TPMS_ALARM":                43,
		"OVER_SPEED":                50,
		"TIMEOUT":                   51,
		"GNSS_MODULE_FAULT":         52,
		"ANT_SHORT":                 53,
		"ANT_NOT_CONNECT":           54,
		"POWER_LOW":                 55,
		"POWER_DOWN":                56,
		"TTS":                       57,
		"IC_CARD":                   58,
		"VSS_ERR":                   59,
		"OIL_ERR":                   60,
		"ILLEGAL_FIRE":              61,
		"ILLEGAL_MOVE":              62,
		"ILLEGAL_OPEN_DOOR":         63,
		"DANGEROUS":                 64,
		"EMERGENCY":                 65,
		"VEHICLE_STOLEN":            66,
		"HIGH_TEMP":                 67,
		"NET_MODULE_ERR":            68,
		"VIDEO_LOST":                70,
		"STORAGE_FAULT":             71,
		"VIDEO_MASK":                72,
		"OFFLINE_TIMEOUT":           100,
		"ROAD_ANALYZE":              200,
		"ROAD_INFO_COLLECT":         201,
		"ONE_KEY_ALARM":             202,
	}
)

func (x VS_APP_ALARM_TYPE) Enum() *VS_APP_ALARM_TYPE {
	p := new(VS_APP_ALARM_TYPE)
	*p = x
	return p
}

func (x VS_APP_ALARM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_APP_ALARM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[5].Descriptor()
}

func (VS_APP_ALARM_TYPE) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[5]
}

func (x VS_APP_ALARM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_APP_ALARM_TYPE.Descriptor instead.
func (VS_APP_ALARM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{5}
}

type VS_APP_ALARM_SOURCE int32

const (
	VS_APP_ALARM_SOURCE_DEVICE   VS_APP_ALARM_SOURCE = 0 //设备
	VS_APP_ALARM_SOURCE_PLATFORM VS_APP_ALARM_SOURCE = 1 //平台
)

// Enum value maps for VS_APP_ALARM_SOURCE.
var (
	VS_APP_ALARM_SOURCE_name = map[int32]string{
		0: "DEVICE",
		1: "PLATFORM",
	}
	VS_APP_ALARM_SOURCE_value = map[string]int32{
		"DEVICE":   0,
		"PLATFORM": 1,
	}
)

func (x VS_APP_ALARM_SOURCE) Enum() *VS_APP_ALARM_SOURCE {
	p := new(VS_APP_ALARM_SOURCE)
	*p = x
	return p
}

func (x VS_APP_ALARM_SOURCE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_APP_ALARM_SOURCE) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[6].Descriptor()
}

func (VS_APP_ALARM_SOURCE) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[6]
}

func (x VS_APP_ALARM_SOURCE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_APP_ALARM_SOURCE.Descriptor instead.
func (VS_APP_ALARM_SOURCE) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{6}
}

type VS_APP_ALARM_HANDLE_STATUS int32

const (
	VS_APP_ALARM_HANDLE_STATUS_AHS_HANDING         VS_APP_ALARM_HANDLE_STATUS = 0   //待处理
	VS_APP_ALARM_HANDLE_STATUS_AHS_FINISH          VS_APP_ALARM_HANDLE_STATUS = 1   //处理完成
	VS_APP_ALARM_HANDLE_STATUS_AHS_NOT_NEED_HANDLE VS_APP_ALARM_HANDLE_STATUS = 2   //不做处理
	VS_APP_ALARM_HANDLE_STATUS_AHS_FUTURE_HANDLE   VS_APP_ALARM_HANDLE_STATUS = 3   //以后处理
	VS_APP_ALARM_HANDLE_STATUS_AHS_QUERY_ALL       VS_APP_ALARM_HANDLE_STATUS = 254 //查询所有时用
)

// Enum value maps for VS_APP_ALARM_HANDLE_STATUS.
var (
	VS_APP_ALARM_HANDLE_STATUS_name = map[int32]string{
		0:   "AHS_HANDING",
		1:   "AHS_FINISH",
		2:   "AHS_NOT_NEED_HANDLE",
		3:   "AHS_FUTURE_HANDLE",
		254: "AHS_QUERY_ALL",
	}
	VS_APP_ALARM_HANDLE_STATUS_value = map[string]int32{
		"AHS_HANDING":         0,
		"AHS_FINISH":          1,
		"AHS_NOT_NEED_HANDLE": 2,
		"AHS_FUTURE_HANDLE":   3,
		"AHS_QUERY_ALL":       254,
	}
)

func (x VS_APP_ALARM_HANDLE_STATUS) Enum() *VS_APP_ALARM_HANDLE_STATUS {
	p := new(VS_APP_ALARM_HANDLE_STATUS)
	*p = x
	return p
}

func (x VS_APP_ALARM_HANDLE_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_APP_ALARM_HANDLE_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[7].Descriptor()
}

func (VS_APP_ALARM_HANDLE_STATUS) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[7]
}

func (x VS_APP_ALARM_HANDLE_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_APP_ALARM_HANDLE_STATUS.Descriptor instead.
func (VS_APP_ALARM_HANDLE_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{7}
}

type VS_MULTI_MEDIA_EVENT_TYPE int32

const (
	VS_MULTI_MEDIA_EVENT_TYPE_PLATFORM_CMD VS_MULTI_MEDIA_EVENT_TYPE = 0 //多媒体平台下发指令
	VS_MULTI_MEDIA_EVENT_TYPE_TIMER        VS_MULTI_MEDIA_EVENT_TYPE = 1 //多媒体定时动作拍摄
	VS_MULTI_MEDIA_EVENT_TYPE_ROBBERY      VS_MULTI_MEDIA_EVENT_TYPE = 2 //多媒体抢劫报警触发
	VS_MULTI_MEDIA_EVENT_TYPE_ROLLOVER     VS_MULTI_MEDIA_EVENT_TYPE = 3 //多媒体碰撞侧翻触发
	//自定义 70开始
	VS_MULTI_MEDIA_EVENT_TYPE_SWIPE_CARD VS_MULTI_MEDIA_EVENT_TYPE = 70 //刷卡事件上传
)

// Enum value maps for VS_MULTI_MEDIA_EVENT_TYPE.
var (
	VS_MULTI_MEDIA_EVENT_TYPE_name = map[int32]string{
		0:  "PLATFORM_CMD",
		1:  "TIMER",
		2:  "ROBBERY",
		3:  "ROLLOVER",
		70: "SWIPE_CARD",
	}
	VS_MULTI_MEDIA_EVENT_TYPE_value = map[string]int32{
		"PLATFORM_CMD": 0,
		"TIMER":        1,
		"ROBBERY":      2,
		"ROLLOVER":     3,
		"SWIPE_CARD":   70,
	}
)

func (x VS_MULTI_MEDIA_EVENT_TYPE) Enum() *VS_MULTI_MEDIA_EVENT_TYPE {
	p := new(VS_MULTI_MEDIA_EVENT_TYPE)
	*p = x
	return p
}

func (x VS_MULTI_MEDIA_EVENT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_MULTI_MEDIA_EVENT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[8].Descriptor()
}

func (VS_MULTI_MEDIA_EVENT_TYPE) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[8]
}

func (x VS_MULTI_MEDIA_EVENT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_MULTI_MEDIA_EVENT_TYPE.Descriptor instead.
func (VS_MULTI_MEDIA_EVENT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{8}
}

type VsCallStopType int32

const (
	VsCallStopType_CST_NONE          VsCallStopType = 0
	VsCallStopType_CST_INOUT_STATION VsCallStopType = 1 //站点
	VsCallStopType_CST_OVER_STATION  VsCallStopType = 2 //越站
	VsCallStopType_CST_SPEC_STATION  VsCallStopType = 3 //场站
)

// Enum value maps for VsCallStopType.
var (
	VsCallStopType_name = map[int32]string{
		0: "CST_NONE",
		1: "CST_INOUT_STATION",
		2: "CST_OVER_STATION",
		3: "CST_SPEC_STATION",
	}
	VsCallStopType_value = map[string]int32{
		"CST_NONE":          0,
		"CST_INOUT_STATION": 1,
		"CST_OVER_STATION":  2,
		"CST_SPEC_STATION":  3,
	}
)

func (x VsCallStopType) Enum() *VsCallStopType {
	p := new(VsCallStopType)
	*p = x
	return p
}

func (x VsCallStopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VsCallStopType) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[9].Descriptor()
}

func (VsCallStopType) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[9]
}

func (x VsCallStopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VsCallStopType.Descriptor instead.
func (VsCallStopType) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{9}
}

// 调度原因
type VS_SCHEDULE_RESULT_CODE int32

const (
	VS_SCHEDULE_RESULT_CODE_SRC_NONE                   VS_SCHEDULE_RESULT_CODE = 0
	VS_SCHEDULE_RESULT_CODE_SRC_NO_STATION_DATA_UPLOAD VS_SCHEDULE_RESULT_CODE = 1 //无站点数据
	VS_SCHEDULE_RESULT_CODE_SRC_STATION_NUM_NOT_ENOUGH VS_SCHEDULE_RESULT_CODE = 2 //上报的站点数据不足
	VS_SCHEDULE_RESULT_CODE_SRC_STATION_BASIC_DATA_ERR VS_SCHEDULE_RESULT_CODE = 3 //无站点基础数据
)

// Enum value maps for VS_SCHEDULE_RESULT_CODE.
var (
	VS_SCHEDULE_RESULT_CODE_name = map[int32]string{
		0: "SRC_NONE",
		1: "SRC_NO_STATION_DATA_UPLOAD",
		2: "SRC_STATION_NUM_NOT_ENOUGH",
		3: "SRC_STATION_BASIC_DATA_ERR",
	}
	VS_SCHEDULE_RESULT_CODE_value = map[string]int32{
		"SRC_NONE":                   0,
		"SRC_NO_STATION_DATA_UPLOAD": 1,
		"SRC_STATION_NUM_NOT_ENOUGH": 2,
		"SRC_STATION_BASIC_DATA_ERR": 3,
	}
)

func (x VS_SCHEDULE_RESULT_CODE) Enum() *VS_SCHEDULE_RESULT_CODE {
	p := new(VS_SCHEDULE_RESULT_CODE)
	*p = x
	return p
}

func (x VS_SCHEDULE_RESULT_CODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_SCHEDULE_RESULT_CODE) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_data_proto_enumTypes[10].Descriptor()
}

func (VS_SCHEDULE_RESULT_CODE) Type() protoreflect.EnumType {
	return &file_iot_pb_front_data_proto_enumTypes[10]
}

func (x VS_SCHEDULE_RESULT_CODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_SCHEDULE_RESULT_CODE.Descriptor instead.
func (VS_SCHEDULE_RESULT_CODE) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{10}
}

// 以下定位的附加信息定义--------------------------------------------
// 里程平台的状态数据
type VsPbMsPayDevStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatCap             uint32 `protobuf:"varint,1,opt,name=batCap,proto3" json:"batCap,omitempty"`                         //备用电池电量 数据范围为0～100，单位为%
	BatFreeStatus      uint32 `protobuf:"varint,2,opt,name=batFreeStatus,proto3" json:"batFreeStatus,omitempty"`           //备用电池闲置状态1：闲置状态；0：工作状态
	BatDischargeStatus uint32 `protobuf:"varint,3,opt,name=batDischargeStatus,proto3" json:"batDischargeStatus,omitempty"` //备用电池放电状态1：放电；0：非放电
	BatChargeStatus    uint32 `protobuf:"varint,4,opt,name=batChargeStatus,proto3" json:"batChargeStatus,omitempty"`       //备用电池充电状态1：充电；0：非充电
	BatTemperature     uint32 `protobuf:"varint,5,opt,name=batTemperature,proto3" json:"batTemperature,omitempty"`         //备用电池温度char -127~127度
	AccState           uint32 `protobuf:"varint,6,opt,name=accState,proto3" json:"accState,omitempty"`                     //ACC状态标志 0：ACC关；1：ACC开
	MainPowerVolt      uint32 `protobuf:"varint,7,opt,name=mainPowerVolt,proto3" json:"mainPowerVolt,omitempty"`           // WORD两个字节代表电压(单位：mv)示例：0x42 0x0C = > 0x0C42 = > 3138
	SimState           uint32 `protobuf:"varint,8,opt,name=simState,proto3" json:"simState,omitempty"`                     //SIM卡状态1：无卡；0：有卡
	NetFormat          uint32 `protobuf:"varint,9,opt,name=netFormat,proto3" json:"netFormat,omitempty"`                   //网络制式 VsDeviceDataNetFormat
	NetSignal          uint32 `protobuf:"varint,10,opt,name=netSignal,proto3" json:"netSignal,omitempty"`                  //信号强度 0:异常 1：较差 2:一般 3:良好
	GnssMode           uint32 `protobuf:"varint,11,opt,name=gnssMode,proto3" json:"gnssMode,omitempty"`                    //当前GNSS模式VsDeviceDataDevType
	UploadInterval     uint32 `protobuf:"varint,12,opt,name=uploadInterval,proto3" json:"uploadInterval,omitempty"`        //GNSS采集频率 采集频率，单位为秒(s)
	GnssNum            uint32 `protobuf:"varint,13,opt,name=gnssNum,proto3" json:"gnssNum,omitempty"`                      //GNSS模块有效星数 单位为个
	SerialState        uint32 `protobuf:"varint,14,opt,name=serialState,proto3" json:"serialState,omitempty"`              //串口接入状态 1：外接串口设备接入；0：外接串口设备未接入
	BtOpenState        uint32 `protobuf:"varint,15,opt,name=btOpenState,proto3" json:"btOpenState,omitempty"`              //终端蓝牙开启状态 1：打开；0：关闭
	HasMangquGps       uint32 `protobuf:"varint,16,opt,name=hasMangquGps,proto3" json:"hasMangquGps,omitempty"`            //存在盲区补传数据状态1：有；0：无
	CpuUsing           uint32 `protobuf:"varint,17,opt,name=cpuUsing,proto3" json:"cpuUsing,omitempty"`                    //CPU使用率百分比
	TotalStorage       uint32 `protobuf:"varint,18,opt,name=totalStorage,proto3" json:"totalStorage,omitempty"`            //存贮总空间    MB
	FreeStorage        uint32 `protobuf:"varint,19,opt,name=freeStorage,proto3" json:"freeStorage,omitempty"`              //存贮剩余空间 MB
}

func (x *VsPbMsPayDevStatusData) Reset() {
	*x = VsPbMsPayDevStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbMsPayDevStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbMsPayDevStatusData) ProtoMessage() {}

func (x *VsPbMsPayDevStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbMsPayDevStatusData.ProtoReflect.Descriptor instead.
func (*VsPbMsPayDevStatusData) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{0}
}

func (x *VsPbMsPayDevStatusData) GetBatCap() uint32 {
	if x != nil {
		return x.BatCap
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetBatFreeStatus() uint32 {
	if x != nil {
		return x.BatFreeStatus
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetBatDischargeStatus() uint32 {
	if x != nil {
		return x.BatDischargeStatus
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetBatChargeStatus() uint32 {
	if x != nil {
		return x.BatChargeStatus
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetBatTemperature() uint32 {
	if x != nil {
		return x.BatTemperature
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetAccState() uint32 {
	if x != nil {
		return x.AccState
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetMainPowerVolt() uint32 {
	if x != nil {
		return x.MainPowerVolt
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetSimState() uint32 {
	if x != nil {
		return x.SimState
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetNetFormat() uint32 {
	if x != nil {
		return x.NetFormat
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetNetSignal() uint32 {
	if x != nil {
		return x.NetSignal
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetGnssMode() uint32 {
	if x != nil {
		return x.GnssMode
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetUploadInterval() uint32 {
	if x != nil {
		return x.UploadInterval
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetGnssNum() uint32 {
	if x != nil {
		return x.GnssNum
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetSerialState() uint32 {
	if x != nil {
		return x.SerialState
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetBtOpenState() uint32 {
	if x != nil {
		return x.BtOpenState
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetHasMangquGps() uint32 {
	if x != nil {
		return x.HasMangquGps
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetCpuUsing() uint32 {
	if x != nil {
		return x.CpuUsing
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetTotalStorage() uint32 {
	if x != nil {
		return x.TotalStorage
	}
	return 0
}

func (x *VsPbMsPayDevStatusData) GetFreeStorage() uint32 {
	if x != nil {
		return x.FreeStorage
	}
	return 0
}

// 实时场强
type VsPbMsPayRealAreaInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaECI           uint32 `protobuf:"varint,1,opt,name=areaECI,proto3" json:"areaECI,omitempty"`                     //区ECI
	AreaPCI           uint32 `protobuf:"varint,2,opt,name=areaPCI,proto3" json:"areaPCI,omitempty"`                     //区PCI
	AreaFREQ          uint32 `protobuf:"varint,3,opt,name=areaFREQ,proto3" json:"areaFREQ,omitempty"`                   //区频点
	AreaFieldStrength uint32 `protobuf:"varint,4,opt,name=areaFieldStrength,proto3" json:"areaFieldStrength,omitempty"` //区场强
	AreaQuality       uint32 `protobuf:"varint,5,opt,name=areaQuality,proto3" json:"areaQuality,omitempty"`             //区信号质量
}

func (x *VsPbMsPayRealAreaInfoItem) Reset() {
	*x = VsPbMsPayRealAreaInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbMsPayRealAreaInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbMsPayRealAreaInfoItem) ProtoMessage() {}

func (x *VsPbMsPayRealAreaInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbMsPayRealAreaInfoItem.ProtoReflect.Descriptor instead.
func (*VsPbMsPayRealAreaInfoItem) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{1}
}

func (x *VsPbMsPayRealAreaInfoItem) GetAreaECI() uint32 {
	if x != nil {
		return x.AreaECI
	}
	return 0
}

func (x *VsPbMsPayRealAreaInfoItem) GetAreaPCI() uint32 {
	if x != nil {
		return x.AreaPCI
	}
	return 0
}

func (x *VsPbMsPayRealAreaInfoItem) GetAreaFREQ() uint32 {
	if x != nil {
		return x.AreaFREQ
	}
	return 0
}

func (x *VsPbMsPayRealAreaInfoItem) GetAreaFieldStrength() uint32 {
	if x != nil {
		return x.AreaFieldStrength
	}
	return 0
}

func (x *VsPbMsPayRealAreaInfoItem) GetAreaQuality() uint32 {
	if x != nil {
		return x.AreaQuality
	}
	return 0
}

// 惯导数据
type VsPbMsPayVehicleEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SixAxisInfo                   uint32 `protobuf:"varint,1,opt,name=sixAxisInfo,proto3" json:"sixAxisInfo,omitempty"`                                      //六轴报警信息 VsDeviceDataSixAxisAlarmInfo
	SpeedUpLimit                  uint32 `protobuf:"varint,2,opt,name=speedUpLimit,proto3" json:"speedUpLimit,omitempty"`                                    //上传超出阈值开始至结束时间段的峰值, 没发生时默认上传0x00，单位：0.01m/s2  //默认范阀值为2.5m/s2
	SpeedDownLimit                uint32 `protobuf:"varint,3,opt,name=speedDownLimit,proto3" json:"speedDownLimit,omitempty"`                                //上传超出阈值开始至结束时间段的峰值，没发生时默认上传0x00, 单位：0.01m/s2, 默认范阀值为-4.5m/s
	WheelSpeedUpLimit             uint32 `protobuf:"varint,4,opt,name=wheelSpeedUpLimit,proto3" json:"wheelSpeedUpLimit,omitempty"`                          // 急转弯加速度峰值,单位:加速度0.01m/s2, 没发生时默认上传0x00
	WheelDirectLimit              uint32 `protobuf:"varint,5,opt,name=wheelDirectLimit,proto3" json:"wheelDirectLimit,omitempty"`                            //急转弯角度变化值,单位:角度0.1°/s , 没发生时默认上传0x00
	ChangeLineSpeedUpLimit        uint32 `protobuf:"varint,6,opt,name=changeLineSpeedUpLimit,proto3" json:"changeLineSpeedUpLimit,omitempty"`                // 急变道加速度峰值，单位:0.01m/s2，没发生时默认上传0x00
	ChangeLineDirectLimit         uint32 `protobuf:"varint,7,opt,name=changeLineDirectLimit,proto3" json:"changeLineDirectLimit,omitempty"`                  // 急变道角度变化值，单位:0.1°/s，没发生时默认上传0x00
	EmegencyEventSpeedUpSrcValueX uint32 `protobuf:"varint,8,opt,name=emegencyEventSpeedUpSrcValueX,proto3" json:"emegencyEventSpeedUpSrcValueX,omitempty"`  // 加速度时采集的x原始值,单位: 单位：0.01m /s
	EmegencyEventSpeedUpSrcValueY uint32 `protobuf:"varint,9,opt,name=emegencyEventSpeedUpSrcValueY,proto3" json:"emegencyEventSpeedUpSrcValueY,omitempty"`  //加速度时采集的y原始值,单位: 单位：0.01m /s
	EmegencyEventSpeedUpSrcValueZ uint32 `protobuf:"varint,10,opt,name=emegencyEventSpeedUpSrcValueZ,proto3" json:"emegencyEventSpeedUpSrcValueZ,omitempty"` // 加速度时采集的z原始值,单位: 单位：0.01m /s
}

func (x *VsPbMsPayVehicleEventInfo) Reset() {
	*x = VsPbMsPayVehicleEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbMsPayVehicleEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbMsPayVehicleEventInfo) ProtoMessage() {}

func (x *VsPbMsPayVehicleEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbMsPayVehicleEventInfo.ProtoReflect.Descriptor instead.
func (*VsPbMsPayVehicleEventInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{2}
}

func (x *VsPbMsPayVehicleEventInfo) GetSixAxisInfo() uint32 {
	if x != nil {
		return x.SixAxisInfo
	}
	return 0
}

func (x *VsPbMsPayVehicleEventInfo) GetSpeedUpLimit() uint32 {
	if x != nil {
		return x.SpeedUpLimit
	}
	return 0
}

func (x *VsPbMsPayVehicleEventInfo) GetSpeedDownLimit() uint32 {
	if x != nil {
		return x.SpeedDownLimit
	}
	return 0
}

func (x *VsPbMsPayVehicleEventInfo) GetWheelSpeedUpLimit() uint32 {
	if x != nil {
		return x.WheelSpeedUpLimit
	}
	return 0
}

func (x *VsPbMsPayVehicleEventInfo) GetWheelDirectLimit() uint32 {
	if x != nil {
		return x.WheelDirectLimit
	}
	return 0
}

func (x *VsPbMsPayVehicleEventInfo) GetChangeLineSpeedUpLimit() uint32 {
	if x != nil {
		return x.ChangeLineSpeedUpLimit
	}
	return 0
}

func (x *VsPbMsPayVehicleEventInfo) GetChangeLineDirectLimit() uint32 {
	if x != nil {
		return x.ChangeLineDirectLimit
	}
	return 0
}

func (x *VsPbMsPayVehicleEventInfo) GetEmegencyEventSpeedUpSrcValueX() uint32 {
	if x != nil {
		return x.EmegencyEventSpeedUpSrcValueX
	}
	return 0
}

func (x *VsPbMsPayVehicleEventInfo) GetEmegencyEventSpeedUpSrcValueY() uint32 {
	if x != nil {
		return x.EmegencyEventSpeedUpSrcValueY
	}
	return 0
}

func (x *VsPbMsPayVehicleEventInfo) GetEmegencyEventSpeedUpSrcValueZ() uint32 {
	if x != nil {
		return x.EmegencyEventSpeedUpSrcValueZ
	}
	return 0
}

// 主动安全数据
// ADAS
type VsPbStorageASADASInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmID       uint32 `protobuf:"varint,2,opt,name=alarmID,proto3" json:"alarmID,omitempty"`             //报警ID
	AlarmType     uint32 `protobuf:"varint,3,opt,name=alarmType,proto3" json:"alarmType,omitempty"`         //报警类型1:向前,2:车道偏离,3:过近,4.行人,5.变道,...
	AlarmLevel    uint32 `protobuf:"varint,4,opt,name=alarmLevel,proto3" json:"alarmLevel,omitempty"`       //报警级别,1.一级,2.二级
	AlarmInfoFlag string `protobuf:"bytes,20,opt,name=alarmInfoFlag,proto3" json:"alarmInfoFlag,omitempty"` //报警标识,终端ID_时间(timestamp)_报警序号_附件数量
}

func (x *VsPbStorageASADASInfo) Reset() {
	*x = VsPbStorageASADASInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageASADASInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageASADASInfo) ProtoMessage() {}

func (x *VsPbStorageASADASInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageASADASInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageASADASInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{3}
}

func (x *VsPbStorageASADASInfo) GetAlarmID() uint32 {
	if x != nil {
		return x.AlarmID
	}
	return 0
}

func (x *VsPbStorageASADASInfo) GetAlarmType() uint32 {
	if x != nil {
		return x.AlarmType
	}
	return 0
}

func (x *VsPbStorageASADASInfo) GetAlarmLevel() uint32 {
	if x != nil {
		return x.AlarmLevel
	}
	return 0
}

func (x *VsPbStorageASADASInfo) GetAlarmInfoFlag() string {
	if x != nil {
		return x.AlarmInfoFlag
	}
	return ""
}

// DSM
type VsPbStorageASDSMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmID       uint32 `protobuf:"varint,2,opt,name=alarmID,proto3" json:"alarmID,omitempty"`             //报警ID
	AlarmType     uint32 `protobuf:"varint,3,opt,name=alarmType,proto3" json:"alarmType,omitempty"`         //报警类型1:疲劳,2.接打电话,3.抽烟,4.分神...
	AlarmLevel    uint32 `protobuf:"varint,4,opt,name=alarmLevel,proto3" json:"alarmLevel,omitempty"`       //报警级别,1.一级,2.二级
	TiredValue    uint32 `protobuf:"varint,5,opt,name=tiredValue,proto3" json:"tiredValue,omitempty"`       //疲劳程度 1-10
	AlarmInfoFlag string `protobuf:"bytes,20,opt,name=alarmInfoFlag,proto3" json:"alarmInfoFlag,omitempty"` //报警标识,终端ID_时间(timestamp)_报警序号_附件数量
}

func (x *VsPbStorageASDSMInfo) Reset() {
	*x = VsPbStorageASDSMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageASDSMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageASDSMInfo) ProtoMessage() {}

func (x *VsPbStorageASDSMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageASDSMInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageASDSMInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{4}
}

func (x *VsPbStorageASDSMInfo) GetAlarmID() uint32 {
	if x != nil {
		return x.AlarmID
	}
	return 0
}

func (x *VsPbStorageASDSMInfo) GetAlarmType() uint32 {
	if x != nil {
		return x.AlarmType
	}
	return 0
}

func (x *VsPbStorageASDSMInfo) GetAlarmLevel() uint32 {
	if x != nil {
		return x.AlarmLevel
	}
	return 0
}

func (x *VsPbStorageASDSMInfo) GetTiredValue() uint32 {
	if x != nil {
		return x.TiredValue
	}
	return 0
}

func (x *VsPbStorageASDSMInfo) GetAlarmInfoFlag() string {
	if x != nil {
		return x.AlarmInfoFlag
	}
	return ""
}

// 胎压事件列表
type VsPbStorageASTPMSEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position        uint32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`               //报警轮胎位置编号,从左前轮开始以Z字形从00依次编号
	EventType       uint32 `protobuf:"varint,2,opt,name=eventType,proto3" json:"eventType,omitempty"`             //事件类型,16位标志位
	TirePressure    uint32 `protobuf:"varint,3,opt,name=tirePressure,proto3" json:"tirePressure,omitempty"`       //胎压值, kpa
	TireTemperature uint32 `protobuf:"varint,4,opt,name=tireTemperature,proto3" json:"tireTemperature,omitempty"` //胎温 .C
	BatteryQuantity uint32 `protobuf:"varint,5,opt,name=batteryQuantity,proto3" json:"batteryQuantity,omitempty"` //电池电量 %
}

func (x *VsPbStorageASTPMSEventList) Reset() {
	*x = VsPbStorageASTPMSEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageASTPMSEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageASTPMSEventList) ProtoMessage() {}

func (x *VsPbStorageASTPMSEventList) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageASTPMSEventList.ProtoReflect.Descriptor instead.
func (*VsPbStorageASTPMSEventList) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{5}
}

func (x *VsPbStorageASTPMSEventList) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *VsPbStorageASTPMSEventList) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VsPbStorageASTPMSEventList) GetTirePressure() uint32 {
	if x != nil {
		return x.TirePressure
	}
	return 0
}

func (x *VsPbStorageASTPMSEventList) GetTireTemperature() uint32 {
	if x != nil {
		return x.TireTemperature
	}
	return 0
}

func (x *VsPbStorageASTPMSEventList) GetBatteryQuantity() uint32 {
	if x != nil {
		return x.BatteryQuantity
	}
	return 0
}

// TPMS
type VsPbStorageASTPMSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmID       uint32                        `protobuf:"varint,2,opt,name=alarmID,proto3" json:"alarmID,omitempty"`             //报警ID
	EventList     []*VsPbStorageASTPMSEventList `protobuf:"bytes,3,rep,name=eventList,proto3" json:"eventList,omitempty"`          //胎压事件
	AlarmInfoFlag string                        `protobuf:"bytes,20,opt,name=alarmInfoFlag,proto3" json:"alarmInfoFlag,omitempty"` //报警标识,终端ID_时间(timestamp)_报警序号_附件数量
}

func (x *VsPbStorageASTPMSInfo) Reset() {
	*x = VsPbStorageASTPMSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageASTPMSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageASTPMSInfo) ProtoMessage() {}

func (x *VsPbStorageASTPMSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageASTPMSInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageASTPMSInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{6}
}

func (x *VsPbStorageASTPMSInfo) GetAlarmID() uint32 {
	if x != nil {
		return x.AlarmID
	}
	return 0
}

func (x *VsPbStorageASTPMSInfo) GetEventList() []*VsPbStorageASTPMSEventList {
	if x != nil {
		return x.EventList
	}
	return nil
}

func (x *VsPbStorageASTPMSInfo) GetAlarmInfoFlag() string {
	if x != nil {
		return x.AlarmInfoFlag
	}
	return ""
}

// BSD
type VsPbStorageASBSDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmID       uint32 `protobuf:"varint,2,opt,name=alarmID,proto3" json:"alarmID,omitempty"`             //报警ID
	AlarmType     uint32 `protobuf:"varint,3,opt,name=alarmType,proto3" json:"alarmType,omitempty"`         //报警类型1:后方,2.左侧后方,3.右测后方
	AlarmInfoFlag string `protobuf:"bytes,20,opt,name=alarmInfoFlag,proto3" json:"alarmInfoFlag,omitempty"` //报警标识,终端ID_时间(timestamp)_报警序号_附件数量
}

func (x *VsPbStorageASBSDInfo) Reset() {
	*x = VsPbStorageASBSDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageASBSDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageASBSDInfo) ProtoMessage() {}

func (x *VsPbStorageASBSDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageASBSDInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageASBSDInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{7}
}

func (x *VsPbStorageASBSDInfo) GetAlarmID() uint32 {
	if x != nil {
		return x.AlarmID
	}
	return 0
}

func (x *VsPbStorageASBSDInfo) GetAlarmType() uint32 {
	if x != nil {
		return x.AlarmType
	}
	return 0
}

func (x *VsPbStorageASBSDInfo) GetAlarmInfoFlag() string {
	if x != nil {
		return x.AlarmInfoFlag
	}
	return ""
}

// 报站器信息
type VsPbStorageCallStopBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationNo   uint32 `protobuf:"varint,1,opt,name=stationNo,proto3" json:"stationNo,omitempty"`    //站点编号
	DirectType  uint32 `protobuf:"varint,2,opt,name=directType,proto3" json:"directType,omitempty"`  //线路方向 0:上行;1:下行;2:环线
	Status      uint32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`          //进出站状态  0:进站,1:出站
	StationName string `protobuf:"bytes,4,opt,name=stationName,proto3" json:"stationName,omitempty"` //站点名称
}

func (x *VsPbStorageCallStopBaseInfo) Reset() {
	*x = VsPbStorageCallStopBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageCallStopBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageCallStopBaseInfo) ProtoMessage() {}

func (x *VsPbStorageCallStopBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageCallStopBaseInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageCallStopBaseInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{8}
}

func (x *VsPbStorageCallStopBaseInfo) GetStationNo() uint32 {
	if x != nil {
		return x.StationNo
	}
	return 0
}

func (x *VsPbStorageCallStopBaseInfo) GetDirectType() uint32 {
	if x != nil {
		return x.DirectType
	}
	return 0
}

func (x *VsPbStorageCallStopBaseInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VsPbStorageCallStopBaseInfo) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

// VsPbStorageRoadAnalyzeObjectInfo 扩展信息: 巡检算法路面病害报警信息
type VsPbStorageRoadAnalyzeObjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`          //病害名称
	X1       uint32 `protobuf:"varint,2,opt,name=x1,proto3" json:"x1,omitempty"`             //病害矩形框右下点x
	Y1       uint32 `protobuf:"varint,3,opt,name=y1,proto3" json:"y1,omitempty"`             //病害矩形框右下点y
	X2       uint32 `protobuf:"varint,4,opt,name=x2,proto3" json:"x2,omitempty"`             //病害矩形框左上点x
	Y2       uint32 `protobuf:"varint,5,opt,name=y2,proto3" json:"y2,omitempty"`             //病害矩形框左上点x
	ZnArea   uint32 `protobuf:"varint,6,opt,name=znArea,proto3" json:"znArea,omitempty"`     //依据农村公路指南计算的面积1/10000平方米
	BzArea   uint32 `protobuf:"varint,7,opt,name=bzArea,proto3" json:"bzArea,omitempty"`     //依据高等级公路标准计算的面积1/10000平方米
	Accuracy uint32 `protobuf:"varint,8,opt,name=accuracy,proto3" json:"accuracy,omitempty"` //置信度*10000
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) Reset() {
	*x = VsPbStorageRoadAnalyzeObjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageRoadAnalyzeObjectInfo) ProtoMessage() {}

func (x *VsPbStorageRoadAnalyzeObjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageRoadAnalyzeObjectInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageRoadAnalyzeObjectInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{9}
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) GetX1() uint32 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) GetY1() uint32 {
	if x != nil {
		return x.Y1
	}
	return 0
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) GetX2() uint32 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) GetY2() uint32 {
	if x != nil {
		return x.Y2
	}
	return 0
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) GetZnArea() uint32 {
	if x != nil {
		return x.ZnArea
	}
	return 0
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) GetBzArea() uint32 {
	if x != nil {
		return x.BzArea
	}
	return 0
}

func (x *VsPbStorageRoadAnalyzeObjectInfo) GetAccuracy() uint32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

type VsPbStorageRoadAnalyzeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmFlag       string                              `protobuf:"bytes,1,opt,name=alarmFlag,proto3" json:"alarmFlag,omitempty"`               //报警标识
	Objects         []*VsPbStorageRoadAnalyzeObjectInfo `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`                   //路面分析信息列表
	AlarmID         string                              `protobuf:"bytes,6,opt,name=alarmID,proto3" json:"alarmID,omitempty"`                   //事件ID
	IsValid         bool                                `protobuf:"varint,7,opt,name=isValid,proto3" json:"isValid,omitempty"`                  //是否有效
	Sharpness       uint32                              `protobuf:"varint,8,opt,name=sharpness,proto3" json:"sharpness,omitempty"`              //图像清晰度指数, 原始值*100保留两位小数
	NotDark         uint32                              `protobuf:"varint,9,opt,name=notDark,proto3" json:"notDark,omitempty"`                  //图像不过暗指数, 原始值*100保留两位小数
	NotOverexposure uint32                              `protobuf:"varint,10,opt,name=notOverexposure,proto3" json:"notOverexposure,omitempty"` //图像不过爆指数, 原始值*100保留两位小数
	RoadTypeName    string                              `protobuf:"bytes,11,opt,name=roadTypeName,proto3" json:"roadTypeName,omitempty"`        //道路类型
}

func (x *VsPbStorageRoadAnalyzeInfo) Reset() {
	*x = VsPbStorageRoadAnalyzeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageRoadAnalyzeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageRoadAnalyzeInfo) ProtoMessage() {}

func (x *VsPbStorageRoadAnalyzeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageRoadAnalyzeInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageRoadAnalyzeInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{10}
}

func (x *VsPbStorageRoadAnalyzeInfo) GetAlarmFlag() string {
	if x != nil {
		return x.AlarmFlag
	}
	return ""
}

func (x *VsPbStorageRoadAnalyzeInfo) GetObjects() []*VsPbStorageRoadAnalyzeObjectInfo {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *VsPbStorageRoadAnalyzeInfo) GetAlarmID() string {
	if x != nil {
		return x.AlarmID
	}
	return ""
}

func (x *VsPbStorageRoadAnalyzeInfo) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *VsPbStorageRoadAnalyzeInfo) GetSharpness() uint32 {
	if x != nil {
		return x.Sharpness
	}
	return 0
}

func (x *VsPbStorageRoadAnalyzeInfo) GetNotDark() uint32 {
	if x != nil {
		return x.NotDark
	}
	return 0
}

func (x *VsPbStorageRoadAnalyzeInfo) GetNotOverexposure() uint32 {
	if x != nil {
		return x.NotOverexposure
	}
	return 0
}

func (x *VsPbStorageRoadAnalyzeInfo) GetRoadTypeName() string {
	if x != nil {
		return x.RoadTypeName
	}
	return ""
}

type VsPbStorageAccSpeedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool  `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"` //是否有效
	XAcc    int32 `protobuf:"varint,2,opt,name=xAcc,proto3" json:"xAcc,omitempty"`       //x轴加速度, 0.01g
	YAcc    int32 `protobuf:"varint,3,opt,name=yAcc,proto3" json:"yAcc,omitempty"`       //y轴加速度, 0.01g
	ZAcc    int32 `protobuf:"varint,4,opt,name=zAcc,proto3" json:"zAcc,omitempty"`       //z轴加速度, 0.01
}

func (x *VsPbStorageAccSpeedInfo) Reset() {
	*x = VsPbStorageAccSpeedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageAccSpeedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageAccSpeedInfo) ProtoMessage() {}

func (x *VsPbStorageAccSpeedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageAccSpeedInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageAccSpeedInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{11}
}

func (x *VsPbStorageAccSpeedInfo) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *VsPbStorageAccSpeedInfo) GetXAcc() int32 {
	if x != nil {
		return x.XAcc
	}
	return 0
}

func (x *VsPbStorageAccSpeedInfo) GetYAcc() int32 {
	if x != nil {
		return x.YAcc
	}
	return 0
}

func (x *VsPbStorageAccSpeedInfo) GetZAcc() int32 {
	if x != nil {
		return x.ZAcc
	}
	return 0
}

type VsPbStorageRoadInfoCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid         bool   `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`                 //是否有效
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                        //巡检人员
	Province        string `protobuf:"bytes,3,opt,name=province,proto3" json:"province,omitempty"`                //所在省份
	RoadType        uint32 `protobuf:"varint,4,opt,name=roadType,proto3" json:"roadType,omitempty"`               //路面类型0:不指定 1: 水泥，2: 沥青，3: 沙石
	RoadName        string `protobuf:"bytes,5,opt,name=roadName,proto3" json:"roadName,omitempty"`                //道路名称
	RoadCode        string `protobuf:"bytes,6,opt,name=roadCode,proto3" json:"roadCode,omitempty"`                //道路编码
	UpDown          uint32 `protobuf:"varint,8,opt,name=upDown,proto3" json:"upDown,omitempty"`                   //上下行, 0: 上行, 1: 下行
	StakeMark       string `protobuf:"bytes,9,opt,name=stakeMark,proto3" json:"stakeMark,omitempty"`              //桩号
	IsStart         bool   `protobuf:"varint,10,opt,name=isStart,proto3" json:"isStart,omitempty"`                //是否为开始
	AlarmID         string `protobuf:"bytes,11,opt,name=alarmID,proto3" json:"alarmID,omitempty"`                 //事件ID
	Mode            uint32 `protobuf:"varint,12,opt,name=mode,proto3" json:"mode,omitempty"`                      //模式:智能巡检模式,1:公路保险模式
	UniqueID        uint32 `protobuf:"varint,13,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`              //唯一ID
	Weather         string `protobuf:"bytes,14,opt,name=weather,proto3" json:"weather,omitempty"`                 //巡检天气
	City            string `protobuf:"bytes,15,opt,name=city,proto3" json:"city,omitempty"`                       //所在地市
	District        string `protobuf:"bytes,16,opt,name=district,proto3" json:"district,omitempty"`               //所在区县
	RoadSectionCode string `protobuf:"bytes,17,opt,name=roadSectionCode,proto3" json:"roadSectionCode,omitempty"` //路段代码
	RoadWidth       string `protobuf:"bytes,18,opt,name=roadWidth,proto3" json:"roadWidth,omitempty"`             //道路宽度
	RoadLane        string `protobuf:"bytes,19,opt,name=roadLane,proto3" json:"roadLane,omitempty"`               //巡检车道
	Company         string `protobuf:"bytes,20,opt,name=company,proto3" json:"company,omitempty"`                 //巡检单位
	RoadLevel       string `protobuf:"bytes,21,opt,name=roadLevel,proto3" json:"roadLevel,omitempty"`             //道路等级
}

func (x *VsPbStorageRoadInfoCollection) Reset() {
	*x = VsPbStorageRoadInfoCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageRoadInfoCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageRoadInfoCollection) ProtoMessage() {}

func (x *VsPbStorageRoadInfoCollection) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageRoadInfoCollection.ProtoReflect.Descriptor instead.
func (*VsPbStorageRoadInfoCollection) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{12}
}

func (x *VsPbStorageRoadInfoCollection) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *VsPbStorageRoadInfoCollection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetRoadType() uint32 {
	if x != nil {
		return x.RoadType
	}
	return 0
}

func (x *VsPbStorageRoadInfoCollection) GetRoadName() string {
	if x != nil {
		return x.RoadName
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetRoadCode() string {
	if x != nil {
		return x.RoadCode
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetUpDown() uint32 {
	if x != nil {
		return x.UpDown
	}
	return 0
}

func (x *VsPbStorageRoadInfoCollection) GetStakeMark() string {
	if x != nil {
		return x.StakeMark
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetIsStart() bool {
	if x != nil {
		return x.IsStart
	}
	return false
}

func (x *VsPbStorageRoadInfoCollection) GetAlarmID() string {
	if x != nil {
		return x.AlarmID
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *VsPbStorageRoadInfoCollection) GetUniqueID() uint32 {
	if x != nil {
		return x.UniqueID
	}
	return 0
}

func (x *VsPbStorageRoadInfoCollection) GetWeather() string {
	if x != nil {
		return x.Weather
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetRoadSectionCode() string {
	if x != nil {
		return x.RoadSectionCode
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetRoadWidth() string {
	if x != nil {
		return x.RoadWidth
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetRoadLane() string {
	if x != nil {
		return x.RoadLane
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *VsPbStorageRoadInfoCollection) GetRoadLevel() string {
	if x != nil {
		return x.RoadLevel
	}
	return ""
}

// 定位数据
type VsPbStorageGpsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//接入填入
	DevNo               string                 `protobuf:"bytes,1,opt,name=devNo,proto3" json:"devNo,omitempty"`                               //设备号
	DevVersion          string                 `protobuf:"bytes,2,opt,name=devVersion,proto3" json:"devVersion,omitempty"`                     //设备版本
	Time                uint32                 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                //时间
	Longitude           int32                  `protobuf:"varint,4,opt,name=longitude,proto3" json:"longitude,omitempty"`                      //经度
	Latitude            int32                  `protobuf:"varint,5,opt,name=latitude,proto3" json:"latitude,omitempty"`                        //纬度
	Speed               uint32                 `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`                              //速度
	Direction           uint32                 `protobuf:"varint,7,opt,name=direction,proto3" json:"direction,omitempty"`                      //方向
	NetSignal           uint32                 `protobuf:"varint,8,opt,name=netSignal,proto3" json:"netSignal,omitempty"`                      //网络信号
	SatelliteNum        uint32                 `protobuf:"varint,9,opt,name=satelliteNum,proto3" json:"satelliteNum,omitempty"`                //卫星定位数量
	DeviceMileage       uint32                 `protobuf:"varint,10,opt,name=deviceMileage,proto3" json:"deviceMileage,omitempty"`             //设备总里程  米
	DataFlow            uint32                 `protobuf:"varint,11,opt,name=dataFlow,proto3" json:"dataFlow,omitempty"`                       //流量
	Altitude            uint32                 `protobuf:"varint,12,opt,name=altitude,proto3" json:"altitude,omitempty"`                       //海拔 米
	StatusFlag          uint32                 `protobuf:"varint,13,opt,name=statusFlag,proto3" json:"statusFlag,omitempty"`                   //状态标志位
	AlarmFlag           uint32                 `protobuf:"varint,14,opt,name=alarmFlag,proto3" json:"alarmFlag,omitempty"`                     //报警标志--2013-2019报警标志位
	VideoAlarmFlag      uint32                 `protobuf:"varint,15,opt,name=videoAlarmFlag,proto3" json:"videoAlarmFlag,omitempty"`           //视频报警标志位 0:丢失;1:遮挡;2:存储单元;
	VideoLost           uint32                 `protobuf:"varint,16,opt,name=videoLost,proto3" json:"videoLost,omitempty"`                     //视频丢失
	VideoMask           uint32                 `protobuf:"varint,17,opt,name=videoMask,proto3" json:"videoMask,omitempty"`                     //视频屏蔽// bit0-31位,表示1-32个逻辑通道
	StorageStatus       uint32                 `protobuf:"varint,18,opt,name=storageStatus,proto3" json:"storageStatus,omitempty"`             // bit0-bit11,表示1-12个主存贮器，bit12-bit15为1-4个灾备存贮装置，对应位为1表示故障，0表示正常
	VehicleExternStatus uint32                 `protobuf:"varint,19,opt,name=vehicleExternStatus,proto3" json:"vehicleExternStatus,omitempty"` // 灯、空调、加热器等车辆状态信号
	OilValue            uint32                 `protobuf:"varint,20,opt,name=oilValue,proto3" json:"oilValue,omitempty"`                       //油量 1/10L
	DataValidFlag       uint32                 `protobuf:"varint,21,opt,name=dataValidFlag,proto3" json:"dataValidFlag,omitempty"`             //数据有效位
	AdasInfo            *VsPbStorageASADASInfo `protobuf:"bytes,30,opt,name=adasInfo,proto3" json:"adasInfo,omitempty"`                        //adas
	DsmInfo             *VsPbStorageASDSMInfo  `protobuf:"bytes,31,opt,name=dsmInfo,proto3" json:"dsmInfo,omitempty"`                          //dsm
	TpmsInfo            *VsPbStorageASTPMSInfo `protobuf:"bytes,32,opt,name=tpmsInfo,proto3" json:"tpmsInfo,omitempty"`                        //tpms
	BsdInfo             *VsPbStorageASBSDInfo  `protobuf:"bytes,33,opt,name=bsdInfo,proto3" json:"bsdInfo,omitempty"`                          //bsd
	RecordStatus        uint32                 `protobuf:"varint,34,opt,name=recordStatus,proto3" json:"recordStatus,omitempty"`               //录像状态,按位1为正常录像
	GpsTimeMilli        uint32                 `protobuf:"varint,35,opt,name=gpsTimeMilli,proto3" json:"gpsTimeMilli,omitempty"`               //定位的毫秒值,用于更精确的数据,只有存储有效
	MilliSec            uint64                 `protobuf:"varint,36,opt,name=milliSec,proto3" json:"milliSec,omitempty"`                       //毫秒
	//定义的数据结构-里程项目
	MspayDevStatus        *VsPbMsPayDevStatusData      `protobuf:"bytes,100,opt,name=mspayDevStatus,proto3" json:"mspayDevStatus,omitempty"`               //设备状态数据
	MspayAreaItems        []*VsPbMsPayRealAreaInfoItem `protobuf:"bytes,101,rep,name=mspayAreaItems,proto3" json:"mspayAreaItems,omitempty"`               //场强数据
	MspayVehicleEventInfo *VsPbMsPayVehicleEventInfo   `protobuf:"bytes,102,opt,name=mspayVehicleEventInfo,proto3" json:"mspayVehicleEventInfo,omitempty"` //惯导数据信息
	MspayAlarmFlag        uint32                       `protobuf:"varint,103,opt,name=mspayAlarmFlag,proto3" json:"mspayAlarmFlag,omitempty"`              //报警标志位
	//国交项目
	RoadAnalyzeInfo    *VsPbStorageRoadAnalyzeInfo    `protobuf:"bytes,104,opt,name=roadAnalyzeInfo,proto3" json:"roadAnalyzeInfo,omitempty"`       //  路面分析信息
	RoadInfoCollection *VsPbStorageRoadInfoCollection `protobuf:"bytes,105,opt,name=roadInfoCollection,proto3" json:"roadInfoCollection,omitempty"` //道路信息采集
	AccSpeed           *VsPbStorageAccSpeedInfo       `protobuf:"bytes,106,opt,name=accSpeed,proto3" json:"accSpeed,omitempty"`                     //加速度
	//服务平台填入
	VehicleGuid        uint32                       `protobuf:"varint,200,opt,name=vehicleGuid,proto3" json:"vehicleGuid,omitempty"`               //车辆guid
	PlatformMileage    uint32                       `protobuf:"varint,201,opt,name=platformMileage,proto3" json:"platformMileage,omitempty"`       //平台总里程 米
	ProtocolType       uint32                       `protobuf:"varint,202,opt,name=protocolType,proto3" json:"protocolType,omitempty"`             //协议类型,用于区分各种地标
	VehicleNo          string                       `protobuf:"bytes,203,opt,name=vehicleNo,proto3" json:"vehicleNo,omitempty"`                    //车牌号
	ReceiveTime        uint32                       `protobuf:"varint,204,opt,name=receiveTime,proto3" json:"receiveTime,omitempty"`               //数据接收时间
	AdminGuid          uint32                       `protobuf:"varint,205,opt,name=adminGuid,proto3" json:"adminGuid,omitempty"`                   //管理员GUID,用于存时,需要存到哪个库
	AppStatusFlag      uint32                       `protobuf:"varint,206,opt,name=appStatusFlag,proto3" json:"appStatusFlag,omitempty"`           //应用的状态数据,VS_PB_APP_STATUS_FLAG
	StopDriveStartTime uint32                       `protobuf:"varint,207,opt,name=stopDriveStartTime,proto3" json:"stopDriveStartTime,omitempty"` //停车开始时间
	CurDayMileage      uint32                       `protobuf:"varint,208,opt,name=curDayMileage,proto3" json:"curDayMileage,omitempty"`           //当天里程 米
	DriveTimeLen       uint32                       `protobuf:"varint,209,opt,name=driveTimeLen,proto3" json:"driveTimeLen,omitempty"`             //当天行车时长 秒
	CallStopInfo       *VsPbStorageCallStopBaseInfo `protobuf:"bytes,210,opt,name=callStopInfo,proto3" json:"callStopInfo,omitempty"`              //站点信息
	StaffName          string                       `protobuf:"bytes,211,opt,name=staffName,proto3" json:"staffName,omitempty"`                    //人员名称
	StaffIDCard        string                       `protobuf:"bytes,222,opt,name=staffIDCard,proto3" json:"staffIDCard,omitempty"`                //人员唯一ID
}

func (x *VsPbStorageGpsData) Reset() {
	*x = VsPbStorageGpsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageGpsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageGpsData) ProtoMessage() {}

func (x *VsPbStorageGpsData) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageGpsData.ProtoReflect.Descriptor instead.
func (*VsPbStorageGpsData) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{13}
}

func (x *VsPbStorageGpsData) GetDevNo() string {
	if x != nil {
		return x.DevNo
	}
	return ""
}

func (x *VsPbStorageGpsData) GetDevVersion() string {
	if x != nil {
		return x.DevVersion
	}
	return ""
}

func (x *VsPbStorageGpsData) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *VsPbStorageGpsData) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *VsPbStorageGpsData) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *VsPbStorageGpsData) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *VsPbStorageGpsData) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *VsPbStorageGpsData) GetNetSignal() uint32 {
	if x != nil {
		return x.NetSignal
	}
	return 0
}

func (x *VsPbStorageGpsData) GetSatelliteNum() uint32 {
	if x != nil {
		return x.SatelliteNum
	}
	return 0
}

func (x *VsPbStorageGpsData) GetDeviceMileage() uint32 {
	if x != nil {
		return x.DeviceMileage
	}
	return 0
}

func (x *VsPbStorageGpsData) GetDataFlow() uint32 {
	if x != nil {
		return x.DataFlow
	}
	return 0
}

func (x *VsPbStorageGpsData) GetAltitude() uint32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *VsPbStorageGpsData) GetStatusFlag() uint32 {
	if x != nil {
		return x.StatusFlag
	}
	return 0
}

func (x *VsPbStorageGpsData) GetAlarmFlag() uint32 {
	if x != nil {
		return x.AlarmFlag
	}
	return 0
}

func (x *VsPbStorageGpsData) GetVideoAlarmFlag() uint32 {
	if x != nil {
		return x.VideoAlarmFlag
	}
	return 0
}

func (x *VsPbStorageGpsData) GetVideoLost() uint32 {
	if x != nil {
		return x.VideoLost
	}
	return 0
}

func (x *VsPbStorageGpsData) GetVideoMask() uint32 {
	if x != nil {
		return x.VideoMask
	}
	return 0
}

func (x *VsPbStorageGpsData) GetStorageStatus() uint32 {
	if x != nil {
		return x.StorageStatus
	}
	return 0
}

func (x *VsPbStorageGpsData) GetVehicleExternStatus() uint32 {
	if x != nil {
		return x.VehicleExternStatus
	}
	return 0
}

func (x *VsPbStorageGpsData) GetOilValue() uint32 {
	if x != nil {
		return x.OilValue
	}
	return 0
}

func (x *VsPbStorageGpsData) GetDataValidFlag() uint32 {
	if x != nil {
		return x.DataValidFlag
	}
	return 0
}

func (x *VsPbStorageGpsData) GetAdasInfo() *VsPbStorageASADASInfo {
	if x != nil {
		return x.AdasInfo
	}
	return nil
}

func (x *VsPbStorageGpsData) GetDsmInfo() *VsPbStorageASDSMInfo {
	if x != nil {
		return x.DsmInfo
	}
	return nil
}

func (x *VsPbStorageGpsData) GetTpmsInfo() *VsPbStorageASTPMSInfo {
	if x != nil {
		return x.TpmsInfo
	}
	return nil
}

func (x *VsPbStorageGpsData) GetBsdInfo() *VsPbStorageASBSDInfo {
	if x != nil {
		return x.BsdInfo
	}
	return nil
}

func (x *VsPbStorageGpsData) GetRecordStatus() uint32 {
	if x != nil {
		return x.RecordStatus
	}
	return 0
}

func (x *VsPbStorageGpsData) GetGpsTimeMilli() uint32 {
	if x != nil {
		return x.GpsTimeMilli
	}
	return 0
}

func (x *VsPbStorageGpsData) GetMilliSec() uint64 {
	if x != nil {
		return x.MilliSec
	}
	return 0
}

func (x *VsPbStorageGpsData) GetMspayDevStatus() *VsPbMsPayDevStatusData {
	if x != nil {
		return x.MspayDevStatus
	}
	return nil
}

func (x *VsPbStorageGpsData) GetMspayAreaItems() []*VsPbMsPayRealAreaInfoItem {
	if x != nil {
		return x.MspayAreaItems
	}
	return nil
}

func (x *VsPbStorageGpsData) GetMspayVehicleEventInfo() *VsPbMsPayVehicleEventInfo {
	if x != nil {
		return x.MspayVehicleEventInfo
	}
	return nil
}

func (x *VsPbStorageGpsData) GetMspayAlarmFlag() uint32 {
	if x != nil {
		return x.MspayAlarmFlag
	}
	return 0
}

func (x *VsPbStorageGpsData) GetRoadAnalyzeInfo() *VsPbStorageRoadAnalyzeInfo {
	if x != nil {
		return x.RoadAnalyzeInfo
	}
	return nil
}

func (x *VsPbStorageGpsData) GetRoadInfoCollection() *VsPbStorageRoadInfoCollection {
	if x != nil {
		return x.RoadInfoCollection
	}
	return nil
}

func (x *VsPbStorageGpsData) GetAccSpeed() *VsPbStorageAccSpeedInfo {
	if x != nil {
		return x.AccSpeed
	}
	return nil
}

func (x *VsPbStorageGpsData) GetVehicleGuid() uint32 {
	if x != nil {
		return x.VehicleGuid
	}
	return 0
}

func (x *VsPbStorageGpsData) GetPlatformMileage() uint32 {
	if x != nil {
		return x.PlatformMileage
	}
	return 0
}

func (x *VsPbStorageGpsData) GetProtocolType() uint32 {
	if x != nil {
		return x.ProtocolType
	}
	return 0
}

func (x *VsPbStorageGpsData) GetVehicleNo() string {
	if x != nil {
		return x.VehicleNo
	}
	return ""
}

func (x *VsPbStorageGpsData) GetReceiveTime() uint32 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

func (x *VsPbStorageGpsData) GetAdminGuid() uint32 {
	if x != nil {
		return x.AdminGuid
	}
	return 0
}

func (x *VsPbStorageGpsData) GetAppStatusFlag() uint32 {
	if x != nil {
		return x.AppStatusFlag
	}
	return 0
}

func (x *VsPbStorageGpsData) GetStopDriveStartTime() uint32 {
	if x != nil {
		return x.StopDriveStartTime
	}
	return 0
}

func (x *VsPbStorageGpsData) GetCurDayMileage() uint32 {
	if x != nil {
		return x.CurDayMileage
	}
	return 0
}

func (x *VsPbStorageGpsData) GetDriveTimeLen() uint32 {
	if x != nil {
		return x.DriveTimeLen
	}
	return 0
}

func (x *VsPbStorageGpsData) GetCallStopInfo() *VsPbStorageCallStopBaseInfo {
	if x != nil {
		return x.CallStopInfo
	}
	return nil
}

func (x *VsPbStorageGpsData) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *VsPbStorageGpsData) GetStaffIDCard() string {
	if x != nil {
		return x.StaffIDCard
	}
	return ""
}

type VsFrontPbBatchGpsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultiGpsData []*VsPbStorageGpsData `protobuf:"bytes,1,rep,name=multiGpsData,proto3" json:"multiGpsData,omitempty"` //多个数据包
}

func (x *VsFrontPbBatchGpsData) Reset() {
	*x = VsFrontPbBatchGpsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbBatchGpsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbBatchGpsData) ProtoMessage() {}

func (x *VsFrontPbBatchGpsData) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbBatchGpsData.ProtoReflect.Descriptor instead.
func (*VsFrontPbBatchGpsData) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{14}
}

func (x *VsFrontPbBatchGpsData) GetMultiGpsData() []*VsPbStorageGpsData {
	if x != nil {
		return x.MultiGpsData
	}
	return nil
}

// 事件扩展信息
type VsPbStorageEventExternInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime        uint32                     `protobuf:"varint,1,opt,name=endTime,proto3" json:"endTime,omitempty"`                                           //结束时间
	EndLongitude   int32                      `protobuf:"varint,2,opt,name=endLongitude,proto3" json:"endLongitude,omitempty"`                                 //结束经度
	EndLatitude    int32                      `protobuf:"varint,3,opt,name=endLatitude,proto3" json:"endLatitude,omitempty"`                                   //结束纬度
	EndSpeed       uint32                     `protobuf:"varint,4,opt,name=endSpeed,proto3" json:"endSpeed,omitempty"`                                         //结束速度
	HandleTime     uint32                     `protobuf:"varint,5,opt,name=handleTime,proto3" json:"handleTime,omitempty"`                                     //处理时间
	HandleStatus   VS_APP_ALARM_HANDLE_STATUS `protobuf:"varint,6,opt,name=handleStatus,proto3,enum=VS_APP_ALARM_HANDLE_STATUS" json:"handleStatus,omitempty"` //处理状态 VS_APP_ALARM_HANDLE_STATUS
	HandleUserName string                     `protobuf:"bytes,7,opt,name=handleUserName,proto3" json:"handleUserName,omitempty"`                              //处理用户
	HandleNote     string                     `protobuf:"bytes,8,opt,name=handleNote,proto3" json:"handleNote,omitempty"`                                      //处理备注
	EndAlarmInfo   string                     `protobuf:"bytes,9,opt,name=endAlarmInfo,proto3" json:"endAlarmInfo,omitempty"`                                  //结束报警信息
	EndTimeMilli   uint32                     `protobuf:"varint,10,opt,name=endTimeMilli,proto3" json:"endTimeMilli,omitempty"`                                //结束时间毫秒
}

func (x *VsPbStorageEventExternInfo) Reset() {
	*x = VsPbStorageEventExternInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageEventExternInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageEventExternInfo) ProtoMessage() {}

func (x *VsPbStorageEventExternInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageEventExternInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageEventExternInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{15}
}

func (x *VsPbStorageEventExternInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VsPbStorageEventExternInfo) GetEndLongitude() int32 {
	if x != nil {
		return x.EndLongitude
	}
	return 0
}

func (x *VsPbStorageEventExternInfo) GetEndLatitude() int32 {
	if x != nil {
		return x.EndLatitude
	}
	return 0
}

func (x *VsPbStorageEventExternInfo) GetEndSpeed() uint32 {
	if x != nil {
		return x.EndSpeed
	}
	return 0
}

func (x *VsPbStorageEventExternInfo) GetHandleTime() uint32 {
	if x != nil {
		return x.HandleTime
	}
	return 0
}

func (x *VsPbStorageEventExternInfo) GetHandleStatus() VS_APP_ALARM_HANDLE_STATUS {
	if x != nil {
		return x.HandleStatus
	}
	return VS_APP_ALARM_HANDLE_STATUS_AHS_HANDING
}

func (x *VsPbStorageEventExternInfo) GetHandleUserName() string {
	if x != nil {
		return x.HandleUserName
	}
	return ""
}

func (x *VsPbStorageEventExternInfo) GetHandleNote() string {
	if x != nil {
		return x.HandleNote
	}
	return ""
}

func (x *VsPbStorageEventExternInfo) GetEndAlarmInfo() string {
	if x != nil {
		return x.EndAlarmInfo
	}
	return ""
}

func (x *VsPbStorageEventExternInfo) GetEndTimeMilli() uint32 {
	if x != nil {
		return x.EndTimeMilli
	}
	return 0
}

// 事件报警定义
type VsPbStorageEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleGuid   uint32                      `protobuf:"varint,1,opt,name=vehicleGuid,proto3" json:"vehicleGuid,omitempty"`                          //车辆GUID
	DevNo         string                      `protobuf:"bytes,2,opt,name=devNo,proto3" json:"devNo,omitempty"`                                       //终端号
	VehicleNo     string                      `protobuf:"bytes,3,opt,name=vehicleNo,proto3" json:"vehicleNo,omitempty"`                               //车牌号
	DevVersion    string                      `protobuf:"bytes,4,opt,name=devVersion,proto3" json:"devVersion,omitempty"`                             //终端版本号
	Time          uint32                      `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`                                        //报警开始时间
	AlarmType     VS_APP_ALARM_TYPE           `protobuf:"varint,6,opt,name=alarmType,proto3,enum=VS_APP_ALARM_TYPE" json:"alarmType,omitempty"`       //类型VS_APP_ALARM_TYPE
	AlarmSource   VS_APP_ALARM_SOURCE         `protobuf:"varint,7,opt,name=alarmSource,proto3,enum=VS_APP_ALARM_SOURCE" json:"alarmSource,omitempty"` //来源VS_APP_ALARM_SOURCE
	Longitude     int32                       `protobuf:"varint,8,opt,name=longitude,proto3" json:"longitude,omitempty"`                              //经度
	Latitude      int32                       `protobuf:"varint,9,opt,name=latitude,proto3" json:"latitude,omitempty"`                                //纬度
	Speed         uint32                      `protobuf:"varint,10,opt,name=speed,proto3" json:"speed,omitempty"`                                     //速度
	AlarmID       int64                       `protobuf:"varint,11,opt,name=alarmID,proto3" json:"alarmID,omitempty"`                                 //报警ID
	DriverGuid    uint32                      `protobuf:"varint,12,opt,name=driverGuid,proto3" json:"driverGuid,omitempty"`                           //司机id
	AdminGuid     uint32                      `protobuf:"varint,13,opt,name=adminGuid,proto3" json:"adminGuid,omitempty"`                             //管理员GUID
	AlarmInfo     string                      `protobuf:"bytes,14,opt,name=alarmInfo,proto3" json:"alarmInfo,omitempty"`                              //不同的报警类型,值不一样,具体查看每个类型定义
	AlarmLevel    uint32                      `protobuf:"varint,15,opt,name=alarmLevel,proto3" json:"alarmLevel,omitempty"`                           //报警级别 0:无;1:一级;2:二级
	ExternInfo    *VsPbStorageEventExternInfo `protobuf:"bytes,20,opt,name=externInfo,proto3" json:"externInfo,omitempty"`                            //扩展信息VsPbStorageEventExternInfo
	GpsTimeMilli  uint32                      `protobuf:"varint,21,opt,name=gpsTimeMilli,proto3" json:"gpsTimeMilli,omitempty"`                       //毫秒
	HasAttachment uint32                      `protobuf:"varint,22,opt,name=hasAttachment,proto3" json:"hasAttachment,omitempty"`                     //存在报警附件信息
}

func (x *VsPbStorageEventInfo) Reset() {
	*x = VsPbStorageEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageEventInfo) ProtoMessage() {}

func (x *VsPbStorageEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageEventInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageEventInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{16}
}

func (x *VsPbStorageEventInfo) GetVehicleGuid() uint32 {
	if x != nil {
		return x.VehicleGuid
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetDevNo() string {
	if x != nil {
		return x.DevNo
	}
	return ""
}

func (x *VsPbStorageEventInfo) GetVehicleNo() string {
	if x != nil {
		return x.VehicleNo
	}
	return ""
}

func (x *VsPbStorageEventInfo) GetDevVersion() string {
	if x != nil {
		return x.DevVersion
	}
	return ""
}

func (x *VsPbStorageEventInfo) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetAlarmType() VS_APP_ALARM_TYPE {
	if x != nil {
		return x.AlarmType
	}
	return VS_APP_ALARM_TYPE_ALARM_TYPE_NONE
}

func (x *VsPbStorageEventInfo) GetAlarmSource() VS_APP_ALARM_SOURCE {
	if x != nil {
		return x.AlarmSource
	}
	return VS_APP_ALARM_SOURCE_DEVICE
}

func (x *VsPbStorageEventInfo) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetAlarmID() int64 {
	if x != nil {
		return x.AlarmID
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetDriverGuid() uint32 {
	if x != nil {
		return x.DriverGuid
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetAdminGuid() uint32 {
	if x != nil {
		return x.AdminGuid
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetAlarmInfo() string {
	if x != nil {
		return x.AlarmInfo
	}
	return ""
}

func (x *VsPbStorageEventInfo) GetAlarmLevel() uint32 {
	if x != nil {
		return x.AlarmLevel
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetExternInfo() *VsPbStorageEventExternInfo {
	if x != nil {
		return x.ExternInfo
	}
	return nil
}

func (x *VsPbStorageEventInfo) GetGpsTimeMilli() uint32 {
	if x != nil {
		return x.GpsTimeMilli
	}
	return 0
}

func (x *VsPbStorageEventInfo) GetHasAttachment() uint32 {
	if x != nil {
		return x.HasAttachment
	}
	return 0
}

// 图片抓拍事件信息
type VsPbStorageMultiMediaEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaType   uint32                    `protobuf:"varint,1,opt,name=mediaType,proto3" json:"mediaType,omitempty"`                                //0：图像；1：音频；2：视频
	MediaFormat uint32                    `protobuf:"varint,2,opt,name=mediaFormat,proto3" json:"mediaFormat,omitempty"`                            //0：JPEG；1：TIF；2：MP3；3：WAV；4：WMV
	EventType   VS_MULTI_MEDIA_EVENT_TYPE `protobuf:"varint,3,opt,name=eventType,proto3,enum=VS_MULTI_MEDIA_EVENT_TYPE" json:"eventType,omitempty"` // 事件类型
	Channel     uint32                    `protobuf:"varint,4,opt,name=channel,proto3" json:"channel,omitempty"`                                    // 通道
	GpsData     *VsPbStorageGpsData       `protobuf:"bytes,5,opt,name=gpsData,proto3" json:"gpsData,omitempty"`
	DevMediaID  uint32                    `protobuf:"varint,6,opt,name=devMediaID,proto3" json:"devMediaID,omitempty"` //设备的媒体ID
	EventID     int64                     `protobuf:"varint,7,opt,name=eventID,proto3" json:"eventID,omitempty"`       //事件唯一ID ,目前devMediaUid+时间
}

func (x *VsPbStorageMultiMediaEventInfo) Reset() {
	*x = VsPbStorageMultiMediaEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageMultiMediaEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageMultiMediaEventInfo) ProtoMessage() {}

func (x *VsPbStorageMultiMediaEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageMultiMediaEventInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageMultiMediaEventInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{17}
}

func (x *VsPbStorageMultiMediaEventInfo) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsPbStorageMultiMediaEventInfo) GetMediaFormat() uint32 {
	if x != nil {
		return x.MediaFormat
	}
	return 0
}

func (x *VsPbStorageMultiMediaEventInfo) GetEventType() VS_MULTI_MEDIA_EVENT_TYPE {
	if x != nil {
		return x.EventType
	}
	return VS_MULTI_MEDIA_EVENT_TYPE_PLATFORM_CMD
}

func (x *VsPbStorageMultiMediaEventInfo) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *VsPbStorageMultiMediaEventInfo) GetGpsData() *VsPbStorageGpsData {
	if x != nil {
		return x.GpsData
	}
	return nil
}

func (x *VsPbStorageMultiMediaEventInfo) GetDevMediaID() uint32 {
	if x != nil {
		return x.DevMediaID
	}
	return 0
}

func (x *VsPbStorageMultiMediaEventInfo) GetEventID() int64 {
	if x != nil {
		return x.EventID
	}
	return 0
}

type VsPbStorageAlarmTypeNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmType VS_APP_ALARM_TYPE `protobuf:"varint,1,opt,name=alarmType,proto3,enum=VS_APP_ALARM_TYPE" json:"alarmType,omitempty"` //报警类型
	AlarmNum  uint32            `protobuf:"varint,2,opt,name=alarmNum,proto3" json:"alarmNum,omitempty"`
}

func (x *VsPbStorageAlarmTypeNum) Reset() {
	*x = VsPbStorageAlarmTypeNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageAlarmTypeNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageAlarmTypeNum) ProtoMessage() {}

func (x *VsPbStorageAlarmTypeNum) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageAlarmTypeNum.ProtoReflect.Descriptor instead.
func (*VsPbStorageAlarmTypeNum) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{18}
}

func (x *VsPbStorageAlarmTypeNum) GetAlarmType() VS_APP_ALARM_TYPE {
	if x != nil {
		return x.AlarmType
	}
	return VS_APP_ALARM_TYPE_ALARM_TYPE_NONE
}

func (x *VsPbStorageAlarmTypeNum) GetAlarmNum() uint32 {
	if x != nil {
		return x.AlarmNum
	}
	return 0
}

// 车辆日统计
type VsPbStorageVehicleDailyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminGuid           uint32                     `protobuf:"varint,1,opt,name=adminGuid,proto3" json:"adminGuid,omitempty"`                      //管理员GUID
	VehicleGuid         uint32                     `protobuf:"varint,2,opt,name=vehicleGuid,proto3" json:"vehicleGuid,omitempty"`                  //车辆GUID
	VehicleNo           string                     `protobuf:"bytes,3,opt,name=vehicleNo,proto3" json:"vehicleNo,omitempty"`                       //车牌号
	StartTime           uint32                     `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`                      //开始时间
	EndTime             uint32                     `protobuf:"varint,6,opt,name=endTime,proto3" json:"endTime,omitempty"`                          //结束时间
	StartLongitude      int32                      `protobuf:"varint,7,opt,name=startLongitude,proto3" json:"startLongitude,omitempty"`            //开始经度
	StartLatitude       int32                      `protobuf:"varint,8,opt,name=startLatitude,proto3" json:"startLatitude,omitempty"`              //开始纬度
	EndLongitude        int32                      `protobuf:"varint,9,opt,name=endLongitude,proto3" json:"endLongitude,omitempty"`                //结束经度
	EndLatitude         int32                      `protobuf:"varint,10,opt,name=endLatitude,proto3" json:"endLatitude,omitempty"`                 //结束纬度
	NeedUpdateStartInfo bool                       `protobuf:"varint,11,opt,name=needUpdateStartInfo,proto3" json:"needUpdateStartInfo,omitempty"` //是否需要更新开始信息,时间,经纬度,里程
	StartMileage        uint32                     `protobuf:"varint,12,opt,name=startMileage,proto3" json:"startMileage,omitempty"`               //开始里程,可配置使用平台或者设备里程,单位米
	EndMileage          uint32                     `protobuf:"varint,13,opt,name=endMileage,proto3" json:"endMileage,omitempty"`                   //结束里程,可配置使用平台或者设备里程,单位米
	AlarmFlag           uint32                     `protobuf:"varint,20,opt,name=alarmFlag,proto3" json:"alarmFlag,omitempty"`                     //报警标志位
	VideoAlarmFlag      uint32                     `protobuf:"varint,21,opt,name=videoAlarmFlag,proto3" json:"videoAlarmFlag,omitempty"`           //视频报警标志位
	VideoLost           uint32                     `protobuf:"varint,22,opt,name=videoLost,proto3" json:"videoLost,omitempty"`                     //视频丢失值
	StorageStatus       uint32                     `protobuf:"varint,23,opt,name=storageStatus,proto3" json:"storageStatus,omitempty"`             //存储介质值
	DriveTime           uint32                     `protobuf:"varint,24,opt,name=driveTime,proto3" json:"driveTime,omitempty"`                     //行车时长,S,有速度开始计算,速度为0超过5分钟,按最后的定位算
	MaxSpeed            uint32                     `protobuf:"varint,25,opt,name=maxSpeed,proto3" json:"maxSpeed,omitempty"`                       //最大速度 1/10 km/h
	LastDriveTime       uint32                     `protobuf:"varint,26,opt,name=lastDriveTime,proto3" json:"lastDriveTime,omitempty"`             //上次行车时间,有速度,就记录当前时间
	LastStopDriveTime   uint32                     `protobuf:"varint,27,opt,name=lastStopDriveTime,proto3" json:"lastStopDriveTime,omitempty"`     //上次停驶开始时间
	AlarmTypeNum        []*VsPbStorageAlarmTypeNum `protobuf:"bytes,28,rep,name=alarmTypeNum,proto3" json:"alarmTypeNum,omitempty"`                //报警类型数量统计
	OnlineNum           uint32                     `protobuf:"varint,29,opt,name=onlineNum,proto3" json:"onlineNum,omitempty"`                     //上线次数
	LastGpsData         *VsPbStorageGpsData        `protobuf:"bytes,30,opt,name=lastGpsData,proto3" json:"lastGpsData,omitempty"`                  //最后的定位数据
}

func (x *VsPbStorageVehicleDailyInfo) Reset() {
	*x = VsPbStorageVehicleDailyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageVehicleDailyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageVehicleDailyInfo) ProtoMessage() {}

func (x *VsPbStorageVehicleDailyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageVehicleDailyInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageVehicleDailyInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{19}
}

func (x *VsPbStorageVehicleDailyInfo) GetAdminGuid() uint32 {
	if x != nil {
		return x.AdminGuid
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetVehicleGuid() uint32 {
	if x != nil {
		return x.VehicleGuid
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetVehicleNo() string {
	if x != nil {
		return x.VehicleNo
	}
	return ""
}

func (x *VsPbStorageVehicleDailyInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetStartLongitude() int32 {
	if x != nil {
		return x.StartLongitude
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetStartLatitude() int32 {
	if x != nil {
		return x.StartLatitude
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetEndLongitude() int32 {
	if x != nil {
		return x.EndLongitude
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetEndLatitude() int32 {
	if x != nil {
		return x.EndLatitude
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetNeedUpdateStartInfo() bool {
	if x != nil {
		return x.NeedUpdateStartInfo
	}
	return false
}

func (x *VsPbStorageVehicleDailyInfo) GetStartMileage() uint32 {
	if x != nil {
		return x.StartMileage
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetEndMileage() uint32 {
	if x != nil {
		return x.EndMileage
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetAlarmFlag() uint32 {
	if x != nil {
		return x.AlarmFlag
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetVideoAlarmFlag() uint32 {
	if x != nil {
		return x.VideoAlarmFlag
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetVideoLost() uint32 {
	if x != nil {
		return x.VideoLost
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetStorageStatus() uint32 {
	if x != nil {
		return x.StorageStatus
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetDriveTime() uint32 {
	if x != nil {
		return x.DriveTime
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetMaxSpeed() uint32 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetLastDriveTime() uint32 {
	if x != nil {
		return x.LastDriveTime
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetLastStopDriveTime() uint32 {
	if x != nil {
		return x.LastStopDriveTime
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetAlarmTypeNum() []*VsPbStorageAlarmTypeNum {
	if x != nil {
		return x.AlarmTypeNum
	}
	return nil
}

func (x *VsPbStorageVehicleDailyInfo) GetOnlineNum() uint32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *VsPbStorageVehicleDailyInfo) GetLastGpsData() *VsPbStorageGpsData {
	if x != nil {
		return x.LastGpsData
	}
	return nil
}

// 车辆日统计
type VsPbStorageVehicleDailyInfoBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyInfo []*VsPbStorageVehicleDailyInfo `protobuf:"bytes,1,rep,name=dailyInfo,proto3" json:"dailyInfo,omitempty"` //多个车辆的日统计数据
}

func (x *VsPbStorageVehicleDailyInfoBatch) Reset() {
	*x = VsPbStorageVehicleDailyInfoBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageVehicleDailyInfoBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageVehicleDailyInfoBatch) ProtoMessage() {}

func (x *VsPbStorageVehicleDailyInfoBatch) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageVehicleDailyInfoBatch.ProtoReflect.Descriptor instead.
func (*VsPbStorageVehicleDailyInfoBatch) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{20}
}

func (x *VsPbStorageVehicleDailyInfoBatch) GetDailyInfo() []*VsPbStorageVehicleDailyInfo {
	if x != nil {
		return x.DailyInfo
	}
	return nil
}

// 报警的数据存储扩展字段
type VsPbStorageAlarmExternInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAttachment bool `protobuf:"varint,1,opt,name=hasAttachment,proto3" json:"hasAttachment,omitempty"` //存在附件
}

func (x *VsPbStorageAlarmExternInfo) Reset() {
	*x = VsPbStorageAlarmExternInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageAlarmExternInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageAlarmExternInfo) ProtoMessage() {}

func (x *VsPbStorageAlarmExternInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageAlarmExternInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageAlarmExternInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{21}
}

func (x *VsPbStorageAlarmExternInfo) GetHasAttachment() bool {
	if x != nil {
		return x.HasAttachment
	}
	return false
}

// 刷卡信息推送
type VsPbStorageSwipeCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdCard     string              `protobuf:"bytes,1,opt,name=idCard,proto3" json:"idCard,omitempty"`         //ID卡号,唯一标识
	MediaID    uint32              `protobuf:"varint,2,opt,name=mediaID,proto3" json:"mediaID,omitempty"`      //媒体ID,对应抓拍时的ID
	SwipeType  uint32              `protobuf:"varint,3,opt,name=swipeType,proto3" json:"swipeType,omitempty"`  //0:刷卡,1:签到,2:签出
	FileID     int64               `protobuf:"varint,4,opt,name=fileID,proto3" json:"fileID,omitempty"`        //图片的唯一ID ,媒体ID+time组成
	StaffType  uint32              `protobuf:"varint,5,opt,name=staffType,proto3" json:"staffType,omitempty"`  //人员类型, VsStaffType 0:司机,1:教师,2:学生
	TimeLen    uint32              `protobuf:"varint,6,opt,name=timeLen,proto3" json:"timeLen,omitempty"`      //时长(秒), 签出-签入的时间
	StaffName  string              `protobuf:"bytes,7,opt,name=staffName,proto3" json:"staffName,omitempty"`   //人员名称
	PqCertCode string              `protobuf:"bytes,8,opt,name=pqCertCode,proto3" json:"pqCertCode,omitempty"` //从业资格证
	Issuing    string              `protobuf:"bytes,9,opt,name=issuing,proto3" json:"issuing,omitempty"`       //发证机构名称
	ValidDate  uint32              `protobuf:"varint,10,opt,name=validDate,proto3" json:"validDate,omitempty"` //证件有效期
	GpsData    *VsPbStorageGpsData `protobuf:"bytes,20,opt,name=gpsData,proto3" json:"gpsData,omitempty"`      //定位信息
}

func (x *VsPbStorageSwipeCardInfo) Reset() {
	*x = VsPbStorageSwipeCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageSwipeCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageSwipeCardInfo) ProtoMessage() {}

func (x *VsPbStorageSwipeCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageSwipeCardInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageSwipeCardInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{22}
}

func (x *VsPbStorageSwipeCardInfo) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *VsPbStorageSwipeCardInfo) GetMediaID() uint32 {
	if x != nil {
		return x.MediaID
	}
	return 0
}

func (x *VsPbStorageSwipeCardInfo) GetSwipeType() uint32 {
	if x != nil {
		return x.SwipeType
	}
	return 0
}

func (x *VsPbStorageSwipeCardInfo) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *VsPbStorageSwipeCardInfo) GetStaffType() uint32 {
	if x != nil {
		return x.StaffType
	}
	return 0
}

func (x *VsPbStorageSwipeCardInfo) GetTimeLen() uint32 {
	if x != nil {
		return x.TimeLen
	}
	return 0
}

func (x *VsPbStorageSwipeCardInfo) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *VsPbStorageSwipeCardInfo) GetPqCertCode() string {
	if x != nil {
		return x.PqCertCode
	}
	return ""
}

func (x *VsPbStorageSwipeCardInfo) GetIssuing() string {
	if x != nil {
		return x.Issuing
	}
	return ""
}

func (x *VsPbStorageSwipeCardInfo) GetValidDate() uint32 {
	if x != nil {
		return x.ValidDate
	}
	return 0
}

func (x *VsPbStorageSwipeCardInfo) GetGpsData() *VsPbStorageGpsData {
	if x != nil {
		return x.GpsData
	}
	return nil
}

// 报站信息
type VsPbStorageCallStopsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType   uint32 `protobuf:"varint,1,opt,name=eventType,proto3" json:"eventType,omitempty"`    //报站类型,VsCallStopType 1:进出站;2:越站;3:进出场站
	EventTime   uint32 `protobuf:"varint,2,opt,name=eventTime,proto3" json:"eventTime,omitempty"`    //时间
	StationNo   uint32 `protobuf:"varint,3,opt,name=stationNo,proto3" json:"stationNo,omitempty"`    //站点编号 从1开始
	StationName string `protobuf:"bytes,4,opt,name=stationName,proto3" json:"stationName,omitempty"` //站点名称
	DirectType  uint32 `protobuf:"varint,5,opt,name=directType,proto3" json:"directType,omitempty"`  //线路方向 0:上行;1:下行;2:环线
	Status      uint32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`          //进出站状态 0:本站,1:下一站
	Speed       uint32 `protobuf:"varint,7,opt,name=speed,proto3" json:"speed,omitempty"`            //当前速度 1/10 km/h
	Direction   uint32 `protobuf:"varint,8,opt,name=direction,proto3" json:"direction,omitempty"`    //方向角 0-360
	SpeedLimit  uint32 `protobuf:"varint,9,opt,name=speedLimit,proto3" json:"speedLimit,omitempty"`  //当前限速  km/h
	Longitude   int32  `protobuf:"varint,10,opt,name=longitude,proto3" json:"longitude,omitempty"`   //经度
	Latitude    int32  `protobuf:"varint,11,opt,name=latitude,proto3" json:"latitude,omitempty"`     //纬度
	LineName    string `protobuf:"bytes,12,opt,name=lineName,proto3" json:"lineName,omitempty"`      //线路名称
	DeviceNo    string `protobuf:"bytes,13,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`      //终端号
	//realtime 服务填 入
	VehicleGuid uint32 `protobuf:"varint,30,opt,name=vehicleGuid,proto3" json:"vehicleGuid,omitempty"` //车辆ID
	AdminGuid   uint32 `protobuf:"varint,31,opt,name=adminGuid,proto3" json:"adminGuid,omitempty"`     //管理ID
	LineGuid    uint32 `protobuf:"varint,32,opt,name=lineGuid,proto3" json:"lineGuid,omitempty"`       //线路ID
	Mileage     uint32 `protobuf:"varint,33,opt,name=mileage,proto3" json:"mileage,omitempty"`         //当前里程, km 1/10
	//调度服务
	ScheduleID      uint32 `protobuf:"varint,50,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`           //调度ID
	TotalStationNum uint32 `protobuf:"varint,51,opt,name=totalStationNum,proto3" json:"totalStationNum,omitempty"` //总站点数量
}

func (x *VsPbStorageCallStopsInfo) Reset() {
	*x = VsPbStorageCallStopsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageCallStopsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageCallStopsInfo) ProtoMessage() {}

func (x *VsPbStorageCallStopsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageCallStopsInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageCallStopsInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{23}
}

func (x *VsPbStorageCallStopsInfo) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetEventTime() uint32 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetStationNo() uint32 {
	if x != nil {
		return x.StationNo
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

func (x *VsPbStorageCallStopsInfo) GetDirectType() uint32 {
	if x != nil {
		return x.DirectType
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetSpeedLimit() uint32 {
	if x != nil {
		return x.SpeedLimit
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetLineName() string {
	if x != nil {
		return x.LineName
	}
	return ""
}

func (x *VsPbStorageCallStopsInfo) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *VsPbStorageCallStopsInfo) GetVehicleGuid() uint32 {
	if x != nil {
		return x.VehicleGuid
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetAdminGuid() uint32 {
	if x != nil {
		return x.AdminGuid
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetLineGuid() uint32 {
	if x != nil {
		return x.LineGuid
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetMileage() uint32 {
	if x != nil {
		return x.Mileage
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetScheduleID() uint32 {
	if x != nil {
		return x.ScheduleID
	}
	return 0
}

func (x *VsPbStorageCallStopsInfo) GetTotalStationNum() uint32 {
	if x != nil {
		return x.TotalStationNum
	}
	return 0
}

// 调度结果信息
type VsPbStorageScheduleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//基础数据
	LineGuid          uint32 `protobuf:"varint,1,opt,name=lineGuid,proto3" json:"lineGuid,omitempty"`                  //线路ID
	LineName          string `protobuf:"bytes,2,opt,name=lineName,proto3" json:"lineName,omitempty"`                   //线路名称
	VehicleID         uint32 `protobuf:"varint,3,opt,name=vehicleID,proto3" json:"vehicleID,omitempty"`                //车辆ID
	VehicleNo         string `protobuf:"bytes,4,opt,name=vehicleNo,proto3" json:"vehicleNo,omitempty"`                 //车牌号
	DriverID          string `protobuf:"bytes,5,opt,name=driverID,proto3" json:"driverID,omitempty"`                   //驾驶员ID
	DriverName        string `protobuf:"bytes,6,opt,name=driverName,proto3" json:"driverName,omitempty"`               //驾驶员名称
	DeviceNo          string `protobuf:"bytes,7,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`                   //设备号
	ScheduleStaffName string `protobuf:"bytes,8,opt,name=scheduleStaffName,proto3" json:"scheduleStaffName,omitempty"` //调度员名称
	ScheduleID        uint32 `protobuf:"varint,9,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`              //调度唯一ID
	//基本信息
	DepartureNo    uint32 `protobuf:"varint,15,opt,name=departureNo,proto3" json:"departureNo,omitempty"`       //班次
	TimesNo        uint32 `protobuf:"varint,16,opt,name=timesNo,proto3" json:"timesNo,omitempty"`               //趟次
	DirectType     uint32 `protobuf:"varint,17,opt,name=directType,proto3" json:"directType,omitempty"`         //线路方向类型 0:上行;1:下行;2:环线
	PlanStartTime  uint32 `protobuf:"varint,18,opt,name=planStartTime,proto3" json:"planStartTime,omitempty"`   //计划开始时间
	PlanEndTime    uint32 `protobuf:"varint,19,opt,name=planEndTime,proto3" json:"planEndTime,omitempty"`       //计划结束时间
	PlanRunMileage uint32 `protobuf:"varint,20,opt,name=planRunMileage,proto3" json:"planRunMileage,omitempty"` //线路里程, 1/10 KM
	//调度数据
	RealStartTime            uint32                  `protobuf:"varint,50,opt,name=realStartTime,proto3" json:"realStartTime,omitempty"`                                                    //实际开始时间
	RealEndTime              uint32                  `protobuf:"varint,51,opt,name=realEndTime,proto3" json:"realEndTime,omitempty"`                                                        //实际到站时间
	RealEndStationNo         uint32                  `protobuf:"varint,52,opt,name=realEndStationNo,proto3" json:"realEndStationNo,omitempty"`                                              //实际到站编号
	RealEndStationName       string                  `protobuf:"bytes,53,opt,name=realEndStationName,proto3" json:"realEndStationName,omitempty"`                                           //实际到站名称
	StartMileage             uint32                  `protobuf:"varint,54,opt,name=startMileage,proto3" json:"startMileage,omitempty"`                                                      // 开始里程,km 1/10
	EndMileage               uint32                  `protobuf:"varint,55,opt,name=endMileage,proto3" json:"endMileage,omitempty"`                                                          // 结束里程,km 1/10
	ScheduleType             uint32                  `protobuf:"varint,56,opt,name=scheduleType,proto3" json:"scheduleType,omitempty"`                                                      // 调度类型,0:未开始,1:准备调度(提前5分钟),2:已发调度命令(接到终端回应),3:正在运行(离开第一个站点),4: 已回站（进入最后一个站点）,5:故障,等调度
	ScheduleResultReasonCode VS_SCHEDULE_RESULT_CODE `protobuf:"varint,57,opt,name=scheduleResultReasonCode,proto3,enum=VS_SCHEDULE_RESULT_CODE" json:"scheduleResultReasonCode,omitempty"` //故障时,填入原因 VS_SCHEDULE_RESULT_CODE
	UploadStationNum         uint32                  `protobuf:"varint,58,opt,name=uploadStationNum,proto3" json:"uploadStationNum,omitempty"`                                              //上报的站点数量
	TotalStationNum          uint32                  `protobuf:"varint,59,opt,name=totalStationNum,proto3" json:"totalStationNum,omitempty"`                                                //线路总站点数量
}

func (x *VsPbStorageScheduleInfo) Reset() {
	*x = VsPbStorageScheduleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsPbStorageScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsPbStorageScheduleInfo) ProtoMessage() {}

func (x *VsPbStorageScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsPbStorageScheduleInfo.ProtoReflect.Descriptor instead.
func (*VsPbStorageScheduleInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_data_proto_rawDescGZIP(), []int{24}
}

func (x *VsPbStorageScheduleInfo) GetLineGuid() uint32 {
	if x != nil {
		return x.LineGuid
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetLineName() string {
	if x != nil {
		return x.LineName
	}
	return ""
}

func (x *VsPbStorageScheduleInfo) GetVehicleID() uint32 {
	if x != nil {
		return x.VehicleID
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetVehicleNo() string {
	if x != nil {
		return x.VehicleNo
	}
	return ""
}

func (x *VsPbStorageScheduleInfo) GetDriverID() string {
	if x != nil {
		return x.DriverID
	}
	return ""
}

func (x *VsPbStorageScheduleInfo) GetDriverName() string {
	if x != nil {
		return x.DriverName
	}
	return ""
}

func (x *VsPbStorageScheduleInfo) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *VsPbStorageScheduleInfo) GetScheduleStaffName() string {
	if x != nil {
		return x.ScheduleStaffName
	}
	return ""
}

func (x *VsPbStorageScheduleInfo) GetScheduleID() uint32 {
	if x != nil {
		return x.ScheduleID
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetDepartureNo() uint32 {
	if x != nil {
		return x.DepartureNo
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetTimesNo() uint32 {
	if x != nil {
		return x.TimesNo
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetDirectType() uint32 {
	if x != nil {
		return x.DirectType
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetPlanStartTime() uint32 {
	if x != nil {
		return x.PlanStartTime
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetPlanEndTime() uint32 {
	if x != nil {
		return x.PlanEndTime
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetPlanRunMileage() uint32 {
	if x != nil {
		return x.PlanRunMileage
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetRealStartTime() uint32 {
	if x != nil {
		return x.RealStartTime
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetRealEndTime() uint32 {
	if x != nil {
		return x.RealEndTime
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetRealEndStationNo() uint32 {
	if x != nil {
		return x.RealEndStationNo
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetRealEndStationName() string {
	if x != nil {
		return x.RealEndStationName
	}
	return ""
}

func (x *VsPbStorageScheduleInfo) GetStartMileage() uint32 {
	if x != nil {
		return x.StartMileage
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetEndMileage() uint32 {
	if x != nil {
		return x.EndMileage
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetScheduleType() uint32 {
	if x != nil {
		return x.ScheduleType
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetScheduleResultReasonCode() VS_SCHEDULE_RESULT_CODE {
	if x != nil {
		return x.ScheduleResultReasonCode
	}
	return VS_SCHEDULE_RESULT_CODE_SRC_NONE
}

func (x *VsPbStorageScheduleInfo) GetUploadStationNum() uint32 {
	if x != nil {
		return x.UploadStationNum
	}
	return 0
}

func (x *VsPbStorageScheduleInfo) GetTotalStationNum() uint32 {
	if x != nil {
		return x.TotalStationNum
	}
	return 0
}

var File_iot_pb_front_data_proto protoreflect.FileDescriptor

var file_iot_pb_front_data_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x6f, 0x74, 0x5f, 0x70, 0x62, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x05, 0x0a, 0x16, 0x56, 0x73,
	0x50, 0x62, 0x4d, 0x73, 0x50, 0x61, 0x79, 0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x74, 0x43, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x61, 0x74, 0x43, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x62, 0x61, 0x74, 0x46, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x46, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x62, 0x61, 0x74, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x61, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x67, 0x6e, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x6e, 0x67, 0x71, 0x75, 0x47, 0x70, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x6e, 0x67, 0x71,
	0x75, 0x47, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x19, 0x56, 0x73, 0x50, 0x62, 0x4d,
	0x73, 0x50, 0x61, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x45, 0x43, 0x49, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x45, 0x43, 0x49, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x50, 0x43, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x61, 0x72, 0x65, 0x61, 0x50, 0x43, 0x49, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x46, 0x52, 0x45, 0x51, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x46, 0x52, 0x45, 0x51, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x61, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x61, 0x72, 0x65, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0xa3, 0x04, 0x0a, 0x19, 0x56, 0x73, 0x50, 0x62, 0x4d, 0x73, 0x50,
	0x61, 0x79, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x78, 0x41, 0x78, 0x69, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x78, 0x41, 0x78, 0x69, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x77, 0x68, 0x65,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x65, 0x6d, 0x65, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70,
	0x53, 0x72, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1d, 0x65, 0x6d, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x53, 0x72, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x44,
	0x0a, 0x1d, 0x65, 0x6d, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x53, 0x72, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x59, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x65, 0x6d, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x53, 0x72, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x59, 0x12, 0x44, 0x0a, 0x1d, 0x65, 0x6d, 0x65, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x53, 0x72, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x5a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x65, 0x6d, 0x65,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x53, 0x72, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5a, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x56,
	0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x53, 0x41, 0x44, 0x41, 0x53,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c,
	0x61, 0x67, 0x22, 0xb4, 0x01, 0x0a, 0x14, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x53, 0x44, 0x53, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xce, 0x01, 0x0a, 0x1a, 0x56, 0x73,
	0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x53, 0x54, 0x50, 0x4d, 0x53, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x72, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x69, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x15, 0x56,
	0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x53, 0x54, 0x50, 0x4d, 0x53,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x39,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x53, 0x54, 0x50, 0x4d, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x74, 0x0a, 0x14, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x53,
	0x42, 0x53, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x95, 0x01, 0x0a, 0x1b, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc2, 0x01,
	0x0a, 0x20, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x61,
	0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x78, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x79, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x78, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x79, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x7a, 0x41, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x62, 0x7a, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x22, 0xb1, 0x02, 0x0a, 0x1a, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x3b, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f,
	0x61, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x44, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6e, 0x6f, 0x74, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x17, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x53, 0x70, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x78,
	0x41, 0x63, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x78, 0x41, 0x63, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x41, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79,
	0x41, 0x63, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x41, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x7a, 0x41, 0x63, 0x63, 0x22, 0xbd, 0x04, 0x0a, 0x1d, 0x56, 0x73, 0x50, 0x62,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x44, 0x6f, 0x77,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x61, 0x64, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x61, 0x64, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x61,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f,
	0x61, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x9f, 0x0f, 0x0a, 0x12, 0x56, 0x73, 0x50, 0x62,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x65, 0x76, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x64, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x53, 0x41, 0x44, 0x41, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x64,
	0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x73, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x53, 0x44, 0x53, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x64, 0x73, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x70, 0x6d, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x73, 0x50, 0x62,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x53, 0x54, 0x50, 0x4d, 0x53, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x74, 0x70, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x62,
	0x73, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56,
	0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x53, 0x42, 0x53, 0x44, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x73, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x67, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x53, 0x65, 0x63,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x53, 0x65, 0x63,
	0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x73, 0x70, 0x61, 0x79, 0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x4d,
	0x73, 0x50, 0x61, 0x79, 0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x6d, 0x73, 0x70, 0x61, 0x79, 0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x73, 0x70, 0x61, 0x79, 0x41, 0x72, 0x65, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56, 0x73, 0x50, 0x62,
	0x4d, 0x73, 0x50, 0x61, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x6d, 0x73, 0x70, 0x61, 0x79, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x6d, 0x73, 0x70, 0x61, 0x79, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x4d, 0x73, 0x50, 0x61, 0x79,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x15, 0x6d, 0x73, 0x70, 0x61, 0x79, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x73, 0x70, 0x61, 0x79,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x73, 0x70, 0x61, 0x79, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x45, 0x0a, 0x0f, 0x72, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x72, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x12, 0x72, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x72, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x53, 0x70, 0x65, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x61, 0x63, 0x63, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0b,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x69, 0x6c, 0x65, 0x61,
	0x67, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0xcb, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x21,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xcc, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x18, 0xcd,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x70, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xcf, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x70, 0x44, 0x72, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x44,
	0x61, 0x79, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x44, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x18,
	0xd1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x56, 0x73,
	0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x6f,
	0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49,
	0x44, 0x43, 0x61, 0x72, 0x64, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x49, 0x44, 0x43, 0x61, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x15, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x70, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x70, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x47, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x89, 0x03, 0x0a, 0x1a,
	0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x4c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x56,
	0x53, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x22, 0xf7, 0x04, 0x0a, 0x14, 0x56, 0x73, 0x50, 0x62,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x56, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0b,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x56, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x52, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x44, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x70, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67,
	0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x68,
	0x61, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x9d, 0x02, 0x0a, 0x1e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x56, 0x53, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x07, 0x67, 0x70, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x73, 0x50, 0x62,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x67, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x67, 0x0a, 0x17, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x09,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x56, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x22, 0xe8, 0x06, 0x0a, 0x1b, 0x56,
	0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e,
	0x64, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x75, 0x6d, 0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x35,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x47, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x70,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x20, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x56,
	0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x42, 0x0a, 0x1a, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x18, 0x56, 0x73,
	0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x77, 0x69, 0x70, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x77, 0x69,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x71, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x71, 0x43, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x67, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x70, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x67, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x04, 0x0a, 0x18,
	0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x6f, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x75, 0x69,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x22, 0xb7, 0x07, 0x0a, 0x17, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x4e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x6e, 0x52, 0x75, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x75, 0x6e, 0x4d, 0x69, 0x6c,
	0x65, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x6c,
	0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x54, 0x0a, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x18, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x2a, 0xfe, 0x01, 0x0a,
	0x19, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f, 0x47, 0x50, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f,
	0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f,
	0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4d, 0x49, 0x4c, 0x45, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x4c, 0x54, 0x49, 0x54, 0x55, 0x44, 0x45, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x09, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x49, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04,
	0x41, 0x44, 0x41, 0x53, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x4d, 0x10, 0x0c, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x50, 0x4d, 0x53, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x44,
	0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x53, 0x50, 0x41, 0x59, 0x10, 0x0f, 0x2a, 0xd7, 0x02,
	0x0a, 0x1a, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f, 0x47, 0x50, 0x53, 0x5f, 0x4d, 0x53, 0x50, 0x41,
	0x59, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x56, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x41, 0x4e, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x41, 0x4e, 0x54, 0x45, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x13, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x52, 0x45, 0x41, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x55,
	0x52, 0x42, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x17, 0x2a, 0xb7, 0x05, 0x0a, 0x14, 0x56, 0x53, 0x5f, 0x50,
	0x42, 0x5f, 0x4d, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x46, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43,
	0x59, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x46, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x46, 0x5f, 0x54,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x46, 0x5f, 0x44, 0x41,
	0x4e, 0x47, 0x45, 0x52, 0x4f, 0x55, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x46,
	0x5f, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x46, 0x5f, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x41,
	0x4e, 0x54, 0x5f, 0x43, 0x55, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x46, 0x5f,
	0x47, 0x4e, 0x53, 0x53, 0x5f, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x06,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x46, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x46, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x46, 0x5f, 0x4c,
	0x43, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x46, 0x5f,
	0x54, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x46,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0b, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x41, 0x46, 0x5f, 0x49, 0x43, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x46, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x41, 0x46, 0x5f, 0x54, 0x49, 0x52, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x46, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f,
	0x44, 0x52, 0x49, 0x56, 0x45, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x46, 0x5f, 0x54,
	0x49, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x10, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x41, 0x46, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x42, 0x4c, 0x49, 0x4e,
	0x44, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x46, 0x5f,
	0x43, 0x55, 0x52, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x46, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x13, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x46, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x14, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x41, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x41, 0x46, 0x5f, 0x52, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x46,
	0x5f, 0x56, 0x53, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41,
	0x46, 0x5f, 0x4f, 0x49, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x41, 0x46, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4c, 0x45,
	0x4e, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x46, 0x5f, 0x49, 0x4c, 0x4c, 0x45, 0x47,
	0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x46,
	0x5f, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x1c, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x46, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x1d, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x41, 0x46, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x57, 0x41,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x46, 0x5f, 0x49, 0x4c,
	0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x10,
	0x1f, 0x2a, 0x55, 0x0a, 0x1a, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x4f, 0x54, 0x5f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x12,
	0x12, 0x0a, 0x0e, 0x56, 0x41, 0x46, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4c, 0x4f, 0x53,
	0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x41, 0x46, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x41, 0x46, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x15, 0x56, 0x53, 0x5f, 0x50,
	0x42, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x4c, 0x41,
	0x47, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x46, 0x5f, 0x49, 0x53, 0x5f, 0x42, 0x4c, 0x49, 0x4e,
	0x44, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x00, 0x2a, 0x8b, 0x07, 0x0a, 0x11, 0x56, 0x53, 0x5f,
	0x41, 0x50, 0x50, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x53, 0x4d, 0x5f, 0x54, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x53, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x53, 0x4d, 0x5f, 0x53, 0x4d, 0x4f, 0x4b, 0x45, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x53, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x53, 0x4d, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x53, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x53, 0x4d, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x44, 0x41, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x14, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x44, 0x41, 0x53, 0x5f, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x44, 0x45, 0x50,
	0x41, 0x52, 0x54, 0x55, 0x52, 0x45, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x41, 0x53,
	0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x16, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x44, 0x41, 0x53, 0x5f, 0x50, 0x45, 0x44, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x41, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x41,
	0x44, 0x41, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x4e,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44,
	0x41, 0x53, 0x5f, 0x52, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x44, 0x41, 0x53, 0x5f, 0x42, 0x41, 0x52,
	0x52, 0x49, 0x45, 0x52, 0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x41, 0x53, 0x5f, 0x52,
	0x4f, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44,
	0x41, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x53, 0x44, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x23, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x53, 0x44, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x53, 0x44, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x25, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x50, 0x4d, 0x53,
	0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x32, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x33, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x34, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x35, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x36,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x37, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x38, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x54, 0x53, 0x10, 0x39, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x43, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x3a, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x53, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x3b, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x49, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x3c, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x10,
	0x3d, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x56,
	0x45, 0x10, 0x3e, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x3f, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41,
	0x4e, 0x47, 0x45, 0x52, 0x4f, 0x55, 0x53, 0x10, 0x40, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x41, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x45, 0x48, 0x49,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4c, 0x45, 0x4e, 0x10, 0x42, 0x12, 0x0d, 0x0a, 0x09,
	0x48, 0x49, 0x47, 0x48, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x43, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x44, 0x12,
	0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x46, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x47, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4d, 0x41, 0x53, 0x4b,
	0x10, 0x48, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x64, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x4f, 0x41, 0x44, 0x5f,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x10, 0xc8, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x4f,
	0x41, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10,
	0xc9, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x4e, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c,
	0x41, 0x52, 0x4d, 0x10, 0xca, 0x01, 0x2a, 0x2f, 0x0a, 0x13, 0x56, 0x53, 0x5f, 0x41, 0x50, 0x50,
	0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x2a, 0x81, 0x01, 0x0a, 0x1a, 0x56, 0x53, 0x5f, 0x41,
	0x50, 0x50, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x48, 0x53, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x48, 0x53, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x48, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x48, 0x53, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x48,
	0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x48, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xfe, 0x01, 0x2a, 0x63, 0x0a, 0x19, 0x56,
	0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49,
	0x4d, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4f, 0x42, 0x42, 0x45, 0x52, 0x59,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x4c, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x46,
	0x2a, 0x61, 0x0a, 0x0e, 0x56, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x53, 0x54, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x53, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x2a, 0x87, 0x01, 0x0a, 0x17, 0x56, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x52, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x52, 0x43, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x52, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x52, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x03, 0x42, 0x22, 0x5a,
	0x20, 0x2f, 0x30, 0x30, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x70, 0x75, 0x62,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3b, 0x70, 0x75, 0x62, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iot_pb_front_data_proto_rawDescOnce sync.Once
	file_iot_pb_front_data_proto_rawDescData = file_iot_pb_front_data_proto_rawDesc
)

func file_iot_pb_front_data_proto_rawDescGZIP() []byte {
	file_iot_pb_front_data_proto_rawDescOnce.Do(func() {
		file_iot_pb_front_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_iot_pb_front_data_proto_rawDescData)
	})
	return file_iot_pb_front_data_proto_rawDescData
}

var file_iot_pb_front_data_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_iot_pb_front_data_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_iot_pb_front_data_proto_goTypes = []interface{}{
	(VS_PB_GPS_DATA_VALID_FLAG)(0),           // 0: VS_PB_GPS_DATA_VALID_FLAG
	(VS_PB_GPS_MSPAY_ALARM_FLAG)(0),          // 1: VS_PB_GPS_MSPAY_ALARM_FLAG
	(VS_PB_MOT_ALARM_FLAG)(0),                // 2: VS_PB_MOT_ALARM_FLAG
	(VS_PB_MOT_VIDEO_ALARM_FLAG)(0),          // 3: VS_PB_MOT_VIDEO_ALARM_FLAG
	(VS_PB_APP_STATUS_FLAG)(0),               // 4: VS_PB_APP_STATUS_FLAG
	(VS_APP_ALARM_TYPE)(0),                   // 5: VS_APP_ALARM_TYPE
	(VS_APP_ALARM_SOURCE)(0),                 // 6: VS_APP_ALARM_SOURCE
	(VS_APP_ALARM_HANDLE_STATUS)(0),          // 7: VS_APP_ALARM_HANDLE_STATUS
	(VS_MULTI_MEDIA_EVENT_TYPE)(0),           // 8: VS_MULTI_MEDIA_EVENT_TYPE
	(VsCallStopType)(0),                      // 9: VsCallStopType
	(VS_SCHEDULE_RESULT_CODE)(0),             // 10: VS_SCHEDULE_RESULT_CODE
	(*VsPbMsPayDevStatusData)(nil),           // 11: VsPbMsPayDevStatusData
	(*VsPbMsPayRealAreaInfoItem)(nil),        // 12: VsPbMsPayRealAreaInfoItem
	(*VsPbMsPayVehicleEventInfo)(nil),        // 13: VsPbMsPayVehicleEventInfo
	(*VsPbStorageASADASInfo)(nil),            // 14: VsPbStorageASADASInfo
	(*VsPbStorageASDSMInfo)(nil),             // 15: VsPbStorageASDSMInfo
	(*VsPbStorageASTPMSEventList)(nil),       // 16: VsPbStorageASTPMSEventList
	(*VsPbStorageASTPMSInfo)(nil),            // 17: VsPbStorageASTPMSInfo
	(*VsPbStorageASBSDInfo)(nil),             // 18: VsPbStorageASBSDInfo
	(*VsPbStorageCallStopBaseInfo)(nil),      // 19: VsPbStorageCallStopBaseInfo
	(*VsPbStorageRoadAnalyzeObjectInfo)(nil), // 20: VsPbStorageRoadAnalyzeObjectInfo
	(*VsPbStorageRoadAnalyzeInfo)(nil),       // 21: VsPbStorageRoadAnalyzeInfo
	(*VsPbStorageAccSpeedInfo)(nil),          // 22: VsPbStorageAccSpeedInfo
	(*VsPbStorageRoadInfoCollection)(nil),    // 23: VsPbStorageRoadInfoCollection
	(*VsPbStorageGpsData)(nil),               // 24: VsPbStorageGpsData
	(*VsFrontPbBatchGpsData)(nil),            // 25: VsFrontPbBatchGpsData
	(*VsPbStorageEventExternInfo)(nil),       // 26: VsPbStorageEventExternInfo
	(*VsPbStorageEventInfo)(nil),             // 27: VsPbStorageEventInfo
	(*VsPbStorageMultiMediaEventInfo)(nil),   // 28: VsPbStorageMultiMediaEventInfo
	(*VsPbStorageAlarmTypeNum)(nil),          // 29: VsPbStorageAlarmTypeNum
	(*VsPbStorageVehicleDailyInfo)(nil),      // 30: VsPbStorageVehicleDailyInfo
	(*VsPbStorageVehicleDailyInfoBatch)(nil), // 31: VsPbStorageVehicleDailyInfoBatch
	(*VsPbStorageAlarmExternInfo)(nil),       // 32: VsPbStorageAlarmExternInfo
	(*VsPbStorageSwipeCardInfo)(nil),         // 33: VsPbStorageSwipeCardInfo
	(*VsPbStorageCallStopsInfo)(nil),         // 34: VsPbStorageCallStopsInfo
	(*VsPbStorageScheduleInfo)(nil),          // 35: VsPbStorageScheduleInfo
}
var file_iot_pb_front_data_proto_depIdxs = []int32{
	16, // 0: VsPbStorageASTPMSInfo.eventList:type_name -> VsPbStorageASTPMSEventList
	20, // 1: VsPbStorageRoadAnalyzeInfo.objects:type_name -> VsPbStorageRoadAnalyzeObjectInfo
	14, // 2: VsPbStorageGpsData.adasInfo:type_name -> VsPbStorageASADASInfo
	15, // 3: VsPbStorageGpsData.dsmInfo:type_name -> VsPbStorageASDSMInfo
	17, // 4: VsPbStorageGpsData.tpmsInfo:type_name -> VsPbStorageASTPMSInfo
	18, // 5: VsPbStorageGpsData.bsdInfo:type_name -> VsPbStorageASBSDInfo
	11, // 6: VsPbStorageGpsData.mspayDevStatus:type_name -> VsPbMsPayDevStatusData
	12, // 7: VsPbStorageGpsData.mspayAreaItems:type_name -> VsPbMsPayRealAreaInfoItem
	13, // 8: VsPbStorageGpsData.mspayVehicleEventInfo:type_name -> VsPbMsPayVehicleEventInfo
	21, // 9: VsPbStorageGpsData.roadAnalyzeInfo:type_name -> VsPbStorageRoadAnalyzeInfo
	23, // 10: VsPbStorageGpsData.roadInfoCollection:type_name -> VsPbStorageRoadInfoCollection
	22, // 11: VsPbStorageGpsData.accSpeed:type_name -> VsPbStorageAccSpeedInfo
	19, // 12: VsPbStorageGpsData.callStopInfo:type_name -> VsPbStorageCallStopBaseInfo
	24, // 13: VsFrontPbBatchGpsData.multiGpsData:type_name -> VsPbStorageGpsData
	7,  // 14: VsPbStorageEventExternInfo.handleStatus:type_name -> VS_APP_ALARM_HANDLE_STATUS
	5,  // 15: VsPbStorageEventInfo.alarmType:type_name -> VS_APP_ALARM_TYPE
	6,  // 16: VsPbStorageEventInfo.alarmSource:type_name -> VS_APP_ALARM_SOURCE
	26, // 17: VsPbStorageEventInfo.externInfo:type_name -> VsPbStorageEventExternInfo
	8,  // 18: VsPbStorageMultiMediaEventInfo.eventType:type_name -> VS_MULTI_MEDIA_EVENT_TYPE
	24, // 19: VsPbStorageMultiMediaEventInfo.gpsData:type_name -> VsPbStorageGpsData
	5,  // 20: VsPbStorageAlarmTypeNum.alarmType:type_name -> VS_APP_ALARM_TYPE
	29, // 21: VsPbStorageVehicleDailyInfo.alarmTypeNum:type_name -> VsPbStorageAlarmTypeNum
	24, // 22: VsPbStorageVehicleDailyInfo.lastGpsData:type_name -> VsPbStorageGpsData
	30, // 23: VsPbStorageVehicleDailyInfoBatch.dailyInfo:type_name -> VsPbStorageVehicleDailyInfo
	24, // 24: VsPbStorageSwipeCardInfo.gpsData:type_name -> VsPbStorageGpsData
	10, // 25: VsPbStorageScheduleInfo.scheduleResultReasonCode:type_name -> VS_SCHEDULE_RESULT_CODE
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_iot_pb_front_data_proto_init() }
func file_iot_pb_front_data_proto_init() {
	if File_iot_pb_front_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_iot_pb_front_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbMsPayDevStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbMsPayRealAreaInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbMsPayVehicleEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageASADASInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageASDSMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageASTPMSEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageASTPMSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageASBSDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageCallStopBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageRoadAnalyzeObjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageRoadAnalyzeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageAccSpeedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageRoadInfoCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageGpsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbBatchGpsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageEventExternInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageMultiMediaEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageAlarmTypeNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageVehicleDailyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageVehicleDailyInfoBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageAlarmExternInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageSwipeCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageCallStopsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsPbStorageScheduleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iot_pb_front_data_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_iot_pb_front_data_proto_goTypes,
		DependencyIndexes: file_iot_pb_front_data_proto_depIdxs,
		EnumInfos:         file_iot_pb_front_data_proto_enumTypes,
		MessageInfos:      file_iot_pb_front_data_proto_msgTypes,
	}.Build()
	File_iot_pb_front_data_proto = out.File
	file_iot_pb_front_data_proto_rawDesc = nil
	file_iot_pb_front_data_proto_goTypes = nil
	file_iot_pb_front_data_proto_depIdxs = nil
}
