// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: iot_pb_front_msg.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VS_DEV_UPGRADE_STATUS int32

const (
	VS_DEV_UPGRADE_STATUS_US_NONE         VS_DEV_UPGRADE_STATUS = 0 //无需升级
	VS_DEV_UPGRADE_STATUS_US_WAIT_SEND    VS_DEV_UPGRADE_STATUS = 1 //待下发
	VS_DEV_UPGRADE_STATUS_US_SEND_SUCCESS VS_DEV_UPGRADE_STATUS = 2 //下发成功
	VS_DEV_UPGRADE_STATUS_US_SEND_FAIL    VS_DEV_UPGRADE_STATUS = 3 //下发失败
	VS_DEV_UPGRADE_STATUS_US_FINISH       VS_DEV_UPGRADE_STATUS = 4 //升级完成
)

// Enum value maps for VS_DEV_UPGRADE_STATUS.
var (
	VS_DEV_UPGRADE_STATUS_name = map[int32]string{
		0: "US_NONE",
		1: "US_WAIT_SEND",
		2: "US_SEND_SUCCESS",
		3: "US_SEND_FAIL",
		4: "US_FINISH",
	}
	VS_DEV_UPGRADE_STATUS_value = map[string]int32{
		"US_NONE":         0,
		"US_WAIT_SEND":    1,
		"US_SEND_SUCCESS": 2,
		"US_SEND_FAIL":    3,
		"US_FINISH":       4,
	}
)

func (x VS_DEV_UPGRADE_STATUS) Enum() *VS_DEV_UPGRADE_STATUS {
	p := new(VS_DEV_UPGRADE_STATUS)
	*p = x
	return p
}

func (x VS_DEV_UPGRADE_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_DEV_UPGRADE_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_msg_proto_enumTypes[0].Descriptor()
}

func (VS_DEV_UPGRADE_STATUS) Type() protoreflect.EnumType {
	return &file_iot_pb_front_msg_proto_enumTypes[0]
}

func (x VS_DEV_UPGRADE_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_DEV_UPGRADE_STATUS.Descriptor instead.
func (VS_DEV_UPGRADE_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{0}
}

// 发送透传消息
type IotFrontPbMotTransMsgType int32

const (
	IotFrontPbMotTransMsgType_IOTFrontTransMsgTypeID_GNSSDetailData IotFrontPbMotTransMsgType = 0 // 0x00,GNSS 模块详细定位数据
	// 0x0B, 道路运输证IC卡信息
	IotFrontPbMotTransMsgType_IOTFrontTransMsgTypeID_UART1 IotFrontPbMotTransMsgType = 65 // 0x41, 串口1 透传
	IotFrontPbMotTransMsgType_IOTFrontTransMsgTypeID_UART2 IotFrontPbMotTransMsgType = 66 // 0x42, 串口2 透传
	// 0x75, VS占用的透传消息
	IotFrontPbMotTransMsgType_IOTFrontTransMsgTypeID_UPGRADE IotFrontPbMotTransMsgType = 117
	IotFrontPbMotTransMsgType_IOTFrontTransMsgTypeID_SELF    IotFrontPbMotTransMsgType = 118 //私有协议
	//苏标扩展: 查询外设状态
	IotFrontPbMotTransMsgType_IOTFrontTransMsgTypeID_JS_DEVSTATUS_REQ IotFrontPbMotTransMsgType = 247
	//苏标扩展: 查询外设信息
	IotFrontPbMotTransMsgType_IOTFrontTransMsgTypeID_JS_DEVINFO_REQ IotFrontPbMotTransMsgType = 248
)

// Enum value maps for IotFrontPbMotTransMsgType.
var (
	IotFrontPbMotTransMsgType_name = map[int32]string{
		0:   "IOTFrontTransMsgTypeID_GNSSDetailData",
		65:  "IOTFrontTransMsgTypeID_UART1",
		66:  "IOTFrontTransMsgTypeID_UART2",
		117: "IOTFrontTransMsgTypeID_UPGRADE",
		118: "IOTFrontTransMsgTypeID_SELF",
		247: "IOTFrontTransMsgTypeID_JS_DEVSTATUS_REQ",
		248: "IOTFrontTransMsgTypeID_JS_DEVINFO_REQ",
	}
	IotFrontPbMotTransMsgType_value = map[string]int32{
		"IOTFrontTransMsgTypeID_GNSSDetailData":   0,
		"IOTFrontTransMsgTypeID_UART1":            65,
		"IOTFrontTransMsgTypeID_UART2":            66,
		"IOTFrontTransMsgTypeID_UPGRADE":          117,
		"IOTFrontTransMsgTypeID_SELF":             118,
		"IOTFrontTransMsgTypeID_JS_DEVSTATUS_REQ": 247,
		"IOTFrontTransMsgTypeID_JS_DEVINFO_REQ":   248,
	}
)

func (x IotFrontPbMotTransMsgType) Enum() *IotFrontPbMotTransMsgType {
	p := new(IotFrontPbMotTransMsgType)
	*p = x
	return p
}

func (x IotFrontPbMotTransMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IotFrontPbMotTransMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_msg_proto_enumTypes[1].Descriptor()
}

func (IotFrontPbMotTransMsgType) Type() protoreflect.EnumType {
	return &file_iot_pb_front_msg_proto_enumTypes[1]
}

func (x IotFrontPbMotTransMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IotFrontPbMotTransMsgType.Descriptor instead.
func (IotFrontPbMotTransMsgType) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{1}
}

type IOT_DEV_TYPE int32

const (
	IOT_DEV_TYPE_DT_NONE    IOT_DEV_TYPE = 0 //未知
	IOT_DEV_TYPE_DT_XL      IOT_DEV_TYPE = 1 //溪联
	IOT_DEV_TYPE_DT_OTHER   IOT_DEV_TYPE = 2 //其它
	IOT_DEV_TYPE_DT_XL_MQTT IOT_DEV_TYPE = 3 //溪联MQTT
)

// Enum value maps for IOT_DEV_TYPE.
var (
	IOT_DEV_TYPE_name = map[int32]string{
		0: "DT_NONE",
		1: "DT_XL",
		2: "DT_OTHER",
		3: "DT_XL_MQTT",
	}
	IOT_DEV_TYPE_value = map[string]int32{
		"DT_NONE":    0,
		"DT_XL":      1,
		"DT_OTHER":   2,
		"DT_XL_MQTT": 3,
	}
)

func (x IOT_DEV_TYPE) Enum() *IOT_DEV_TYPE {
	p := new(IOT_DEV_TYPE)
	*p = x
	return p
}

func (x IOT_DEV_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IOT_DEV_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_msg_proto_enumTypes[2].Descriptor()
}

func (IOT_DEV_TYPE) Type() protoreflect.EnumType {
	return &file_iot_pb_front_msg_proto_enumTypes[2]
}

func (x IOT_DEV_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IOT_DEV_TYPE.Descriptor instead.
func (IOT_DEV_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{2}
}

type VS_FRONT_TEXT_FLAG_BIT int32

const (
	VS_FRONT_TEXT_FLAG_BIT_TF_NONE     VS_FRONT_TEXT_FLAG_BIT = 0
	VS_FRONT_TEXT_FLAG_BIT_TF_EMERGENT VS_FRONT_TEXT_FLAG_BIT = 2 //紧急
	VS_FRONT_TEXT_FLAG_BIT_TF_TTS      VS_FRONT_TEXT_FLAG_BIT = 3 //TTS
	VS_FRONT_TEXT_FLAG_BIT_TF_ADV      VS_FRONT_TEXT_FLAG_BIT = 4 //广告屏显示
)

// Enum value maps for VS_FRONT_TEXT_FLAG_BIT.
var (
	VS_FRONT_TEXT_FLAG_BIT_name = map[int32]string{
		0: "TF_NONE",
		2: "TF_EMERGENT",
		3: "TF_TTS",
		4: "TF_ADV",
	}
	VS_FRONT_TEXT_FLAG_BIT_value = map[string]int32{
		"TF_NONE":     0,
		"TF_EMERGENT": 2,
		"TF_TTS":      3,
		"TF_ADV":      4,
	}
)

func (x VS_FRONT_TEXT_FLAG_BIT) Enum() *VS_FRONT_TEXT_FLAG_BIT {
	p := new(VS_FRONT_TEXT_FLAG_BIT)
	*p = x
	return p
}

func (x VS_FRONT_TEXT_FLAG_BIT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_FRONT_TEXT_FLAG_BIT) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_msg_proto_enumTypes[3].Descriptor()
}

func (VS_FRONT_TEXT_FLAG_BIT) Type() protoreflect.EnumType {
	return &file_iot_pb_front_msg_proto_enumTypes[3]
}

func (x VS_FRONT_TEXT_FLAG_BIT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_FRONT_TEXT_FLAG_BIT.Descriptor instead.
func (VS_FRONT_TEXT_FLAG_BIT) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{3}
}

type VsFrontPbDevCmdType int32

const (
	VsFrontPbDevCmdType_VS_PB_DEVCTL_CMD_START                 VsFrontPbDevCmdType = 0
	VsFrontPbDevCmdType_VS_PB_DEVCTL_CMD_WIRELESS_UPGRADE      VsFrontPbDevCmdType = 1 //无线升级
	VsFrontPbDevCmdType_VS_PB_DEVCTL_CMD_CONNECT_APPOINTSERVER VsFrontPbDevCmdType = 2 //连接指定服务器
	VsFrontPbDevCmdType_VS_PB_DEVCTL_CMD_DEV_SHUTDOWN          VsFrontPbDevCmdType = 3 //终端关机, 无参数
	VsFrontPbDevCmdType_VS_PB_DEVCTL_CMD_DEV_RESET             VsFrontPbDevCmdType = 4 //终端复位, 无参数
	VsFrontPbDevCmdType_VS_PB_DEVCTL_CMD_DEV_RESTORE           VsFrontPbDevCmdType = 5 //终端回复出厂设置, 无参数
	VsFrontPbDevCmdType_VS_PB_DEVCTL_CMD_CLOSE_SOCKET          VsFrontPbDevCmdType = 6 //关闭数据通信, 无参数
	VsFrontPbDevCmdType_VS_PB_DEVCTL_CMD_CLOSE_ALLWIRELESS     VsFrontPbDevCmdType = 7 //关闭所有无线通信, 无参数
)

// Enum value maps for VsFrontPbDevCmdType.
var (
	VsFrontPbDevCmdType_name = map[int32]string{
		0: "VS_PB_DEVCTL_CMD_START",
		1: "VS_PB_DEVCTL_CMD_WIRELESS_UPGRADE",
		2: "VS_PB_DEVCTL_CMD_CONNECT_APPOINTSERVER",
		3: "VS_PB_DEVCTL_CMD_DEV_SHUTDOWN",
		4: "VS_PB_DEVCTL_CMD_DEV_RESET",
		5: "VS_PB_DEVCTL_CMD_DEV_RESTORE",
		6: "VS_PB_DEVCTL_CMD_CLOSE_SOCKET",
		7: "VS_PB_DEVCTL_CMD_CLOSE_ALLWIRELESS",
	}
	VsFrontPbDevCmdType_value = map[string]int32{
		"VS_PB_DEVCTL_CMD_START":                 0,
		"VS_PB_DEVCTL_CMD_WIRELESS_UPGRADE":      1,
		"VS_PB_DEVCTL_CMD_CONNECT_APPOINTSERVER": 2,
		"VS_PB_DEVCTL_CMD_DEV_SHUTDOWN":          3,
		"VS_PB_DEVCTL_CMD_DEV_RESET":             4,
		"VS_PB_DEVCTL_CMD_DEV_RESTORE":           5,
		"VS_PB_DEVCTL_CMD_CLOSE_SOCKET":          6,
		"VS_PB_DEVCTL_CMD_CLOSE_ALLWIRELESS":     7,
	}
)

func (x VsFrontPbDevCmdType) Enum() *VsFrontPbDevCmdType {
	p := new(VsFrontPbDevCmdType)
	*p = x
	return p
}

func (x VsFrontPbDevCmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VsFrontPbDevCmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_msg_proto_enumTypes[4].Descriptor()
}

func (VsFrontPbDevCmdType) Type() protoreflect.EnumType {
	return &file_iot_pb_front_msg_proto_enumTypes[4]
}

func (x VsFrontPbDevCmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VsFrontPbDevCmdType.Descriptor instead.
func (VsFrontPbDevCmdType) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{4}
}

type VS_FRONT_PROTOCOL_TYPE int32

const (
	VS_FRONT_PROTOCOL_TYPE_PT_NONE       VS_FRONT_PROTOCOL_TYPE = 0 //无
	VS_FRONT_PROTOCOL_TYPE_PT_JT2013     VS_FRONT_PROTOCOL_TYPE = 1 //部标2013
	VS_FRONT_PROTOCOL_TYPE_PT_JT2019     VS_FRONT_PROTOCOL_TYPE = 2 //部标2019
	VS_FRONT_PROTOCOL_TYPE_PT_XL_MQTT_V1 VS_FRONT_PROTOCOL_TYPE = 3 //溪联MQTT V1协议
)

// Enum value maps for VS_FRONT_PROTOCOL_TYPE.
var (
	VS_FRONT_PROTOCOL_TYPE_name = map[int32]string{
		0: "PT_NONE",
		1: "PT_JT2013",
		2: "PT_JT2019",
		3: "PT_XL_MQTT_V1",
	}
	VS_FRONT_PROTOCOL_TYPE_value = map[string]int32{
		"PT_NONE":       0,
		"PT_JT2013":     1,
		"PT_JT2019":     2,
		"PT_XL_MQTT_V1": 3,
	}
)

func (x VS_FRONT_PROTOCOL_TYPE) Enum() *VS_FRONT_PROTOCOL_TYPE {
	p := new(VS_FRONT_PROTOCOL_TYPE)
	*p = x
	return p
}

func (x VS_FRONT_PROTOCOL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VS_FRONT_PROTOCOL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_msg_proto_enumTypes[5].Descriptor()
}

func (VS_FRONT_PROTOCOL_TYPE) Type() protoreflect.EnumType {
	return &file_iot_pb_front_msg_proto_enumTypes[5]
}

func (x VS_FRONT_PROTOCOL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VS_FRONT_PROTOCOL_TYPE.Descriptor instead.
func (VS_FRONT_PROTOCOL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{5}
}

type VsPbStorageSensorDataType int32

const (
	VsPbStorageSensorDataType_SSD_NONE    VsPbStorageSensorDataType = 0
	VsPbStorageSensorDataType_SSD_WU_LIAN VsPbStorageSensorDataType = 1 //五联CAN数据 VsFrontPbStorageSensorWuLianCanData 的json数据
)

// Enum value maps for VsPbStorageSensorDataType.
var (
	VsPbStorageSensorDataType_name = map[int32]string{
		0: "SSD_NONE",
		1: "SSD_WU_LIAN",
	}
	VsPbStorageSensorDataType_value = map[string]int32{
		"SSD_NONE":    0,
		"SSD_WU_LIAN": 1,
	}
)

func (x VsPbStorageSensorDataType) Enum() *VsPbStorageSensorDataType {
	p := new(VsPbStorageSensorDataType)
	*p = x
	return p
}

func (x VsPbStorageSensorDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VsPbStorageSensorDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_iot_pb_front_msg_proto_enumTypes[6].Descriptor()
}

func (VsPbStorageSensorDataType) Type() protoreflect.EnumType {
	return &file_iot_pb_front_msg_proto_enumTypes[6]
}

func (x VsPbStorageSensorDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VsPbStorageSensorDataType.Descriptor instead.
func (VsPbStorageSensorDataType) EnumDescriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{6}
}

// 数据透传
type IotFrontPbMsgDevDataTrans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransType uint32 `protobuf:"varint,1,opt,name=transType,proto3" json:"transType,omitempty"` //数据透传类型 IotFrontPbMotTransMsgType
	TransData string `protobuf:"bytes,2,opt,name=transData,proto3" json:"transData,omitempty"`  //数据
	DevNo     string `protobuf:"bytes,3,opt,name=devNo,proto3" json:"devNo,omitempty"`          //终端号
}

func (x *IotFrontPbMsgDevDataTrans) Reset() {
	*x = IotFrontPbMsgDevDataTrans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IotFrontPbMsgDevDataTrans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IotFrontPbMsgDevDataTrans) ProtoMessage() {}

func (x *IotFrontPbMsgDevDataTrans) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IotFrontPbMsgDevDataTrans.ProtoReflect.Descriptor instead.
func (*IotFrontPbMsgDevDataTrans) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{0}
}

func (x *IotFrontPbMsgDevDataTrans) GetTransType() uint32 {
	if x != nil {
		return x.TransType
	}
	return 0
}

func (x *IotFrontPbMsgDevDataTrans) GetTransData() string {
	if x != nil {
		return x.TransData
	}
	return ""
}

func (x *IotFrontPbMsgDevDataTrans) GetDevNo() string {
	if x != nil {
		return x.DevNo
	}
	return ""
}

// 获取接入设备信息
type VsFrontPbMsgDevInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleNo    string `protobuf:"bytes,1,opt,name=vehicleNo,proto3" json:"vehicleNo,omitempty"`        //车牌号
	IsExistDev   bool   `protobuf:"varint,2,opt,name=isExistDev,proto3" json:"isExistDev,omitempty"`     //是否存在终端
	VehicleGuid  uint32 `protobuf:"varint,3,opt,name=vehicleGuid,proto3" json:"vehicleGuid,omitempty"`   //车辆GUID
	DevVersion   string `protobuf:"bytes,4,opt,name=devVersion,proto3" json:"devVersion,omitempty"`      //终端版本号
	CmdList      string `protobuf:"bytes,5,opt,name=cmdList,proto3" json:"cmdList,omitempty"`            //指令列表
	OfflineTime  uint32 `protobuf:"varint,6,opt,name=offlineTime,proto3" json:"offlineTime,omitempty"`   //离线时间
	DeadlineTime uint32 `protobuf:"varint,7,opt,name=deadlineTime,proto3" json:"deadlineTime,omitempty"` //截止日期
}

func (x *VsFrontPbMsgDevInfo) Reset() {
	*x = VsFrontPbMsgDevInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgDevInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgDevInfo) ProtoMessage() {}

func (x *VsFrontPbMsgDevInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgDevInfo.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgDevInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{1}
}

func (x *VsFrontPbMsgDevInfo) GetVehicleNo() string {
	if x != nil {
		return x.VehicleNo
	}
	return ""
}

func (x *VsFrontPbMsgDevInfo) GetIsExistDev() bool {
	if x != nil {
		return x.IsExistDev
	}
	return false
}

func (x *VsFrontPbMsgDevInfo) GetVehicleGuid() uint32 {
	if x != nil {
		return x.VehicleGuid
	}
	return 0
}

func (x *VsFrontPbMsgDevInfo) GetDevVersion() string {
	if x != nil {
		return x.DevVersion
	}
	return ""
}

func (x *VsFrontPbMsgDevInfo) GetCmdList() string {
	if x != nil {
		return x.CmdList
	}
	return ""
}

func (x *VsFrontPbMsgDevInfo) GetOfflineTime() uint32 {
	if x != nil {
		return x.OfflineTime
	}
	return 0
}

func (x *VsFrontPbMsgDevInfo) GetDeadlineTime() uint32 {
	if x != nil {
		return x.DeadlineTime
	}
	return 0
}

type VsFrontPbMsgOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevNo              string                 `protobuf:"bytes,1,opt,name=devNo,proto3" json:"devNo,omitempty"`                                             //终端号
	IsOnline           bool                   `protobuf:"varint,2,opt,name=isOnline,proto3" json:"isOnline,omitempty"`                                      //是否在线
	DevVersion         string                 `protobuf:"bytes,3,opt,name=devVersion,proto3" json:"devVersion,omitempty"`                                   //终端版本号
	VehicleGuid        uint32                 `protobuf:"varint,4,opt,name=vehicleGuid,proto3" json:"vehicleGuid,omitempty"`                                //车辆GUID
	VehicleNo          string                 `protobuf:"bytes,5,opt,name=vehicleNo,proto3" json:"vehicleNo,omitempty"`                                     //车牌号
	AdminGuid          uint32                 `protobuf:"varint,6,opt,name=adminGuid,proto3" json:"adminGuid,omitempty"`                                    //管理员GUID
	EventTime          uint32                 `protobuf:"varint,7,opt,name=eventTime,proto3" json:"eventTime,omitempty"`                                    //事件时间
	TimeLen            uint32                 `protobuf:"varint,8,opt,name=timeLen,proto3" json:"timeLen,omitempty"`                                        //上下线时长,上线时:离线时长,下线时,在线时长 秒
	DeviceManufacturer uint32                 `protobuf:"varint,10,opt,name=deviceManufacturer,proto3" json:"deviceManufacturer,omitempty"`                 //厂商类型; IOT_DEV_TYPE
	ProtocolType       VS_FRONT_PROTOCOL_TYPE `protobuf:"varint,11,opt,name=protocolType,proto3,enum=VS_FRONT_PROTOCOL_TYPE" json:"protocolType,omitempty"` //协议类型 VS_FRONT_PROTOCOL_TYPE
	OnlineNum          uint32                 `protobuf:"varint,12,opt,name=onlineNum,proto3" json:"onlineNum,omitempty"`                                   //上线数量
	HardwareVer        string                 `protobuf:"bytes,14,opt,name=hardwareVer,proto3" json:"hardwareVer,omitempty"`                                //硬件版本号
}

func (x *VsFrontPbMsgOnline) Reset() {
	*x = VsFrontPbMsgOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgOnline) ProtoMessage() {}

func (x *VsFrontPbMsgOnline) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgOnline.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgOnline) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{2}
}

func (x *VsFrontPbMsgOnline) GetDevNo() string {
	if x != nil {
		return x.DevNo
	}
	return ""
}

func (x *VsFrontPbMsgOnline) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *VsFrontPbMsgOnline) GetDevVersion() string {
	if x != nil {
		return x.DevVersion
	}
	return ""
}

func (x *VsFrontPbMsgOnline) GetVehicleGuid() uint32 {
	if x != nil {
		return x.VehicleGuid
	}
	return 0
}

func (x *VsFrontPbMsgOnline) GetVehicleNo() string {
	if x != nil {
		return x.VehicleNo
	}
	return ""
}

func (x *VsFrontPbMsgOnline) GetAdminGuid() uint32 {
	if x != nil {
		return x.AdminGuid
	}
	return 0
}

func (x *VsFrontPbMsgOnline) GetEventTime() uint32 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *VsFrontPbMsgOnline) GetTimeLen() uint32 {
	if x != nil {
		return x.TimeLen
	}
	return 0
}

func (x *VsFrontPbMsgOnline) GetDeviceManufacturer() uint32 {
	if x != nil {
		return x.DeviceManufacturer
	}
	return 0
}

func (x *VsFrontPbMsgOnline) GetProtocolType() VS_FRONT_PROTOCOL_TYPE {
	if x != nil {
		return x.ProtocolType
	}
	return VS_FRONT_PROTOCOL_TYPE_PT_NONE
}

func (x *VsFrontPbMsgOnline) GetOnlineNum() uint32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *VsFrontPbMsgOnline) GetHardwareVer() string {
	if x != nil {
		return x.HardwareVer
	}
	return ""
}

// 下发消息类
type VsFrontPbMsgSendText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandleFlag  uint32 `protobuf:"varint,1,opt,name=handleFlag,proto3" json:"handleFlag,omitempty"`  //处理类型 VS_FRONT_TEXT_FLAG_BIT,注意这里要按位
	ContentText string `protobuf:"bytes,2,opt,name=contentText,proto3" json:"contentText,omitempty"` //下发消息文本
	DevNo       string `protobuf:"bytes,3,opt,name=devNo,proto3" json:"devNo,omitempty"`             //终端号
}

func (x *VsFrontPbMsgSendText) Reset() {
	*x = VsFrontPbMsgSendText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgSendText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgSendText) ProtoMessage() {}

func (x *VsFrontPbMsgSendText) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgSendText.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgSendText) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{3}
}

func (x *VsFrontPbMsgSendText) GetHandleFlag() uint32 {
	if x != nil {
		return x.HandleFlag
	}
	return 0
}

func (x *VsFrontPbMsgSendText) GetContentText() string {
	if x != nil {
		return x.ContentText
	}
	return ""
}

func (x *VsFrontPbMsgSendText) GetDevNo() string {
	if x != nil {
		return x.DevNo
	}
	return ""
}

type VsFrontPbMsgUpgradeParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url               string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                              //URL地址
	DialAPN           string `protobuf:"bytes,2,opt,name=dialAPN,proto3" json:"dialAPN,omitempty"`                      //拨号点名称
	DialUserName      string `protobuf:"bytes,3,opt,name=dialUserName,proto3" json:"dialUserName,omitempty"`            //拨号用户名
	DialPasswd        string `protobuf:"bytes,5,opt,name=dialPasswd,proto3" json:"dialPasswd,omitempty"`                //拨号密码
	SvrAddr           string `protobuf:"bytes,6,opt,name=svrAddr,proto3" json:"svrAddr,omitempty"`                      //服务器地址(IP或者域名）
	SvrTCPPort        string `protobuf:"bytes,7,opt,name=svrTCPPort,proto3" json:"svrTCPPort,omitempty"`                //服务器TCP端口
	SvrUDPPort        string `protobuf:"bytes,8,opt,name=svrUDPPort,proto3" json:"svrUDPPort,omitempty"`                //服务器UDP端口
	HardwareVer       string `protobuf:"bytes,9,opt,name=hardwareVer,proto3" json:"hardwareVer,omitempty"`              //硬件版本
	SoftwareVer       string `protobuf:"bytes,10,opt,name=softwareVer,proto3" json:"softwareVer,omitempty"`             //固件版本
	ConnectSvrTimeout string `protobuf:"bytes,11,opt,name=connectSvrTimeout,proto3" json:"connectSvrTimeout,omitempty"` //连接到指定服务器时限, 单位: 分(min)
	ManufacturerID    string `protobuf:"bytes,12,opt,name=manufacturerID,proto3" json:"manufacturerID,omitempty"`       //制造商ID
}

func (x *VsFrontPbMsgUpgradeParam) Reset() {
	*x = VsFrontPbMsgUpgradeParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgUpgradeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgUpgradeParam) ProtoMessage() {}

func (x *VsFrontPbMsgUpgradeParam) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgUpgradeParam.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgUpgradeParam) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{4}
}

func (x *VsFrontPbMsgUpgradeParam) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetDialAPN() string {
	if x != nil {
		return x.DialAPN
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetDialUserName() string {
	if x != nil {
		return x.DialUserName
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetDialPasswd() string {
	if x != nil {
		return x.DialPasswd
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetSvrAddr() string {
	if x != nil {
		return x.SvrAddr
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetSvrTCPPort() string {
	if x != nil {
		return x.SvrTCPPort
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetSvrUDPPort() string {
	if x != nil {
		return x.SvrUDPPort
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetHardwareVer() string {
	if x != nil {
		return x.HardwareVer
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetSoftwareVer() string {
	if x != nil {
		return x.SoftwareVer
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetConnectSvrTimeout() string {
	if x != nil {
		return x.ConnectSvrTimeout
	}
	return ""
}

func (x *VsFrontPbMsgUpgradeParam) GetManufacturerID() string {
	if x != nil {
		return x.ManufacturerID
	}
	return ""
}

type VsFrontPbMsgConnAppointSvrParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenCode        string `protobuf:"bytes,1,opt,name=authenCode,proto3" json:"authenCode,omitempty"`               //监管平台下发的鉴权码
	DialAPN           string `protobuf:"bytes,2,opt,name=dialAPN,proto3" json:"dialAPN,omitempty"`                     //拨号点名称
	DialUserName      string `protobuf:"bytes,3,opt,name=dialUserName,proto3" json:"dialUserName,omitempty"`           //拨号用户名
	DialUserPasswd    string `protobuf:"bytes,4,opt,name=dialUserPasswd,proto3" json:"dialUserPasswd,omitempty"`       //拨号密码
	SvrAddr           string `protobuf:"bytes,5,opt,name=svrAddr,proto3" json:"svrAddr,omitempty"`                     //服务器地址(IP或者域名）
	SvrTcpPort        string `protobuf:"bytes,6,opt,name=svrTcpPort,proto3" json:"svrTcpPort,omitempty"`               //服务器TCP端口
	SrvUdpPort        string `protobuf:"bytes,7,opt,name=srvUdpPort,proto3" json:"srvUdpPort,omitempty"`               //服务器UDP端口
	ConnectSvrTimeout string `protobuf:"bytes,8,opt,name=connectSvrTimeout,proto3" json:"connectSvrTimeout,omitempty"` //连接到指定服务器时限, 单位: 分(min)
	ConnectCtrl       string `protobuf:"bytes,9,opt,name=connectCtrl,proto3" json:"connectCtrl,omitempty"`             //连接控制, 0: 切换到指定服务器, 1: 切换回原缺省服务器
}

func (x *VsFrontPbMsgConnAppointSvrParam) Reset() {
	*x = VsFrontPbMsgConnAppointSvrParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgConnAppointSvrParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgConnAppointSvrParam) ProtoMessage() {}

func (x *VsFrontPbMsgConnAppointSvrParam) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgConnAppointSvrParam.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgConnAppointSvrParam) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{5}
}

func (x *VsFrontPbMsgConnAppointSvrParam) GetAuthenCode() string {
	if x != nil {
		return x.AuthenCode
	}
	return ""
}

func (x *VsFrontPbMsgConnAppointSvrParam) GetDialAPN() string {
	if x != nil {
		return x.DialAPN
	}
	return ""
}

func (x *VsFrontPbMsgConnAppointSvrParam) GetDialUserName() string {
	if x != nil {
		return x.DialUserName
	}
	return ""
}

func (x *VsFrontPbMsgConnAppointSvrParam) GetDialUserPasswd() string {
	if x != nil {
		return x.DialUserPasswd
	}
	return ""
}

func (x *VsFrontPbMsgConnAppointSvrParam) GetSvrAddr() string {
	if x != nil {
		return x.SvrAddr
	}
	return ""
}

func (x *VsFrontPbMsgConnAppointSvrParam) GetSvrTcpPort() string {
	if x != nil {
		return x.SvrTcpPort
	}
	return ""
}

func (x *VsFrontPbMsgConnAppointSvrParam) GetSrvUdpPort() string {
	if x != nil {
		return x.SrvUdpPort
	}
	return ""
}

func (x *VsFrontPbMsgConnAppointSvrParam) GetConnectSvrTimeout() string {
	if x != nil {
		return x.ConnectSvrTimeout
	}
	return ""
}

func (x *VsFrontPbMsgConnAppointSvrParam) GetConnectCtrl() string {
	if x != nil {
		return x.ConnectCtrl
	}
	return ""
}

// 设备控制
type VsFrontPbMsgDevCtrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevNo        string                           `protobuf:"bytes,1,opt,name=devNo,proto3" json:"devNo,omitempty"`                               //终端号
	CmdType      VsFrontPbDevCmdType              `protobuf:"varint,2,opt,name=cmdType,proto3,enum=VsFrontPbDevCmdType" json:"cmdType,omitempty"` //控制命令
	UpgradeParam *VsFrontPbMsgUpgradeParam        `protobuf:"bytes,3,opt,name=upgradeParam,proto3" json:"upgradeParam,omitempty"`                 //升级参数
	ConnParam    *VsFrontPbMsgConnAppointSvrParam `protobuf:"bytes,4,opt,name=connParam,proto3" json:"connParam,omitempty"`                       //连接指定服务器参数
}

func (x *VsFrontPbMsgDevCtrlReq) Reset() {
	*x = VsFrontPbMsgDevCtrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgDevCtrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgDevCtrlReq) ProtoMessage() {}

func (x *VsFrontPbMsgDevCtrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgDevCtrlReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgDevCtrlReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{6}
}

func (x *VsFrontPbMsgDevCtrlReq) GetDevNo() string {
	if x != nil {
		return x.DevNo
	}
	return ""
}

func (x *VsFrontPbMsgDevCtrlReq) GetCmdType() VsFrontPbDevCmdType {
	if x != nil {
		return x.CmdType
	}
	return VsFrontPbDevCmdType_VS_PB_DEVCTL_CMD_START
}

func (x *VsFrontPbMsgDevCtrlReq) GetUpgradeParam() *VsFrontPbMsgUpgradeParam {
	if x != nil {
		return x.UpgradeParam
	}
	return nil
}

func (x *VsFrontPbMsgDevCtrlReq) GetConnParam() *VsFrontPbMsgConnAppointSvrParam {
	if x != nil {
		return x.ConnParam
	}
	return nil
}

// 参数项信息
type VsFrontPbMsgDevParamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamID      uint32 `protobuf:"varint,1,opt,name=paramID,proto3" json:"paramID,omitempty"`          //参数ID
	ParamType    uint32 `protobuf:"varint,2,opt,name=paramType,proto3" json:"paramType,omitempty"`      //参数类型
	ParamContent string `protobuf:"bytes,3,opt,name=paramContent,proto3" json:"paramContent,omitempty"` //数据内容
}

func (x *VsFrontPbMsgDevParamItem) Reset() {
	*x = VsFrontPbMsgDevParamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgDevParamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgDevParamItem) ProtoMessage() {}

func (x *VsFrontPbMsgDevParamItem) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgDevParamItem.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgDevParamItem) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{7}
}

func (x *VsFrontPbMsgDevParamItem) GetParamID() uint32 {
	if x != nil {
		return x.ParamID
	}
	return 0
}

func (x *VsFrontPbMsgDevParamItem) GetParamType() uint32 {
	if x != nil {
		return x.ParamType
	}
	return 0
}

func (x *VsFrontPbMsgDevParamItem) GetParamContent() string {
	if x != nil {
		return x.ParamContent
	}
	return ""
}

// 设备参数设置
type VsFrontPbMsgDevParamSettingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevNo string                      `protobuf:"bytes,1,opt,name=devNo,proto3" json:"devNo,omitempty"` //终端号
	Items []*VsFrontPbMsgDevParamItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"` //参数项信息
}

func (x *VsFrontPbMsgDevParamSettingReq) Reset() {
	*x = VsFrontPbMsgDevParamSettingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgDevParamSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgDevParamSettingReq) ProtoMessage() {}

func (x *VsFrontPbMsgDevParamSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgDevParamSettingReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgDevParamSettingReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{8}
}

func (x *VsFrontPbMsgDevParamSettingReq) GetDevNo() string {
	if x != nil {
		return x.DevNo
	}
	return ""
}

func (x *VsFrontPbMsgDevParamSettingReq) GetItems() []*VsFrontPbMsgDevParamItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 设备参数应答
type VsFrontPbMsgDevParamSettingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevNo  string                      `protobuf:"bytes,1,opt,name=devNo,proto3" json:"devNo,omitempty"`    //终端号
	RespSN uint32                      `protobuf:"varint,2,opt,name=respSN,proto3" json:"respSN,omitempty"` //应答sn
	Items  []*VsFrontPbMsgDevParamItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`    //参数项信息
}

func (x *VsFrontPbMsgDevParamSettingResp) Reset() {
	*x = VsFrontPbMsgDevParamSettingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgDevParamSettingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgDevParamSettingResp) ProtoMessage() {}

func (x *VsFrontPbMsgDevParamSettingResp) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgDevParamSettingResp.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgDevParamSettingResp) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{9}
}

func (x *VsFrontPbMsgDevParamSettingResp) GetDevNo() string {
	if x != nil {
		return x.DevNo
	}
	return ""
}

func (x *VsFrontPbMsgDevParamSettingResp) GetRespSN() uint32 {
	if x != nil {
		return x.RespSN
	}
	return 0
}

func (x *VsFrontPbMsgDevParamSettingResp) GetItems() []*VsFrontPbMsgDevParamItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 设备参数查询
type VsFrontPbMsgDevParamQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevNo    string   `protobuf:"bytes,1,opt,name=devNo,proto3" json:"devNo,omitempty"`               //终端号
	QueryIDs []uint32 `protobuf:"varint,2,rep,packed,name=queryIDs,proto3" json:"queryIDs,omitempty"` //查询参数ID,空时查询所有
}

func (x *VsFrontPbMsgDevParamQueryReq) Reset() {
	*x = VsFrontPbMsgDevParamQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgDevParamQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgDevParamQueryReq) ProtoMessage() {}

func (x *VsFrontPbMsgDevParamQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgDevParamQueryReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgDevParamQueryReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{10}
}

func (x *VsFrontPbMsgDevParamQueryReq) GetDevNo() string {
	if x != nil {
		return x.DevNo
	}
	return ""
}

func (x *VsFrontPbMsgDevParamQueryReq) GetQueryIDs() []uint32 {
	if x != nil {
		return x.QueryIDs
	}
	return nil
}

// 批量请求通用应答
type VsFrontPbMsgBatchReqCommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqCnt     uint32 `protobuf:"varint,1,opt,name=reqCnt,proto3" json:"reqCnt,omitempty"`         //请求数量
	SuccessCnt uint32 `protobuf:"varint,2,opt,name=successCnt,proto3" json:"successCnt,omitempty"` //应答成功数量
}

func (x *VsFrontPbMsgBatchReqCommonResp) Reset() {
	*x = VsFrontPbMsgBatchReqCommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgBatchReqCommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgBatchReqCommonResp) ProtoMessage() {}

func (x *VsFrontPbMsgBatchReqCommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgBatchReqCommonResp.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgBatchReqCommonResp) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{11}
}

func (x *VsFrontPbMsgBatchReqCommonResp) GetReqCnt() uint32 {
	if x != nil {
		return x.ReqCnt
	}
	return 0
}

func (x *VsFrontPbMsgBatchReqCommonResp) GetSuccessCnt() uint32 {
	if x != nil {
		return x.SuccessCnt
	}
	return 0
}

// 批量请求通用应答
type VsFrontPbMsgBatchRespErrorDevNoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevNos string `protobuf:"bytes,1,opt,name=devNos,proto3" json:"devNos,omitempty"` //异常的终端号
}

func (x *VsFrontPbMsgBatchRespErrorDevNoList) Reset() {
	*x = VsFrontPbMsgBatchRespErrorDevNoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgBatchRespErrorDevNoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgBatchRespErrorDevNoList) ProtoMessage() {}

func (x *VsFrontPbMsgBatchRespErrorDevNoList) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgBatchRespErrorDevNoList.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgBatchRespErrorDevNoList) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{12}
}

func (x *VsFrontPbMsgBatchRespErrorDevNoList) GetDevNos() string {
	if x != nil {
		return x.DevNos
	}
	return ""
}

// 前端抓拍
type VsFrontPbMsgTakeCaptureReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontGuid              uint32 `protobuf:"varint,1,opt,name=frontGuid,proto3" json:"frontGuid,omitempty"`
	ChNo                   uint32 `protobuf:"varint,2,opt,name=chNo,proto3" json:"chNo,omitempty"`                                     // 0开始
	UserCmdCaptureCount    uint32 `protobuf:"varint,3,opt,name=userCmdCaptureCount,proto3" json:"userCmdCaptureCount,omitempty"`       // 0 表示停止拍摄；0xFFFF 表示录像；其它表示拍照张数
	UserCmdCaptureInterval uint32 `protobuf:"varint,4,opt,name=userCmdCaptureInterval,proto3" json:"userCmdCaptureInterval,omitempty"` // 毫秒，0 表示按最小间隔拍照或一直录像
	BIsRtSave              uint32 `protobuf:"varint,5,opt,name=bIsRtSave,proto3" json:"bIsRtSave,omitempty"`                           // 保存标志，0：实时上传;1：保存；
	ResolutionRatio        uint32 `protobuf:"varint,6,opt,name=resolutionRatio,proto3" json:"resolutionRatio,omitempty"`               // VSFrontJpgResolutionList
	Quality                uint32 `protobuf:"varint,7,opt,name=quality,proto3" json:"quality,omitempty"`                               // 1-10，1 代表质量损失最小，10 表示压缩比最大
	Bright                 uint32 `protobuf:"varint,8,opt,name=bright,proto3" json:"bright,omitempty"`                                 // 0-255
	ContrastRadio          uint32 `protobuf:"varint,9,opt,name=contrastRadio,proto3" json:"contrastRadio,omitempty"`                   // 0-127
	Saturation             uint32 `protobuf:"varint,10,opt,name=saturation,proto3" json:"saturation,omitempty"`                        //0-127
	Chroma                 uint32 `protobuf:"varint,11,opt,name=chroma,proto3" json:"chroma,omitempty"`                                // 0-255
}

func (x *VsFrontPbMsgTakeCaptureReq) Reset() {
	*x = VsFrontPbMsgTakeCaptureReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgTakeCaptureReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgTakeCaptureReq) ProtoMessage() {}

func (x *VsFrontPbMsgTakeCaptureReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgTakeCaptureReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgTakeCaptureReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{13}
}

func (x *VsFrontPbMsgTakeCaptureReq) GetFrontGuid() uint32 {
	if x != nil {
		return x.FrontGuid
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetChNo() uint32 {
	if x != nil {
		return x.ChNo
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetUserCmdCaptureCount() uint32 {
	if x != nil {
		return x.UserCmdCaptureCount
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetUserCmdCaptureInterval() uint32 {
	if x != nil {
		return x.UserCmdCaptureInterval
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetBIsRtSave() uint32 {
	if x != nil {
		return x.BIsRtSave
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetResolutionRatio() uint32 {
	if x != nil {
		return x.ResolutionRatio
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetBright() uint32 {
	if x != nil {
		return x.Bright
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetContrastRadio() uint32 {
	if x != nil {
		return x.ContrastRadio
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetSaturation() uint32 {
	if x != nil {
		return x.Saturation
	}
	return 0
}

func (x *VsFrontPbMsgTakeCaptureReq) GetChroma() uint32 {
	if x != nil {
		return x.Chroma
	}
	return 0
}

// 终端注册
type VsFrontPbMotMsgDevRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvinceID     uint32 `protobuf:"varint,1,opt,name=provinceID,proto3" json:"provinceID,omitempty"`        //省id
	CityID         uint32 `protobuf:"varint,2,opt,name=cityID,proto3" json:"cityID,omitempty"`                //市id
	ManufacturerID string `protobuf:"bytes,3,opt,name=manufacturerID,proto3" json:"manufacturerID,omitempty"` //制造商ID
	DevModel       string `protobuf:"bytes,4,opt,name=devModel,proto3" json:"devModel,omitempty"`             //终端型号
	DevID          string `protobuf:"bytes,5,opt,name=devID,proto3" json:"devID,omitempty"`                   //终端ID
	VehicleColor   uint32 `protobuf:"varint,6,opt,name=vehicleColor,proto3" json:"vehicleColor,omitempty"`    //车牌颜色0时,vehicleSign为vin
	VehicleSign    string `protobuf:"bytes,7,opt,name=vehicleSign,proto3" json:"vehicleSign,omitempty"`       //车牌颜色或VIN
}

func (x *VsFrontPbMotMsgDevRegister) Reset() {
	*x = VsFrontPbMotMsgDevRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMotMsgDevRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMotMsgDevRegister) ProtoMessage() {}

func (x *VsFrontPbMotMsgDevRegister) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMotMsgDevRegister.ProtoReflect.Descriptor instead.
func (*VsFrontPbMotMsgDevRegister) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{14}
}

func (x *VsFrontPbMotMsgDevRegister) GetProvinceID() uint32 {
	if x != nil {
		return x.ProvinceID
	}
	return 0
}

func (x *VsFrontPbMotMsgDevRegister) GetCityID() uint32 {
	if x != nil {
		return x.CityID
	}
	return 0
}

func (x *VsFrontPbMotMsgDevRegister) GetManufacturerID() string {
	if x != nil {
		return x.ManufacturerID
	}
	return ""
}

func (x *VsFrontPbMotMsgDevRegister) GetDevModel() string {
	if x != nil {
		return x.DevModel
	}
	return ""
}

func (x *VsFrontPbMotMsgDevRegister) GetDevID() string {
	if x != nil {
		return x.DevID
	}
	return ""
}

func (x *VsFrontPbMotMsgDevRegister) GetVehicleColor() uint32 {
	if x != nil {
		return x.VehicleColor
	}
	return 0
}

func (x *VsFrontPbMotMsgDevRegister) GetVehicleSign() string {
	if x != nil {
		return x.VehicleSign
	}
	return ""
}

// 平台通用应答--部标
type VsFrontPbMsgMotCommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSn  uint32 `protobuf:"varint,1,opt,name=msgSn,proto3" json:"msgSn,omitempty"`   //对应消息流水号
	MsgID  uint32 `protobuf:"varint,2,opt,name=msgID,proto3" json:"msgID,omitempty"`   //对应消息ID
	Result uint32 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"` //0:成功,1:失败
}

func (x *VsFrontPbMsgMotCommonResp) Reset() {
	*x = VsFrontPbMsgMotCommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgMotCommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgMotCommonResp) ProtoMessage() {}

func (x *VsFrontPbMsgMotCommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgMotCommonResp.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgMotCommonResp) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{15}
}

func (x *VsFrontPbMsgMotCommonResp) GetMsgSn() uint32 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *VsFrontPbMsgMotCommonResp) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *VsFrontPbMsgMotCommonResp) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// 注册应答
type VsFrontPbMsgMotDevRegResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespMsgSn uint32 `protobuf:"varint,1,opt,name=respMsgSn,proto3" json:"respMsgSn,omitempty"` //应答消息SN
	Result    uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`       //结果
	AuthCode  string `protobuf:"bytes,3,opt,name=authCode,proto3" json:"authCode,omitempty"`    //鉴权码
}

func (x *VsFrontPbMsgMotDevRegResp) Reset() {
	*x = VsFrontPbMsgMotDevRegResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgMotDevRegResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgMotDevRegResp) ProtoMessage() {}

func (x *VsFrontPbMsgMotDevRegResp) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgMotDevRegResp.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgMotDevRegResp) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{16}
}

func (x *VsFrontPbMsgMotDevRegResp) GetRespMsgSn() uint32 {
	if x != nil {
		return x.RespMsgSn
	}
	return 0
}

func (x *VsFrontPbMsgMotDevRegResp) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *VsFrontPbMsgMotDevRegResp) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

// 鉴权上报
type VsFrontPbMotMsgDevAuthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthCode     string                 `protobuf:"bytes,1,opt,name=authCode,proto3" json:"authCode,omitempty"`                                      //鉴权码
	Imei         string                 `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`                                              //imei
	DevVersion   string                 `protobuf:"bytes,3,opt,name=devVersion,proto3" json:"devVersion,omitempty"`                                  //设备版本号
	ProtocolType VS_FRONT_PROTOCOL_TYPE `protobuf:"varint,4,opt,name=protocolType,proto3,enum=VS_FRONT_PROTOCOL_TYPE" json:"protocolType,omitempty"` //协议类型
}

func (x *VsFrontPbMotMsgDevAuthReq) Reset() {
	*x = VsFrontPbMotMsgDevAuthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMotMsgDevAuthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMotMsgDevAuthReq) ProtoMessage() {}

func (x *VsFrontPbMotMsgDevAuthReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMotMsgDevAuthReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMotMsgDevAuthReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{17}
}

func (x *VsFrontPbMotMsgDevAuthReq) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *VsFrontPbMotMsgDevAuthReq) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *VsFrontPbMotMsgDevAuthReq) GetDevVersion() string {
	if x != nil {
		return x.DevVersion
	}
	return ""
}

func (x *VsFrontPbMotMsgDevAuthReq) GetProtocolType() VS_FRONT_PROTOCOL_TYPE {
	if x != nil {
		return x.ProtocolType
	}
	return VS_FRONT_PROTOCOL_TYPE_PT_NONE
}

// 驾驶员上传
type VsFrontPbDriverInfoUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`         //状态,1:插入,2:拔出
	UploadTime uint32 `protobuf:"varint,2,opt,name=uploadTime,proto3" json:"uploadTime,omitempty"` //插卡/拔卡时间
	Result     uint32 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`         //0:成功,1:认证未通过,2:锁定,3:拔出,4:数据错误
	DriverName string `protobuf:"bytes,4,opt,name=driverName,proto3" json:"driverName,omitempty"`  //驾驶员姓名
	PqCertCode string `protobuf:"bytes,5,opt,name=pqCertCode,proto3" json:"pqCertCode,omitempty"`  //从业资格证
	Issuing    string `protobuf:"bytes,6,opt,name=issuing,proto3" json:"issuing,omitempty"`        //发证机构名称
	ValidDate  uint32 `protobuf:"varint,7,opt,name=validDate,proto3" json:"validDate,omitempty"`   //证件有效期
	CardID     string `protobuf:"bytes,8,opt,name=cardID,proto3" json:"cardID,omitempty"`          //驾驶员身份证号
}

func (x *VsFrontPbDriverInfoUpload) Reset() {
	*x = VsFrontPbDriverInfoUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbDriverInfoUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbDriverInfoUpload) ProtoMessage() {}

func (x *VsFrontPbDriverInfoUpload) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbDriverInfoUpload.ProtoReflect.Descriptor instead.
func (*VsFrontPbDriverInfoUpload) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{18}
}

func (x *VsFrontPbDriverInfoUpload) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VsFrontPbDriverInfoUpload) GetUploadTime() uint32 {
	if x != nil {
		return x.UploadTime
	}
	return 0
}

func (x *VsFrontPbDriverInfoUpload) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *VsFrontPbDriverInfoUpload) GetDriverName() string {
	if x != nil {
		return x.DriverName
	}
	return ""
}

func (x *VsFrontPbDriverInfoUpload) GetPqCertCode() string {
	if x != nil {
		return x.PqCertCode
	}
	return ""
}

func (x *VsFrontPbDriverInfoUpload) GetIssuing() string {
	if x != nil {
		return x.Issuing
	}
	return ""
}

func (x *VsFrontPbDriverInfoUpload) GetValidDate() uint32 {
	if x != nil {
		return x.ValidDate
	}
	return 0
}

func (x *VsFrontPbDriverInfoUpload) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

// 多媒体信息上传
type VsFrontPbMultiMediaInfoUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaID     uint32 `protobuf:"varint,1,opt,name=mediaID,proto3" json:"mediaID,omitempty"`         //多媒体ID
	MediaType   uint32 `protobuf:"varint,2,opt,name=mediaType,proto3" json:"mediaType,omitempty"`     //多媒体类型 0:图像,1:音频;2:视频
	MediaFormat uint32 `protobuf:"varint,3,opt,name=mediaFormat,proto3" json:"mediaFormat,omitempty"` //多媒体格式0: JPEG: 1: TIF: 2: MP3: 3: WAV: 4:WMV
	EventCode   uint32 `protobuf:"varint,4,opt,name=eventCode,proto3" json:"eventCode,omitempty"`     //事件编码 0:平台下发指令:1: 定时动作:2: 抢劫报警触发:3:碰撞侧翻报警触发
	ChannelID   uint32 `protobuf:"varint,5,opt,name=channelID,proto3" json:"channelID,omitempty"`     //通道ID
}

func (x *VsFrontPbMultiMediaInfoUpload) Reset() {
	*x = VsFrontPbMultiMediaInfoUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaInfoUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaInfoUpload) ProtoMessage() {}

func (x *VsFrontPbMultiMediaInfoUpload) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaInfoUpload.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaInfoUpload) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{19}
}

func (x *VsFrontPbMultiMediaInfoUpload) GetMediaID() uint32 {
	if x != nil {
		return x.MediaID
	}
	return 0
}

func (x *VsFrontPbMultiMediaInfoUpload) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsFrontPbMultiMediaInfoUpload) GetMediaFormat() uint32 {
	if x != nil {
		return x.MediaFormat
	}
	return 0
}

func (x *VsFrontPbMultiMediaInfoUpload) GetEventCode() uint32 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *VsFrontPbMultiMediaInfoUpload) GetChannelID() uint32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

// 基本的定位数据
type VsFrontPbGpsBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmFlag  uint32 `protobuf:"varint,1,opt,name=alarmFlag,proto3" json:"alarmFlag,omitempty"`   //报警标志位
	StatusFlag uint32 `protobuf:"varint,2,opt,name=statusFlag,proto3" json:"statusFlag,omitempty"` //状态标志位
	Latitude   int32  `protobuf:"varint,3,opt,name=latitude,proto3" json:"latitude,omitempty"`     //纬度 10^6
	Longitude  int32  `protobuf:"varint,4,opt,name=longitude,proto3" json:"longitude,omitempty"`   //经度 10^6
	Altitude   uint32 `protobuf:"varint,5,opt,name=altitude,proto3" json:"altitude,omitempty"`     //海拔 米
	Speed      uint32 `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`           //速度 1/10 km/h
	Direct     uint32 `protobuf:"varint,7,opt,name=direct,proto3" json:"direct,omitempty"`         //方向 0-360
	Time       uint32 `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`             //时间
}

func (x *VsFrontPbGpsBaseInfo) Reset() {
	*x = VsFrontPbGpsBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbGpsBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbGpsBaseInfo) ProtoMessage() {}

func (x *VsFrontPbGpsBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbGpsBaseInfo.ProtoReflect.Descriptor instead.
func (*VsFrontPbGpsBaseInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{20}
}

func (x *VsFrontPbGpsBaseInfo) GetAlarmFlag() uint32 {
	if x != nil {
		return x.AlarmFlag
	}
	return 0
}

func (x *VsFrontPbGpsBaseInfo) GetStatusFlag() uint32 {
	if x != nil {
		return x.StatusFlag
	}
	return 0
}

func (x *VsFrontPbGpsBaseInfo) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *VsFrontPbGpsBaseInfo) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *VsFrontPbGpsBaseInfo) GetAltitude() uint32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *VsFrontPbGpsBaseInfo) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *VsFrontPbGpsBaseInfo) GetDirect() uint32 {
	if x != nil {
		return x.Direct
	}
	return 0
}

func (x *VsFrontPbGpsBaseInfo) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

// 多媒体数据上传
type VsFrontPbMultiMediaDataUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaID     uint32                `protobuf:"varint,1,opt,name=mediaID,proto3" json:"mediaID,omitempty"`         //多媒体ID
	MediaType   uint32                `protobuf:"varint,2,opt,name=mediaType,proto3" json:"mediaType,omitempty"`     //多媒体类型 0:图像,1:音频;2:视频
	MediaFormat uint32                `protobuf:"varint,3,opt,name=mediaFormat,proto3" json:"mediaFormat,omitempty"` //多媒体格式0: JPEG: 1: TIF: 2: MP3: 3: WAV: 4:WMV
	EventCode   uint32                `protobuf:"varint,4,opt,name=eventCode,proto3" json:"eventCode,omitempty"`     //事件编码 0:平台下发指令:1: 定时动作:2: 抢劫报警触发:3:碰撞侧翻报警触发
	ChannelID   uint32                `protobuf:"varint,5,opt,name=channelID,proto3" json:"channelID,omitempty"`     //通道ID
	GpsBase     *VsFrontPbGpsBaseInfo `protobuf:"bytes,6,opt,name=gpsBase,proto3" json:"gpsBase,omitempty"`          //基本定位信息
	MediaData   string                `protobuf:"bytes,14,opt,name=mediaData,proto3" json:"mediaData,omitempty"`     //数据
}

func (x *VsFrontPbMultiMediaDataUpload) Reset() {
	*x = VsFrontPbMultiMediaDataUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaDataUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaDataUpload) ProtoMessage() {}

func (x *VsFrontPbMultiMediaDataUpload) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaDataUpload.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaDataUpload) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{21}
}

func (x *VsFrontPbMultiMediaDataUpload) GetMediaID() uint32 {
	if x != nil {
		return x.MediaID
	}
	return 0
}

func (x *VsFrontPbMultiMediaDataUpload) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsFrontPbMultiMediaDataUpload) GetMediaFormat() uint32 {
	if x != nil {
		return x.MediaFormat
	}
	return 0
}

func (x *VsFrontPbMultiMediaDataUpload) GetEventCode() uint32 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *VsFrontPbMultiMediaDataUpload) GetChannelID() uint32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *VsFrontPbMultiMediaDataUpload) GetGpsBase() *VsFrontPbGpsBaseInfo {
	if x != nil {
		return x.GpsBase
	}
	return nil
}

func (x *VsFrontPbMultiMediaDataUpload) GetMediaData() string {
	if x != nil {
		return x.MediaData
	}
	return ""
}

// 多媒体数据上传应答
type VsFrontPbMultiMediaDataUploadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaID uint32 `protobuf:"varint,1,opt,name=mediaID,proto3" json:"mediaID,omitempty"` //多媒体ID
}

func (x *VsFrontPbMultiMediaDataUploadResp) Reset() {
	*x = VsFrontPbMultiMediaDataUploadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaDataUploadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaDataUploadResp) ProtoMessage() {}

func (x *VsFrontPbMultiMediaDataUploadResp) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaDataUploadResp.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaDataUploadResp) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{22}
}

func (x *VsFrontPbMultiMediaDataUploadResp) GetMediaID() uint32 {
	if x != nil {
		return x.MediaID
	}
	return 0
}

// 多媒体拍摄请求
type VsFrontPbMultiMediaCaptureReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelNo       uint32 `protobuf:"varint,1,opt,name=channelNo,proto3" json:"channelNo,omitempty"`             //通道号
	CaptureNum      uint32 `protobuf:"varint,2,opt,name=captureNum,proto3" json:"captureNum,omitempty"`           //拍摄命令0 表示停止拍摄；0xFFFF 表示录像;其它表示拍照张数
	CaptureInterval uint32 `protobuf:"varint,3,opt,name=captureInterval,proto3" json:"captureInterval,omitempty"` //拍照间隔,秒
	Flag            uint32 `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`                       //保存标志位,0:实时上传,1:保存
	Resolution      uint32 `protobuf:"varint,5,opt,name=resolution,proto3" json:"resolution,omitempty"`           //分辨率 00:最低(2019),0x01:320*240,0x02:640*480,0x03:800*600,0x04:1024*768,0x05:176*144;[QCIF]
	//x06:352*288;[Cif],0x07:704*288;[HALF D1],0x08:704*576;[D1],0xFF:最高(2019)
	Quality     uint32 `protobuf:"varint,6,opt,name=quality,proto3" json:"quality,omitempty"`          //质量,1-10，1 代表质量损失最小，10 表示压缩比最大
	Brightness  uint32 `protobuf:"varint,7,opt,name=brightness,proto3" json:"brightness,omitempty"`    //亮度 0-255
	Contrast    uint32 `protobuf:"varint,8,opt,name=contrast,proto3" json:"contrast,omitempty"`        //对比度 0-127
	Saturation  uint32 `protobuf:"varint,9,opt,name=saturation,proto3" json:"saturation,omitempty"`    //饱和度 0-127
	Chrominance uint32 `protobuf:"varint,10,opt,name=chrominance,proto3" json:"chrominance,omitempty"` //色度 0-255
}

func (x *VsFrontPbMultiMediaCaptureReq) Reset() {
	*x = VsFrontPbMultiMediaCaptureReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaCaptureReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaCaptureReq) ProtoMessage() {}

func (x *VsFrontPbMultiMediaCaptureReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaCaptureReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaCaptureReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{23}
}

func (x *VsFrontPbMultiMediaCaptureReq) GetChannelNo() uint32 {
	if x != nil {
		return x.ChannelNo
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureReq) GetCaptureNum() uint32 {
	if x != nil {
		return x.CaptureNum
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureReq) GetCaptureInterval() uint32 {
	if x != nil {
		return x.CaptureInterval
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureReq) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureReq) GetResolution() uint32 {
	if x != nil {
		return x.Resolution
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureReq) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureReq) GetBrightness() uint32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureReq) GetContrast() uint32 {
	if x != nil {
		return x.Contrast
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureReq) GetSaturation() uint32 {
	if x != nil {
		return x.Saturation
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureReq) GetChrominance() uint32 {
	if x != nil {
		return x.Chrominance
	}
	return 0
}

// 多媒体拍摄应答
type VsFrontPbMultiMediaCaptureResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespSN    uint32   `protobuf:"varint,1,opt,name=respSN,proto3" json:"respSN,omitempty"`              //对应平台摄像头立即拍摄命令的消息流水号
	Result    uint32   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`              //结果 0：成功；1：失败；2：通道不支持 以下字段在结果=0 时才有效
	MediaList []uint32 `protobuf:"varint,3,rep,packed,name=mediaList,proto3" json:"mediaList,omitempty"` //多媒体 ID 列表
}

func (x *VsFrontPbMultiMediaCaptureResp) Reset() {
	*x = VsFrontPbMultiMediaCaptureResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaCaptureResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaCaptureResp) ProtoMessage() {}

func (x *VsFrontPbMultiMediaCaptureResp) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaCaptureResp.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaCaptureResp) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{24}
}

func (x *VsFrontPbMultiMediaCaptureResp) GetRespSN() uint32 {
	if x != nil {
		return x.RespSN
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureResp) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *VsFrontPbMultiMediaCaptureResp) GetMediaList() []uint32 {
	if x != nil {
		return x.MediaList
	}
	return nil
}

// 多媒体查询请求
type VsFrontPbMultiMediaQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaType uint32 `protobuf:"varint,1,opt,name=mediaType,proto3" json:"mediaType,omitempty"` //0：图像；1：音频；2：视频
	ChannelNo uint32 `protobuf:"varint,2,opt,name=channelNo,proto3" json:"channelNo,omitempty"` // 0 表示检索该媒体类型的所有通道
	EventType uint32 `protobuf:"varint,3,opt,name=eventType,proto3" json:"eventType,omitempty"` //0：平台下发指令；1：定时动作；2：抢劫报警触发；3：碰撞侧翻报警触发；其他保留
	StartTime uint32 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"` //开始时间
	EndTime   uint32 `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`     //结束时间
}

func (x *VsFrontPbMultiMediaQueryReq) Reset() {
	*x = VsFrontPbMultiMediaQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaQueryReq) ProtoMessage() {}

func (x *VsFrontPbMultiMediaQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaQueryReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaQueryReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{25}
}

func (x *VsFrontPbMultiMediaQueryReq) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsFrontPbMultiMediaQueryReq) GetChannelNo() uint32 {
	if x != nil {
		return x.ChannelNo
	}
	return 0
}

func (x *VsFrontPbMultiMediaQueryReq) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VsFrontPbMultiMediaQueryReq) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VsFrontPbMultiMediaQueryReq) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// 多媒体应答项
type VsFrontPbMultiMediaInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaID   uint32                `protobuf:"varint,1,opt,name=mediaID,proto3" json:"mediaID,omitempty"`     //媒体ID
	MediaType uint32                `protobuf:"varint,2,opt,name=mediaType,proto3" json:"mediaType,omitempty"` //0：图像；1：音频；2：视频
	ChannelNo uint32                `protobuf:"varint,3,opt,name=channelNo,proto3" json:"channelNo,omitempty"` //通道号
	EventType uint32                `protobuf:"varint,4,opt,name=eventType,proto3" json:"eventType,omitempty"` //0：平台下发指令；1：定时动作；2：抢劫报警触发；3：碰撞侧翻报警触发；其他保留
	BaseGps   *VsFrontPbGpsBaseInfo `protobuf:"bytes,5,opt,name=baseGps,proto3" json:"baseGps,omitempty"`      //基本位置信息
}

func (x *VsFrontPbMultiMediaInfoItem) Reset() {
	*x = VsFrontPbMultiMediaInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaInfoItem) ProtoMessage() {}

func (x *VsFrontPbMultiMediaInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaInfoItem.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaInfoItem) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{26}
}

func (x *VsFrontPbMultiMediaInfoItem) GetMediaID() uint32 {
	if x != nil {
		return x.MediaID
	}
	return 0
}

func (x *VsFrontPbMultiMediaInfoItem) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsFrontPbMultiMediaInfoItem) GetChannelNo() uint32 {
	if x != nil {
		return x.ChannelNo
	}
	return 0
}

func (x *VsFrontPbMultiMediaInfoItem) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VsFrontPbMultiMediaInfoItem) GetBaseGps() *VsFrontPbGpsBaseInfo {
	if x != nil {
		return x.BaseGps
	}
	return nil
}

// 多媒体查询应答
type VsFrontPbMultiMediaQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespSN uint32                         `protobuf:"varint,1,opt,name=respSN,proto3" json:"respSN,omitempty"` //对应的多媒体数据检索消息的流水号
	Items  []*VsFrontPbMultiMediaInfoItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`    //检索项
}

func (x *VsFrontPbMultiMediaQueryResp) Reset() {
	*x = VsFrontPbMultiMediaQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaQueryResp) ProtoMessage() {}

func (x *VsFrontPbMultiMediaQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaQueryResp.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaQueryResp) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{27}
}

func (x *VsFrontPbMultiMediaQueryResp) GetRespSN() uint32 {
	if x != nil {
		return x.RespSN
	}
	return 0
}

func (x *VsFrontPbMultiMediaQueryResp) GetItems() []*VsFrontPbMultiMediaInfoItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 存储多媒体数据上传命令
type VsFrontPbMultiMediaStorageUploadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaType uint32 `protobuf:"varint,1,opt,name=mediaType,proto3" json:"mediaType,omitempty"` //0：图像；1：音频；2：视频
	ChannelNo uint32 `protobuf:"varint,2,opt,name=channelNo,proto3" json:"channelNo,omitempty"` //通道号
	EventType uint32 `protobuf:"varint,3,opt,name=eventType,proto3" json:"eventType,omitempty"` //0：平台下发指令；1：定时动作；2：抢劫报警触发；3：碰撞侧翻报警触发；其他保留
	StartTime uint32 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"` //开始时间
	EndTime   uint32 `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`     //结束时间
	DelFlag   uint32 `protobuf:"varint,6,opt,name=delFlag,proto3" json:"delFlag,omitempty"`     //删除标志 0：保留；1：删除
}

func (x *VsFrontPbMultiMediaStorageUploadReq) Reset() {
	*x = VsFrontPbMultiMediaStorageUploadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaStorageUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaStorageUploadReq) ProtoMessage() {}

func (x *VsFrontPbMultiMediaStorageUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaStorageUploadReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaStorageUploadReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{28}
}

func (x *VsFrontPbMultiMediaStorageUploadReq) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsFrontPbMultiMediaStorageUploadReq) GetChannelNo() uint32 {
	if x != nil {
		return x.ChannelNo
	}
	return 0
}

func (x *VsFrontPbMultiMediaStorageUploadReq) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VsFrontPbMultiMediaStorageUploadReq) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VsFrontPbMultiMediaStorageUploadReq) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VsFrontPbMultiMediaStorageUploadReq) GetDelFlag() uint32 {
	if x != nil {
		return x.DelFlag
	}
	return 0
}

// 单条存储多媒体数据检索上传命令
type VsFrontPbMultiMediaStorageUploadSingleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaID uint32 `protobuf:"varint,1,opt,name=mediaID,proto3" json:"mediaID,omitempty"` //媒体ID
	DelFlag uint32 `protobuf:"varint,2,opt,name=delFlag,proto3" json:"delFlag,omitempty"` //删除标志 0：保留；1：删除
}

func (x *VsFrontPbMultiMediaStorageUploadSingleReq) Reset() {
	*x = VsFrontPbMultiMediaStorageUploadSingleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMultiMediaStorageUploadSingleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMultiMediaStorageUploadSingleReq) ProtoMessage() {}

func (x *VsFrontPbMultiMediaStorageUploadSingleReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMultiMediaStorageUploadSingleReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMultiMediaStorageUploadSingleReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{29}
}

func (x *VsFrontPbMultiMediaStorageUploadSingleReq) GetMediaID() uint32 {
	if x != nil {
		return x.MediaID
	}
	return 0
}

func (x *VsFrontPbMultiMediaStorageUploadSingleReq) GetDelFlag() uint32 {
	if x != nil {
		return x.DelFlag
	}
	return 0
}

// 主动安全附件---------------------------------------------------------------------
// 附件上传指令下发
type VsFrontPbMotAttachmentUploadCmdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerAddress   string `protobuf:"bytes,1,opt,name=serverAddress,proto3" json:"serverAddress,omitempty"`      //附件服务器地址
	ServerTcpPort   uint32 `protobuf:"varint,2,opt,name=serverTcpPort,proto3" json:"serverTcpPort,omitempty"`     //tcp端口
	AlarmInfoFlag   string `protobuf:"bytes,3,opt,name=alarmInfoFlag,proto3" json:"alarmInfoFlag,omitempty"`      //报警标识号
	AlarmServerCode uint64 `protobuf:"varint,4,opt,name=alarmServerCode,proto3" json:"alarmServerCode,omitempty"` //报警平台分配唯一编码
}

func (x *VsFrontPbMotAttachmentUploadCmdReq) Reset() {
	*x = VsFrontPbMotAttachmentUploadCmdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMotAttachmentUploadCmdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMotAttachmentUploadCmdReq) ProtoMessage() {}

func (x *VsFrontPbMotAttachmentUploadCmdReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMotAttachmentUploadCmdReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMotAttachmentUploadCmdReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{30}
}

func (x *VsFrontPbMotAttachmentUploadCmdReq) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VsFrontPbMotAttachmentUploadCmdReq) GetServerTcpPort() uint32 {
	if x != nil {
		return x.ServerTcpPort
	}
	return 0
}

func (x *VsFrontPbMotAttachmentUploadCmdReq) GetAlarmInfoFlag() string {
	if x != nil {
		return x.AlarmInfoFlag
	}
	return ""
}

func (x *VsFrontPbMotAttachmentUploadCmdReq) GetAlarmServerCode() uint64 {
	if x != nil {
		return x.AlarmServerCode
	}
	return 0
}

// 报警附件信息列表
type VsFrontPbMotAttachmentInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`  // 文件名称
	FileSize uint32 `protobuf:"varint,2,opt,name=fileSize,proto3" json:"fileSize,omitempty"` // 文件大小
}

func (x *VsFrontPbMotAttachmentInfoList) Reset() {
	*x = VsFrontPbMotAttachmentInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMotAttachmentInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMotAttachmentInfoList) ProtoMessage() {}

func (x *VsFrontPbMotAttachmentInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMotAttachmentInfoList.ProtoReflect.Descriptor instead.
func (*VsFrontPbMotAttachmentInfoList) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{31}
}

func (x *VsFrontPbMotAttachmentInfoList) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VsFrontPbMotAttachmentInfoList) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

// 报警附件信息上传
type VsFrontPbMotAttachmentInfoUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmInfoFlag   string                            `protobuf:"bytes,1,opt,name=alarmInfoFlag,proto3" json:"alarmInfoFlag,omitempty"`      //报警标识
	AlarmServerCode uint64                            `protobuf:"varint,2,opt,name=alarmServerCode,proto3" json:"alarmServerCode,omitempty"` //报警平台分配唯一编码
	InfoType        uint32                            `protobuf:"varint,3,opt,name=infoType,proto3" json:"infoType,omitempty"`               //信息类型 0:正常,1:补传
	FileInfo        []*VsFrontPbMotAttachmentInfoList `protobuf:"bytes,4,rep,name=fileInfo,proto3" json:"fileInfo,omitempty"`                //附件信息列表
}

func (x *VsFrontPbMotAttachmentInfoUpload) Reset() {
	*x = VsFrontPbMotAttachmentInfoUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMotAttachmentInfoUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMotAttachmentInfoUpload) ProtoMessage() {}

func (x *VsFrontPbMotAttachmentInfoUpload) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMotAttachmentInfoUpload.ProtoReflect.Descriptor instead.
func (*VsFrontPbMotAttachmentInfoUpload) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{32}
}

func (x *VsFrontPbMotAttachmentInfoUpload) GetAlarmInfoFlag() string {
	if x != nil {
		return x.AlarmInfoFlag
	}
	return ""
}

func (x *VsFrontPbMotAttachmentInfoUpload) GetAlarmServerCode() uint64 {
	if x != nil {
		return x.AlarmServerCode
	}
	return 0
}

func (x *VsFrontPbMotAttachmentInfoUpload) GetInfoType() uint32 {
	if x != nil {
		return x.InfoType
	}
	return 0
}

func (x *VsFrontPbMotAttachmentInfoUpload) GetFileInfo() []*VsFrontPbMotAttachmentInfoList {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

// 报警文件信息上报,文件上传完成
type VsFrontPbMotAttachmentFileInfoUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`  //文件名
	FileType uint32 `protobuf:"varint,2,opt,name=fileType,proto3" json:"fileType,omitempty"` //文件类型 ,0:图片,1:音频,2:视频,3:文本,4:其它
	FileSize uint32 `protobuf:"varint,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"` //文件大小
}

func (x *VsFrontPbMotAttachmentFileInfoUpload) Reset() {
	*x = VsFrontPbMotAttachmentFileInfoUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMotAttachmentFileInfoUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMotAttachmentFileInfoUpload) ProtoMessage() {}

func (x *VsFrontPbMotAttachmentFileInfoUpload) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMotAttachmentFileInfoUpload.ProtoReflect.Descriptor instead.
func (*VsFrontPbMotAttachmentFileInfoUpload) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{33}
}

func (x *VsFrontPbMotAttachmentFileInfoUpload) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VsFrontPbMotAttachmentFileInfoUpload) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *VsFrontPbMotAttachmentFileInfoUpload) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

// 文件流数据上传
type VsFrontPbMotAttachmentFileStreamDataUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName   string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`      //文件名
	FileOffset uint32 `protobuf:"varint,2,opt,name=fileOffset,proto3" json:"fileOffset,omitempty"` //偏移量
	DataStream string `protobuf:"bytes,4,opt,name=dataStream,proto3" json:"dataStream,omitempty"`  //数据流
}

func (x *VsFrontPbMotAttachmentFileStreamDataUpload) Reset() {
	*x = VsFrontPbMotAttachmentFileStreamDataUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMotAttachmentFileStreamDataUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMotAttachmentFileStreamDataUpload) ProtoMessage() {}

func (x *VsFrontPbMotAttachmentFileStreamDataUpload) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMotAttachmentFileStreamDataUpload.ProtoReflect.Descriptor instead.
func (*VsFrontPbMotAttachmentFileStreamDataUpload) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{34}
}

func (x *VsFrontPbMotAttachmentFileStreamDataUpload) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VsFrontPbMotAttachmentFileStreamDataUpload) GetFileOffset() uint32 {
	if x != nil {
		return x.FileOffset
	}
	return 0
}

func (x *VsFrontPbMotAttachmentFileStreamDataUpload) GetDataStream() string {
	if x != nil {
		return x.DataStream
	}
	return ""
}

// 附件上传完成应答
type VsFrontPbMotAttachmentUploadResultRespPacketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPacketOffset uint32 `protobuf:"varint,1,opt,name=dataPacketOffset,proto3" json:"dataPacketOffset,omitempty"` //数据包偏移量
	DataPacketLen    uint32 `protobuf:"varint,2,opt,name=dataPacketLen,proto3" json:"dataPacketLen,omitempty"`       //数据包长度
}

func (x *VsFrontPbMotAttachmentUploadResultRespPacketInfo) Reset() {
	*x = VsFrontPbMotAttachmentUploadResultRespPacketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMotAttachmentUploadResultRespPacketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMotAttachmentUploadResultRespPacketInfo) ProtoMessage() {}

func (x *VsFrontPbMotAttachmentUploadResultRespPacketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMotAttachmentUploadResultRespPacketInfo.ProtoReflect.Descriptor instead.
func (*VsFrontPbMotAttachmentUploadResultRespPacketInfo) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{35}
}

func (x *VsFrontPbMotAttachmentUploadResultRespPacketInfo) GetDataPacketOffset() uint32 {
	if x != nil {
		return x.DataPacketOffset
	}
	return 0
}

func (x *VsFrontPbMotAttachmentUploadResultRespPacketInfo) GetDataPacketLen() uint32 {
	if x != nil {
		return x.DataPacketLen
	}
	return 0
}

// 文件上传完成结果应答 0x9212
type VsFrontPbMotAttachmentUploadResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName     string                                              `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`          //文件名
	FileType     uint32                                              `protobuf:"varint,2,opt,name=fileType,proto3" json:"fileType,omitempty"`         //文件类型 ,0:图片,1:音频,2:视频,3:文本,4:其它
	UploadResult uint32                                              `protobuf:"varint,3,opt,name=uploadResult,proto3" json:"uploadResult,omitempty"` //上传结果 0:完成,1:需要补传
	PacketInfo   []*VsFrontPbMotAttachmentUploadResultRespPacketInfo `protobuf:"bytes,4,rep,name=packetInfo,proto3" json:"packetInfo,omitempty"`      //补传包信息
}

func (x *VsFrontPbMotAttachmentUploadResultResp) Reset() {
	*x = VsFrontPbMotAttachmentUploadResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMotAttachmentUploadResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMotAttachmentUploadResultResp) ProtoMessage() {}

func (x *VsFrontPbMotAttachmentUploadResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMotAttachmentUploadResultResp.ProtoReflect.Descriptor instead.
func (*VsFrontPbMotAttachmentUploadResultResp) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{36}
}

func (x *VsFrontPbMotAttachmentUploadResultResp) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VsFrontPbMotAttachmentUploadResultResp) GetFileType() uint32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *VsFrontPbMotAttachmentUploadResultResp) GetUploadResult() uint32 {
	if x != nil {
		return x.UploadResult
	}
	return 0
}

func (x *VsFrontPbMotAttachmentUploadResultResp) GetPacketInfo() []*VsFrontPbMotAttachmentUploadResultRespPacketInfo {
	if x != nil {
		return x.PacketInfo
	}
	return nil
}

// JT1078---------------------------------------------
// 音视频属性查询
type VsFrontPbQueryAudioVideoAttrUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioCodec           uint32 `protobuf:"varint,1,opt,name=audioCodec,proto3" json:"audioCodec,omitempty"`                     //音频编码 VSSTEAM_AV_CODE_FROMAT
	AudioChannelNum      uint32 `protobuf:"varint,2,opt,name=audioChannelNum,proto3" json:"audioChannelNum,omitempty"`           //音频声道数
	AudioSampleRate      uint32 `protobuf:"varint,3,opt,name=audioSampleRate,proto3" json:"audioSampleRate,omitempty"`           //音频采样率,0:8k,1:22.05k,2:44.1k,3:48k
	AudioSampleBit       uint32 `protobuf:"varint,4,opt,name=audioSampleBit,proto3" json:"audioSampleBit,omitempty"`             //采样位数,0:8位,1:16位,2:32位
	AudioLen             uint32 `protobuf:"varint,5,opt,name=audioLen,proto3" json:"audioLen,omitempty"`                         //音频长度 byte
	IsSupportAudioOutput uint32 `protobuf:"varint,6,opt,name=isSupportAudioOutput,proto3" json:"isSupportAudioOutput,omitempty"` //是否支持音频输出
	VideoCode            uint32 `protobuf:"varint,7,opt,name=videoCode,proto3" json:"videoCode,omitempty"`                       //视频编码 VSSTEAM_AV_CODE_FROMAT
	AudioMaxChannelNum   uint32 `protobuf:"varint,8,opt,name=audioMaxChannelNum,proto3" json:"audioMaxChannelNum,omitempty"`     //音频最大的通道数
	VideoMaxChannelNum   uint32 `protobuf:"varint,9,opt,name=videoMaxChannelNum,proto3" json:"videoMaxChannelNum,omitempty"`     //视频最大的通道数
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) Reset() {
	*x = VsFrontPbQueryAudioVideoAttrUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbQueryAudioVideoAttrUpload) ProtoMessage() {}

func (x *VsFrontPbQueryAudioVideoAttrUpload) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbQueryAudioVideoAttrUpload.ProtoReflect.Descriptor instead.
func (*VsFrontPbQueryAudioVideoAttrUpload) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{37}
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) GetAudioCodec() uint32 {
	if x != nil {
		return x.AudioCodec
	}
	return 0
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) GetAudioChannelNum() uint32 {
	if x != nil {
		return x.AudioChannelNum
	}
	return 0
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) GetAudioSampleRate() uint32 {
	if x != nil {
		return x.AudioSampleRate
	}
	return 0
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) GetAudioSampleBit() uint32 {
	if x != nil {
		return x.AudioSampleBit
	}
	return 0
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) GetAudioLen() uint32 {
	if x != nil {
		return x.AudioLen
	}
	return 0
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) GetIsSupportAudioOutput() uint32 {
	if x != nil {
		return x.IsSupportAudioOutput
	}
	return 0
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) GetVideoCode() uint32 {
	if x != nil {
		return x.VideoCode
	}
	return 0
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) GetAudioMaxChannelNum() uint32 {
	if x != nil {
		return x.AudioMaxChannelNum
	}
	return 0
}

func (x *VsFrontPbQueryAudioVideoAttrUpload) GetVideoMaxChannelNum() uint32 {
	if x != nil {
		return x.VideoMaxChannelNum
	}
	return 0
}

// 实时流请求
type VsFrontPbMsgRealtimeStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamAddr   string `protobuf:"bytes,1,opt,name=streamAddr,proto3" json:"streamAddr,omitempty"`      //流地址
	LogicChannel uint32 `protobuf:"varint,2,opt,name=logicChannel,proto3" json:"logicChannel,omitempty"` //通道号
	DataType     uint32 `protobuf:"varint,3,opt,name=dataType,proto3" json:"dataType,omitempty"`         //数据类型
	IsMainCode   bool   `protobuf:"varint,4,opt,name=isMainCode,proto3" json:"isMainCode,omitempty"`     //是否为主码流
	TcpPort      uint32 `protobuf:"varint,5,opt,name=tcpPort,proto3" json:"tcpPort,omitempty"`           //流TCP端口
}

func (x *VsFrontPbMsgRealtimeStartReq) Reset() {
	*x = VsFrontPbMsgRealtimeStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgRealtimeStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgRealtimeStartReq) ProtoMessage() {}

func (x *VsFrontPbMsgRealtimeStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgRealtimeStartReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgRealtimeStartReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{38}
}

func (x *VsFrontPbMsgRealtimeStartReq) GetStreamAddr() string {
	if x != nil {
		return x.StreamAddr
	}
	return ""
}

func (x *VsFrontPbMsgRealtimeStartReq) GetLogicChannel() uint32 {
	if x != nil {
		return x.LogicChannel
	}
	return 0
}

func (x *VsFrontPbMsgRealtimeStartReq) GetDataType() uint32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *VsFrontPbMsgRealtimeStartReq) GetIsMainCode() bool {
	if x != nil {
		return x.IsMainCode
	}
	return false
}

func (x *VsFrontPbMsgRealtimeStartReq) GetTcpPort() uint32 {
	if x != nil {
		return x.TcpPort
	}
	return 0
}

// 历史资源列表
type VsFrontPbMsgQueryHistoryStreamListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicChannel  uint32 `protobuf:"varint,1,opt,name=logicChannel,proto3" json:"logicChannel,omitempty"`   //通道号
	StartTime     uint32 `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`         //开始时间
	EndTime       uint32 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`             //结束时间
	AlarmFlag     uint64 `protobuf:"varint,4,opt,name=alarmFlag,proto3" json:"alarmFlag,omitempty"`         //报警标志
	MediaType     uint32 `protobuf:"varint,5,opt,name=mediaType,proto3" json:"mediaType,omitempty"`         //媒体类型	0:音视频,1:音频,2:视频,3:视频或音视频
	BitStreamType uint32 `protobuf:"varint,6,opt,name=bitStreamType,proto3" json:"bitStreamType,omitempty"` //码流类型 0:所有码流,1:主码流,2:子码流
	StorageType   uint32 `protobuf:"varint,7,opt,name=storageType,proto3" json:"storageType,omitempty"`     //存储器类型 0:所有存储器1:主存储器,2灾备存储器
}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) Reset() {
	*x = VsFrontPbMsgQueryHistoryStreamListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgQueryHistoryStreamListReq) ProtoMessage() {}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgQueryHistoryStreamListReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgQueryHistoryStreamListReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{39}
}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) GetLogicChannel() uint32 {
	if x != nil {
		return x.LogicChannel
	}
	return 0
}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) GetAlarmFlag() uint64 {
	if x != nil {
		return x.AlarmFlag
	}
	return 0
}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) GetBitStreamType() uint32 {
	if x != nil {
		return x.BitStreamType
	}
	return 0
}

func (x *VsFrontPbMsgQueryHistoryStreamListReq) GetStorageType() uint32 {
	if x != nil {
		return x.StorageType
	}
	return 0
}

type VsFrontPbMsgHistoryStreamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicChannel  uint32 `protobuf:"varint,1,opt,name=logicChannel,proto3" json:"logicChannel,omitempty"`   //通道号
	StartTime     uint32 `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`         //开始时间
	EndTime       uint32 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`             //结束时间
	AlarmFlag     uint64 `protobuf:"varint,4,opt,name=alarmFlag,proto3" json:"alarmFlag,omitempty"`         //报警标志
	MediaType     uint32 `protobuf:"varint,5,opt,name=mediaType,proto3" json:"mediaType,omitempty"`         //媒体类型	1:音频,2:视频,3:视频或音视频
	BitStreamType uint32 `protobuf:"varint,6,opt,name=bitStreamType,proto3" json:"bitStreamType,omitempty"` //码流类型 1:主码流,2:子码流
	StorageType   uint32 `protobuf:"varint,7,opt,name=storageType,proto3" json:"storageType,omitempty"`     //存储器类型1:主存储器,2灾备存储器
	FileSize      uint32 `protobuf:"varint,8,opt,name=fileSize,proto3" json:"fileSize,omitempty"`           //文件大小byte
}

func (x *VsFrontPbMsgHistoryStreamList) Reset() {
	*x = VsFrontPbMsgHistoryStreamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgHistoryStreamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgHistoryStreamList) ProtoMessage() {}

func (x *VsFrontPbMsgHistoryStreamList) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgHistoryStreamList.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgHistoryStreamList) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{40}
}

func (x *VsFrontPbMsgHistoryStreamList) GetLogicChannel() uint32 {
	if x != nil {
		return x.LogicChannel
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamList) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamList) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamList) GetAlarmFlag() uint64 {
	if x != nil {
		return x.AlarmFlag
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamList) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamList) GetBitStreamType() uint32 {
	if x != nil {
		return x.BitStreamType
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamList) GetStorageType() uint32 {
	if x != nil {
		return x.StorageType
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamList) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

// 资源列表应答
type VsFrontPbMsgQueryHistoryStreamListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqSN uint32                           `protobuf:"varint,1,opt,name=reqSN,proto3" json:"reqSN,omitempty"` //查询的SN
	Infos []*VsFrontPbMsgHistoryStreamList `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`  //列表
}

func (x *VsFrontPbMsgQueryHistoryStreamListResp) Reset() {
	*x = VsFrontPbMsgQueryHistoryStreamListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgQueryHistoryStreamListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgQueryHistoryStreamListResp) ProtoMessage() {}

func (x *VsFrontPbMsgQueryHistoryStreamListResp) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgQueryHistoryStreamListResp.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgQueryHistoryStreamListResp) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{41}
}

func (x *VsFrontPbMsgQueryHistoryStreamListResp) GetReqSN() uint32 {
	if x != nil {
		return x.ReqSN
	}
	return 0
}

func (x *VsFrontPbMsgQueryHistoryStreamListResp) GetInfos() []*VsFrontPbMsgHistoryStreamList {
	if x != nil {
		return x.Infos
	}
	return nil
}

// 历史流请求
type VsFrontPbMsgHistoryStreamStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamAddr    string `protobuf:"bytes,1,opt,name=streamAddr,proto3" json:"streamAddr,omitempty"`        //流地址
	TcpPort       uint32 `protobuf:"varint,2,opt,name=tcpPort,proto3" json:"tcpPort,omitempty"`             //流TCP端口
	LogicChannel  uint32 `protobuf:"varint,3,opt,name=logicChannel,proto3" json:"logicChannel,omitempty"`   //通道号
	MediaType     uint32 `protobuf:"varint,4,opt,name=mediaType,proto3" json:"mediaType,omitempty"`         //媒体类型	0:音视频,1:音频,2:视频
	BitStreamType uint32 `protobuf:"varint,5,opt,name=bitStreamType,proto3" json:"bitStreamType,omitempty"` //码流类型 1:主码流,2:子码流
	StorageType   uint32 `protobuf:"varint,6,opt,name=storageType,proto3" json:"storageType,omitempty"`     //存储器类型 1:主存储器,2灾备存储器
	PlayType      uint32 `protobuf:"varint,7,opt,name=playType,proto3" json:"playType,omitempty"`           //回放方式0;正常回放;l:快进回放:2:关键帧快退回放;3:关键帧播放;4:单帧上传
	Speed         uint32 `protobuf:"varint,8,opt,name=speed,proto3" json:"speed,omitempty"`                 //倍速 0:无效,1:1倍,2:2 倍,3:4 倍,4:8 倍,5:16 倍
	StartTime     uint32 `protobuf:"varint,9,opt,name=startTime,proto3" json:"startTime,omitempty"`         //开始时间
	EndTime       uint32 `protobuf:"varint,10,opt,name=endTime,proto3" json:"endTime,omitempty"`            //结束时间
}

func (x *VsFrontPbMsgHistoryStreamStartReq) Reset() {
	*x = VsFrontPbMsgHistoryStreamStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgHistoryStreamStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgHistoryStreamStartReq) ProtoMessage() {}

func (x *VsFrontPbMsgHistoryStreamStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgHistoryStreamStartReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgHistoryStreamStartReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{42}
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetStreamAddr() string {
	if x != nil {
		return x.StreamAddr
	}
	return ""
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetTcpPort() uint32 {
	if x != nil {
		return x.TcpPort
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetLogicChannel() uint32 {
	if x != nil {
		return x.LogicChannel
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetBitStreamType() uint32 {
	if x != nil {
		return x.BitStreamType
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetStorageType() uint32 {
	if x != nil {
		return x.StorageType
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamStartReq) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// 历史流控制
type VsFrontPbMsgHistoryStreamCtrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicChannelNo uint32 `protobuf:"varint,1,opt,name=logicChannelNo,proto3" json:"logicChannelNo,omitempty"` //通道号
	CtrlType       uint32 `protobuf:"varint,2,opt,name=ctrlType,proto3" json:"ctrlType,omitempty"`             //回放控制 VsMediaMsgHistoryCtrlType
	Speed          uint32 `protobuf:"varint,3,opt,name=speed,proto3" json:"speed,omitempty"`                   //倍速 0:无效,1:1倍,2:2 倍,3:4 倍,4:8 倍,5:16 倍
	DragTime       uint32 `protobuf:"varint,4,opt,name=dragTime,proto3" json:"dragTime,omitempty"`             //拖动时间
}

func (x *VsFrontPbMsgHistoryStreamCtrlReq) Reset() {
	*x = VsFrontPbMsgHistoryStreamCtrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgHistoryStreamCtrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgHistoryStreamCtrlReq) ProtoMessage() {}

func (x *VsFrontPbMsgHistoryStreamCtrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgHistoryStreamCtrlReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgHistoryStreamCtrlReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{43}
}

func (x *VsFrontPbMsgHistoryStreamCtrlReq) GetLogicChannelNo() uint32 {
	if x != nil {
		return x.LogicChannelNo
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamCtrlReq) GetCtrlType() uint32 {
	if x != nil {
		return x.CtrlType
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamCtrlReq) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *VsFrontPbMsgHistoryStreamCtrlReq) GetDragTime() uint32 {
	if x != nil {
		return x.DragTime
	}
	return 0
}

// 文件上传指令
type VsFrontPbMsgUploadMeidaFileFTPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpAddr        string `protobuf:"bytes,1,opt,name=ftpAddr,proto3" json:"ftpAddr,omitempty"`                //ftp地址
	FtpPort        uint32 `protobuf:"varint,2,opt,name=ftpPort,proto3" json:"ftpPort,omitempty"`               //ftp端口
	FtpUserName    string `protobuf:"bytes,3,opt,name=ftpUserName,proto3" json:"ftpUserName,omitempty"`        //ftp用户名
	FtpUserPwd     string `protobuf:"bytes,4,opt,name=ftpUserPwd,proto3" json:"ftpUserPwd,omitempty"`          //ftp密码
	FilePath       string `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`              //上传路径
	LogicChannelNo uint32 `protobuf:"varint,6,opt,name=logicChannelNo,proto3" json:"logicChannelNo,omitempty"` //逻辑通道号
	StartTime      uint32 `protobuf:"varint,7,opt,name=startTime,proto3" json:"startTime,omitempty"`           //开始时间
	EndTime        uint32 `protobuf:"varint,8,opt,name=endTime,proto3" json:"endTime,omitempty"`               //结束时间
	AlarmFlag      uint64 `protobuf:"varint,9,opt,name=alarmFlag,proto3" json:"alarmFlag,omitempty"`           //报警标志位
	MediaType      uint32 `protobuf:"varint,10,opt,name=mediaType,proto3" json:"mediaType,omitempty"`          //媒体类型	0:音视频,1:音频,2:视频
	BitStreamType  uint32 `protobuf:"varint,11,opt,name=bitStreamType,proto3" json:"bitStreamType,omitempty"`  //码流类型 1:主码流,2:子码流
	StorageType    uint32 `protobuf:"varint,12,opt,name=storageType,proto3" json:"storageType,omitempty"`      //存储器类型 1:主存储器,2灾备存储器
	//downloadFlag bit0:WIFI为1时表示WIFI下可下载;bit1:LAN, 为1时表示LAN连接时可下载;bit2:3G/4G,为1时表示3G/4G连接时可下载
	DownloadFlag uint32 `protobuf:"varint,13,opt,name=downloadFlag,proto3" json:"downloadFlag,omitempty"` //下载标志位
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) Reset() {
	*x = VsFrontPbMsgUploadMeidaFileFTPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgUploadMeidaFileFTPReq) ProtoMessage() {}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgUploadMeidaFileFTPReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgUploadMeidaFileFTPReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{44}
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetFtpAddr() string {
	if x != nil {
		return x.FtpAddr
	}
	return ""
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetFtpPort() uint32 {
	if x != nil {
		return x.FtpPort
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetFtpUserName() string {
	if x != nil {
		return x.FtpUserName
	}
	return ""
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetFtpUserPwd() string {
	if x != nil {
		return x.FtpUserPwd
	}
	return ""
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetLogicChannelNo() uint32 {
	if x != nil {
		return x.LogicChannelNo
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetAlarmFlag() uint64 {
	if x != nil {
		return x.AlarmFlag
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetBitStreamType() uint32 {
	if x != nil {
		return x.BitStreamType
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetStorageType() uint32 {
	if x != nil {
		return x.StorageType
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPReq) GetDownloadFlag() uint32 {
	if x != nil {
		return x.DownloadFlag
	}
	return 0
}

// 文件上传完成通知
type VsFrontPbMsgUploadMeidaFileFTPFinishUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqSN  uint32 `protobuf:"varint,1,opt,name=reqSN,proto3" json:"reqSN,omitempty"`   //请求的SN
	Result bool   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` //结果 true:成功,false:失败
}

func (x *VsFrontPbMsgUploadMeidaFileFTPFinishUpload) Reset() {
	*x = VsFrontPbMsgUploadMeidaFileFTPFinishUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgUploadMeidaFileFTPFinishUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgUploadMeidaFileFTPFinishUpload) ProtoMessage() {}

func (x *VsFrontPbMsgUploadMeidaFileFTPFinishUpload) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgUploadMeidaFileFTPFinishUpload.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgUploadMeidaFileFTPFinishUpload) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{45}
}

func (x *VsFrontPbMsgUploadMeidaFileFTPFinishUpload) GetReqSN() uint32 {
	if x != nil {
		return x.ReqSN
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPFinishUpload) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 文件上传控制
type VsFrontPbMsgUploadMeidaFileFTPCtrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqSN    uint32 `protobuf:"varint,1,opt,name=reqSN,proto3" json:"reqSN,omitempty"`       //上传请求应答的SN
	CtrlType uint32 `protobuf:"varint,2,opt,name=ctrlType,proto3" json:"ctrlType,omitempty"` //0:暂停,1:继续,2:取消
}

func (x *VsFrontPbMsgUploadMeidaFileFTPCtrlReq) Reset() {
	*x = VsFrontPbMsgUploadMeidaFileFTPCtrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbMsgUploadMeidaFileFTPCtrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbMsgUploadMeidaFileFTPCtrlReq) ProtoMessage() {}

func (x *VsFrontPbMsgUploadMeidaFileFTPCtrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbMsgUploadMeidaFileFTPCtrlReq.ProtoReflect.Descriptor instead.
func (*VsFrontPbMsgUploadMeidaFileFTPCtrlReq) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{46}
}

func (x *VsFrontPbMsgUploadMeidaFileFTPCtrlReq) GetReqSN() uint32 {
	if x != nil {
		return x.ReqSN
	}
	return 0
}

func (x *VsFrontPbMsgUploadMeidaFileFTPCtrlReq) GetCtrlType() uint32 {
	if x != nil {
		return x.CtrlType
	}
	return 0
}

// 传感器数据
type VsFrontPbStorageSensorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64                     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`                                                    //上传时间
	SensorDataType VsPbStorageSensorDataType `protobuf:"varint,2,opt,name=sensorDataType,proto3,enum=VsPbStorageSensorDataType" json:"sensorDataType,omitempty"` //传感器类型
	Data           string                    `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`                                                    //采集数据,可能是json,二进制,字符串等类型,具体类型里描述
}

func (x *VsFrontPbStorageSensorData) Reset() {
	*x = VsFrontPbStorageSensorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbStorageSensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbStorageSensorData) ProtoMessage() {}

func (x *VsFrontPbStorageSensorData) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbStorageSensorData.ProtoReflect.Descriptor instead.
func (*VsFrontPbStorageSensorData) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{47}
}

func (x *VsFrontPbStorageSensorData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *VsFrontPbStorageSensorData) GetSensorDataType() VsPbStorageSensorDataType {
	if x != nil {
		return x.SensorDataType
	}
	return VsPbStorageSensorDataType_SSD_NONE
}

func (x *VsFrontPbStorageSensorData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 传感器数据批量上传
type VsFrontPbStorageSensorDataBatchUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceNo       string                        `protobuf:"bytes,1,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`                                             //设备号
	VehicleNo      string                        `protobuf:"bytes,2,opt,name=vehicleNo,proto3" json:"vehicleNo,omitempty"`                                           //车牌号 由实时服务填入
	VehicleGuid    uint32                        `protobuf:"varint,3,opt,name=vehicleGuid,proto3" json:"vehicleGuid,omitempty"`                                      //车辆ID 由实时服务填入
	AdminGuid      uint32                        `protobuf:"varint,4,opt,name=adminGuid,proto3" json:"adminGuid,omitempty"`                                          //管理员ID 由实时服务填入
	SensorDataType VsPbStorageSensorDataType     `protobuf:"varint,5,opt,name=sensorDataType,proto3,enum=VsPbStorageSensorDataType" json:"sensorDataType,omitempty"` //传感器数据类型
	SensorInfos    []*VsFrontPbStorageSensorData `protobuf:"bytes,10,rep,name=sensorInfos,proto3" json:"sensorInfos,omitempty"`                                      //传感器数据
}

func (x *VsFrontPbStorageSensorDataBatchUpload) Reset() {
	*x = VsFrontPbStorageSensorDataBatchUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbStorageSensorDataBatchUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbStorageSensorDataBatchUpload) ProtoMessage() {}

func (x *VsFrontPbStorageSensorDataBatchUpload) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbStorageSensorDataBatchUpload.ProtoReflect.Descriptor instead.
func (*VsFrontPbStorageSensorDataBatchUpload) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{48}
}

func (x *VsFrontPbStorageSensorDataBatchUpload) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *VsFrontPbStorageSensorDataBatchUpload) GetVehicleNo() string {
	if x != nil {
		return x.VehicleNo
	}
	return ""
}

func (x *VsFrontPbStorageSensorDataBatchUpload) GetVehicleGuid() uint32 {
	if x != nil {
		return x.VehicleGuid
	}
	return 0
}

func (x *VsFrontPbStorageSensorDataBatchUpload) GetAdminGuid() uint32 {
	if x != nil {
		return x.AdminGuid
	}
	return 0
}

func (x *VsFrontPbStorageSensorDataBatchUpload) GetSensorDataType() VsPbStorageSensorDataType {
	if x != nil {
		return x.SensorDataType
	}
	return VsPbStorageSensorDataType_SSD_NONE
}

func (x *VsFrontPbStorageSensorDataBatchUpload) GetSensorInfos() []*VsFrontPbStorageSensorData {
	if x != nil {
		return x.SensorInfos
	}
	return nil
}

// 五联can 数据
type VsFrontPbStorageSensorWuLianCanData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LongAccError              uint32 `protobuf:"varint,1,opt,name=longAccError,proto3" json:"longAccError,omitempty"`                           //纵向加速度是否错误
	LongAccInvalid            uint32 `protobuf:"varint,2,opt,name=longAccInvalid,proto3" json:"longAccInvalid,omitempty"`                       //纵向加速度是否无效
	LongAcc                   uint32 `protobuf:"varint,3,opt,name=longAcc,proto3" json:"longAcc,omitempty"`                                     //纵向加速度, 范围-125 ~ 125, 单位: 0.1m/s*s
	BrakePedalPositionError   uint32 `protobuf:"varint,4,opt,name=brakePedalPositionError,proto3" json:"brakePedalPositionError,omitempty"`     //刹车踏板位置是否错误
	BrakePedalPositionInvalid uint32 `protobuf:"varint,5,opt,name=brakePedalPositionInvalid,proto3" json:"brakePedalPositionInvalid,omitempty"` //刹车踏板位置是否无效
	BrakePedalPosition        uint32 `protobuf:"varint,6,opt,name=brakePedalPosition,proto3" json:"brakePedalPosition,omitempty"`               //刹车踏板位置, 范围0-100
	Slope                     int32  `protobuf:"varint,7,opt,name=slope,proto3" json:"slope,omitempty"`                                         //坡度, 范围: -64 ~ 64
}

func (x *VsFrontPbStorageSensorWuLianCanData) Reset() {
	*x = VsFrontPbStorageSensorWuLianCanData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iot_pb_front_msg_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VsFrontPbStorageSensorWuLianCanData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VsFrontPbStorageSensorWuLianCanData) ProtoMessage() {}

func (x *VsFrontPbStorageSensorWuLianCanData) ProtoReflect() protoreflect.Message {
	mi := &file_iot_pb_front_msg_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VsFrontPbStorageSensorWuLianCanData.ProtoReflect.Descriptor instead.
func (*VsFrontPbStorageSensorWuLianCanData) Descriptor() ([]byte, []int) {
	return file_iot_pb_front_msg_proto_rawDescGZIP(), []int{49}
}

func (x *VsFrontPbStorageSensorWuLianCanData) GetLongAccError() uint32 {
	if x != nil {
		return x.LongAccError
	}
	return 0
}

func (x *VsFrontPbStorageSensorWuLianCanData) GetLongAccInvalid() uint32 {
	if x != nil {
		return x.LongAccInvalid
	}
	return 0
}

func (x *VsFrontPbStorageSensorWuLianCanData) GetLongAcc() uint32 {
	if x != nil {
		return x.LongAcc
	}
	return 0
}

func (x *VsFrontPbStorageSensorWuLianCanData) GetBrakePedalPositionError() uint32 {
	if x != nil {
		return x.BrakePedalPositionError
	}
	return 0
}

func (x *VsFrontPbStorageSensorWuLianCanData) GetBrakePedalPositionInvalid() uint32 {
	if x != nil {
		return x.BrakePedalPositionInvalid
	}
	return 0
}

func (x *VsFrontPbStorageSensorWuLianCanData) GetBrakePedalPosition() uint32 {
	if x != nil {
		return x.BrakePedalPosition
	}
	return 0
}

func (x *VsFrontPbStorageSensorWuLianCanData) GetSlope() int32 {
	if x != nil {
		return x.Slope
	}
	return 0
}

var File_iot_pb_front_msg_proto protoreflect.FileDescriptor

var file_iot_pb_front_msg_proto_rawDesc = []byte{
	0x0a, 0x16, 0x69, 0x6f, 0x74, 0x5f, 0x70, 0x62, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x6d,
	0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x74, 0x5f, 0x70, 0x62,
	0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x6d, 0x0a, 0x19, 0x49, 0x6f, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d,
	0x73, 0x67, 0x44, 0x65, 0x76, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x76, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f,
	0x22, 0xf5, 0x01, 0x0a, 0x13, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73,
	0x67, 0x44, 0x65, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa9, 0x03, 0x0a, 0x12, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x65, 0x76, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x56, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x14, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50,
	0x62, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x65, 0x76, 0x4e, 0x6f, 0x22, 0xfe, 0x02, 0x0a, 0x18, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x50, 0x62, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x41, 0x50, 0x4e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x41, 0x50, 0x4e, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x76, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x76, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x76, 0x72, 0x54, 0x43, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x76, 0x72, 0x54, 0x43, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x76, 0x72, 0x55, 0x44, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x76, 0x72, 0x55, 0x44, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x76, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x53, 0x76, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x49, 0x44, 0x22, 0xd1, 0x02, 0x0a, 0x1f, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x76, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61,
	0x6c, 0x41, 0x50, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6c,
	0x41, 0x50, 0x4e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x76, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x76, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x76, 0x72,
	0x54, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x76, 0x72, 0x54, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x76,
	0x55, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x72, 0x76, 0x55, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x53, 0x76, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x76, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x56, 0x73,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x43, 0x74, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6d,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x56, 0x73,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x44, 0x65, 0x76, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0c, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x56,
	0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x76, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x76, 0x0a, 0x18, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x67, 0x0a, 0x1e, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73,
	0x67, 0x44, 0x65, 0x76, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x73, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x56,
	0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x65, 0x76, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x70, 0x53, 0x4e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x70, 0x53, 0x4e, 0x12, 0x2f, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x73,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x50, 0x0a,
	0x1c, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65,
	0x76, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x44, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x44, 0x73, 0x22,
	0x58, 0x0a, 0x1e, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x23, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x4e, 0x6f, 0x73, 0x22, 0x90, 0x03, 0x0a, 0x1a, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x49, 0x73, 0x52, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x49, 0x73, 0x52, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x22, 0xf4, 0x01, 0x0a, 0x1a,
	0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x6f, 0x74, 0x4d, 0x73, 0x67, 0x44,
	0x65, 0x76, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x22, 0x5f, 0x0a, 0x19, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d,
	0x73, 0x67, 0x4d, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x19, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62,
	0x4d, 0x73, 0x67, 0x4d, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x52, 0x65, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x19, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62,
	0x4d, 0x6f, 0x74, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6d, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x56, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfb, 0x01,
	0x0a, 0x19, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x71, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x71, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73,
	0x73, 0x75, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0xb5, 0x01, 0x0a, 0x1d,
	0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x22, 0xec, 0x01, 0x0a, 0x14, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50,
	0x62, 0x47, 0x70, 0x73, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x1d, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x07, 0x67, 0x70,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56, 0x73,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x47, 0x70, 0x73, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x67, 0x70, 0x73, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x21, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x22, 0xd3, 0x02, 0x0a, 0x1d, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x6e,
	0x0a, 0x1e, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x70, 0x53, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x70, 0x53, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xaf,
	0x01, 0x0a, 0x1b, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xc2, 0x01, 0x0a, 0x1b, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x47, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50,
	0x62, 0x47, 0x70, 0x73, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x47, 0x70, 0x73, 0x22, 0x6a, 0x0a, 0x1c, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x50, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x70, 0x53, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x70, 0x53, 0x4e, 0x12, 0x32, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x56,
	0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xd1, 0x01, 0x0a, 0x23, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x5f, 0x0a, 0x29, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x50, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64,
	0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x22, 0x56, 0x73, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x50, 0x62, 0x4d, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x63, 0x70,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a, 0x1e, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x20, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50,
	0x62, 0x4d, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x50, 0x62, 0x4d, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x7a, 0x0a, 0x24, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x6f,
	0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x88, 0x01,
	0x0a, 0x2a, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x6f, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x84, 0x01, 0x0a, 0x30, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x22,
	0xd7, 0x01, 0x0a, 0x26, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x6f, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8e, 0x03, 0x0a, 0x22, 0x56, 0x73,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x78,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x78,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x56,
	0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x63,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x25, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x9b, 0x02, 0x0a, 0x1d, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x74, 0x0a,
	0x26, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x53, 0x4e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x71, 0x53, 0x4e, 0x12, 0x34, 0x0a,
	0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x56,
	0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x21, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50,
	0x62, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x63, 0x70,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x63, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x20, 0x56, 0x73, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x74, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x74, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x72, 0x61, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x21, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x69, 0x64, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x46, 0x54, 0x50, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x74, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x74, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x77, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x22, 0x5a, 0x0a, 0x2a, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x69, 0x64, 0x61, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x53, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x53, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x59,
	0x0a, 0x25, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x69, 0x64, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x54, 0x50,
	0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x53, 0x4e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x71, 0x53, 0x4e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x74, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x74, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x56, 0x73,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xa4, 0x02, 0x0a, 0x25, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x23,
	0x56, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x57, 0x75, 0x4c, 0x69, 0x61, 0x6e, 0x43, 0x61, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x12, 0x38, 0x0a, 0x17, 0x62, 0x72, 0x61,
	0x6b, 0x65, 0x50, 0x65, 0x64, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x62, 0x72, 0x61, 0x6b,
	0x65, 0x50, 0x65, 0x64, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x64, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x64,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x64, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62,
	0x72, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x64, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x2a, 0x6c, 0x0a, 0x15, 0x56, 0x53, 0x5f, 0x44, 0x45,
	0x56, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x10, 0x04, 0x2a, 0xa9, 0x02, 0x0a, 0x19, 0x49, 0x6f, 0x74, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x50, 0x62, 0x4d, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4f, 0x54, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x5f, 0x47, 0x4e,
	0x53, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x49, 0x4f, 0x54, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x5f, 0x55, 0x41, 0x52, 0x54, 0x31, 0x10, 0x41,
	0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4f, 0x54, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x5f, 0x55, 0x41, 0x52, 0x54, 0x32,
	0x10, 0x42, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4f, 0x54, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x10, 0x75, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4f, 0x54, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x76, 0x12, 0x2c, 0x0a, 0x27, 0x49, 0x4f, 0x54, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x5f, 0x4a, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0xf7, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x49, 0x4f, 0x54, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x5f,
	0x4a, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf8,
	0x01, 0x2a, 0x44, 0x0a, 0x0c, 0x49, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x54, 0x5f, 0x58, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x54, 0x5f, 0x58, 0x4c,
	0x5f, 0x4d, 0x51, 0x54, 0x54, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x16, 0x56, 0x53, 0x5f, 0x46, 0x52,
	0x4f, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x42, 0x49,
	0x54, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x46, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x46, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x46, 0x5f, 0x54, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x46, 0x5f, 0x41, 0x44, 0x56, 0x10, 0x04, 0x2a, 0xb4, 0x02, 0x0a, 0x13, 0x56, 0x73, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x50, 0x62, 0x44, 0x65, 0x76, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f, 0x44, 0x45, 0x56, 0x43, 0x54, 0x4c, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x56,
	0x53, 0x5f, 0x50, 0x42, 0x5f, 0x44, 0x45, 0x56, 0x43, 0x54, 0x4c, 0x5f, 0x43, 0x4d, 0x44, 0x5f,
	0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f, 0x44, 0x45, 0x56, 0x43,
	0x54, 0x4c, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x41,
	0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f, 0x44, 0x45, 0x56, 0x43, 0x54, 0x4c, 0x5f, 0x43,
	0x4d, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f, 0x44, 0x45, 0x56, 0x43, 0x54,
	0x4c, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10,
	0x04, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f, 0x44, 0x45, 0x56, 0x43, 0x54,
	0x4c, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f, 0x44, 0x45, 0x56,
	0x43, 0x54, 0x4c, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x4f,
	0x43, 0x4b, 0x45, 0x54, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x53, 0x5f, 0x50, 0x42, 0x5f,
	0x44, 0x45, 0x56, 0x43, 0x54, 0x4c, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x07, 0x2a, 0x56,
	0x0a, 0x16, 0x56, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x54, 0x5f, 0x4a, 0x54, 0x32, 0x30,
	0x31, 0x33, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x54, 0x5f, 0x4a, 0x54, 0x32, 0x30, 0x31,
	0x39, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x54, 0x5f, 0x58, 0x4c, 0x5f, 0x4d, 0x51, 0x54,
	0x54, 0x5f, 0x56, 0x31, 0x10, 0x03, 0x2a, 0x3a, 0x0a, 0x19, 0x56, 0x73, 0x50, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x53, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x53, 0x44, 0x5f, 0x57, 0x55, 0x5f, 0x4c, 0x49, 0x41, 0x4e,
	0x10, 0x01, 0x42, 0x22, 0x5a, 0x20, 0x2f, 0x30, 0x30, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x75,
	0x62, 0x2f, 0x70, 0x75, 0x62, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3b, 0x70, 0x75, 0x62,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iot_pb_front_msg_proto_rawDescOnce sync.Once
	file_iot_pb_front_msg_proto_rawDescData = file_iot_pb_front_msg_proto_rawDesc
)

func file_iot_pb_front_msg_proto_rawDescGZIP() []byte {
	file_iot_pb_front_msg_proto_rawDescOnce.Do(func() {
		file_iot_pb_front_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_iot_pb_front_msg_proto_rawDescData)
	})
	return file_iot_pb_front_msg_proto_rawDescData
}

var file_iot_pb_front_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_iot_pb_front_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_iot_pb_front_msg_proto_goTypes = []interface{}{
	(VS_DEV_UPGRADE_STATUS)(0),                               // 0: VS_DEV_UPGRADE_STATUS
	(IotFrontPbMotTransMsgType)(0),                           // 1: IotFrontPbMotTransMsgType
	(IOT_DEV_TYPE)(0),                                        // 2: IOT_DEV_TYPE
	(VS_FRONT_TEXT_FLAG_BIT)(0),                              // 3: VS_FRONT_TEXT_FLAG_BIT
	(VsFrontPbDevCmdType)(0),                                 // 4: VsFrontPbDevCmdType
	(VS_FRONT_PROTOCOL_TYPE)(0),                              // 5: VS_FRONT_PROTOCOL_TYPE
	(VsPbStorageSensorDataType)(0),                           // 6: VsPbStorageSensorDataType
	(*IotFrontPbMsgDevDataTrans)(nil),                        // 7: IotFrontPbMsgDevDataTrans
	(*VsFrontPbMsgDevInfo)(nil),                              // 8: VsFrontPbMsgDevInfo
	(*VsFrontPbMsgOnline)(nil),                               // 9: VsFrontPbMsgOnline
	(*VsFrontPbMsgSendText)(nil),                             // 10: VsFrontPbMsgSendText
	(*VsFrontPbMsgUpgradeParam)(nil),                         // 11: VsFrontPbMsgUpgradeParam
	(*VsFrontPbMsgConnAppointSvrParam)(nil),                  // 12: VsFrontPbMsgConnAppointSvrParam
	(*VsFrontPbMsgDevCtrlReq)(nil),                           // 13: VsFrontPbMsgDevCtrlReq
	(*VsFrontPbMsgDevParamItem)(nil),                         // 14: VsFrontPbMsgDevParamItem
	(*VsFrontPbMsgDevParamSettingReq)(nil),                   // 15: VsFrontPbMsgDevParamSettingReq
	(*VsFrontPbMsgDevParamSettingResp)(nil),                  // 16: VsFrontPbMsgDevParamSettingResp
	(*VsFrontPbMsgDevParamQueryReq)(nil),                     // 17: VsFrontPbMsgDevParamQueryReq
	(*VsFrontPbMsgBatchReqCommonResp)(nil),                   // 18: VsFrontPbMsgBatchReqCommonResp
	(*VsFrontPbMsgBatchRespErrorDevNoList)(nil),              // 19: VsFrontPbMsgBatchRespErrorDevNoList
	(*VsFrontPbMsgTakeCaptureReq)(nil),                       // 20: VsFrontPbMsgTakeCaptureReq
	(*VsFrontPbMotMsgDevRegister)(nil),                       // 21: VsFrontPbMotMsgDevRegister
	(*VsFrontPbMsgMotCommonResp)(nil),                        // 22: VsFrontPbMsgMotCommonResp
	(*VsFrontPbMsgMotDevRegResp)(nil),                        // 23: VsFrontPbMsgMotDevRegResp
	(*VsFrontPbMotMsgDevAuthReq)(nil),                        // 24: VsFrontPbMotMsgDevAuthReq
	(*VsFrontPbDriverInfoUpload)(nil),                        // 25: VsFrontPbDriverInfoUpload
	(*VsFrontPbMultiMediaInfoUpload)(nil),                    // 26: VsFrontPbMultiMediaInfoUpload
	(*VsFrontPbGpsBaseInfo)(nil),                             // 27: VsFrontPbGpsBaseInfo
	(*VsFrontPbMultiMediaDataUpload)(nil),                    // 28: VsFrontPbMultiMediaDataUpload
	(*VsFrontPbMultiMediaDataUploadResp)(nil),                // 29: VsFrontPbMultiMediaDataUploadResp
	(*VsFrontPbMultiMediaCaptureReq)(nil),                    // 30: VsFrontPbMultiMediaCaptureReq
	(*VsFrontPbMultiMediaCaptureResp)(nil),                   // 31: VsFrontPbMultiMediaCaptureResp
	(*VsFrontPbMultiMediaQueryReq)(nil),                      // 32: VsFrontPbMultiMediaQueryReq
	(*VsFrontPbMultiMediaInfoItem)(nil),                      // 33: VsFrontPbMultiMediaInfoItem
	(*VsFrontPbMultiMediaQueryResp)(nil),                     // 34: VsFrontPbMultiMediaQueryResp
	(*VsFrontPbMultiMediaStorageUploadReq)(nil),              // 35: VsFrontPbMultiMediaStorageUploadReq
	(*VsFrontPbMultiMediaStorageUploadSingleReq)(nil),        // 36: VsFrontPbMultiMediaStorageUploadSingleReq
	(*VsFrontPbMotAttachmentUploadCmdReq)(nil),               // 37: VsFrontPbMotAttachmentUploadCmdReq
	(*VsFrontPbMotAttachmentInfoList)(nil),                   // 38: VsFrontPbMotAttachmentInfoList
	(*VsFrontPbMotAttachmentInfoUpload)(nil),                 // 39: VsFrontPbMotAttachmentInfoUpload
	(*VsFrontPbMotAttachmentFileInfoUpload)(nil),             // 40: VsFrontPbMotAttachmentFileInfoUpload
	(*VsFrontPbMotAttachmentFileStreamDataUpload)(nil),       // 41: VsFrontPbMotAttachmentFileStreamDataUpload
	(*VsFrontPbMotAttachmentUploadResultRespPacketInfo)(nil), // 42: VsFrontPbMotAttachmentUploadResultRespPacketInfo
	(*VsFrontPbMotAttachmentUploadResultResp)(nil),           // 43: VsFrontPbMotAttachmentUploadResultResp
	(*VsFrontPbQueryAudioVideoAttrUpload)(nil),               // 44: VsFrontPbQueryAudioVideoAttrUpload
	(*VsFrontPbMsgRealtimeStartReq)(nil),                     // 45: VsFrontPbMsgRealtimeStartReq
	(*VsFrontPbMsgQueryHistoryStreamListReq)(nil),            // 46: VsFrontPbMsgQueryHistoryStreamListReq
	(*VsFrontPbMsgHistoryStreamList)(nil),                    // 47: VsFrontPbMsgHistoryStreamList
	(*VsFrontPbMsgQueryHistoryStreamListResp)(nil),           // 48: VsFrontPbMsgQueryHistoryStreamListResp
	(*VsFrontPbMsgHistoryStreamStartReq)(nil),                // 49: VsFrontPbMsgHistoryStreamStartReq
	(*VsFrontPbMsgHistoryStreamCtrlReq)(nil),                 // 50: VsFrontPbMsgHistoryStreamCtrlReq
	(*VsFrontPbMsgUploadMeidaFileFTPReq)(nil),                // 51: VsFrontPbMsgUploadMeidaFileFTPReq
	(*VsFrontPbMsgUploadMeidaFileFTPFinishUpload)(nil),       // 52: VsFrontPbMsgUploadMeidaFileFTPFinishUpload
	(*VsFrontPbMsgUploadMeidaFileFTPCtrlReq)(nil),            // 53: VsFrontPbMsgUploadMeidaFileFTPCtrlReq
	(*VsFrontPbStorageSensorData)(nil),                       // 54: VsFrontPbStorageSensorData
	(*VsFrontPbStorageSensorDataBatchUpload)(nil),            // 55: VsFrontPbStorageSensorDataBatchUpload
	(*VsFrontPbStorageSensorWuLianCanData)(nil),              // 56: VsFrontPbStorageSensorWuLianCanData
}
var file_iot_pb_front_msg_proto_depIdxs = []int32{
	5,  // 0: VsFrontPbMsgOnline.protocolType:type_name -> VS_FRONT_PROTOCOL_TYPE
	4,  // 1: VsFrontPbMsgDevCtrlReq.cmdType:type_name -> VsFrontPbDevCmdType
	11, // 2: VsFrontPbMsgDevCtrlReq.upgradeParam:type_name -> VsFrontPbMsgUpgradeParam
	12, // 3: VsFrontPbMsgDevCtrlReq.connParam:type_name -> VsFrontPbMsgConnAppointSvrParam
	14, // 4: VsFrontPbMsgDevParamSettingReq.items:type_name -> VsFrontPbMsgDevParamItem
	14, // 5: VsFrontPbMsgDevParamSettingResp.items:type_name -> VsFrontPbMsgDevParamItem
	5,  // 6: VsFrontPbMotMsgDevAuthReq.protocolType:type_name -> VS_FRONT_PROTOCOL_TYPE
	27, // 7: VsFrontPbMultiMediaDataUpload.gpsBase:type_name -> VsFrontPbGpsBaseInfo
	27, // 8: VsFrontPbMultiMediaInfoItem.baseGps:type_name -> VsFrontPbGpsBaseInfo
	33, // 9: VsFrontPbMultiMediaQueryResp.items:type_name -> VsFrontPbMultiMediaInfoItem
	38, // 10: VsFrontPbMotAttachmentInfoUpload.fileInfo:type_name -> VsFrontPbMotAttachmentInfoList
	42, // 11: VsFrontPbMotAttachmentUploadResultResp.packetInfo:type_name -> VsFrontPbMotAttachmentUploadResultRespPacketInfo
	47, // 12: VsFrontPbMsgQueryHistoryStreamListResp.infos:type_name -> VsFrontPbMsgHistoryStreamList
	6,  // 13: VsFrontPbStorageSensorData.sensorDataType:type_name -> VsPbStorageSensorDataType
	6,  // 14: VsFrontPbStorageSensorDataBatchUpload.sensorDataType:type_name -> VsPbStorageSensorDataType
	54, // 15: VsFrontPbStorageSensorDataBatchUpload.sensorInfos:type_name -> VsFrontPbStorageSensorData
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_iot_pb_front_msg_proto_init() }
func file_iot_pb_front_msg_proto_init() {
	if File_iot_pb_front_msg_proto != nil {
		return
	}
	file_iot_pb_front_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iot_pb_front_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IotFrontPbMsgDevDataTrans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgDevInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgSendText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgUpgradeParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgConnAppointSvrParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgDevCtrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgDevParamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgDevParamSettingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgDevParamSettingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgDevParamQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgBatchReqCommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgBatchRespErrorDevNoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgTakeCaptureReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMotMsgDevRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgMotCommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgMotDevRegResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMotMsgDevAuthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbDriverInfoUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaInfoUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbGpsBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaDataUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaDataUploadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaCaptureReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaCaptureResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaStorageUploadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMultiMediaStorageUploadSingleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMotAttachmentUploadCmdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMotAttachmentInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMotAttachmentInfoUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMotAttachmentFileInfoUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMotAttachmentFileStreamDataUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMotAttachmentUploadResultRespPacketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMotAttachmentUploadResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbQueryAudioVideoAttrUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgRealtimeStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgQueryHistoryStreamListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgHistoryStreamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgQueryHistoryStreamListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgHistoryStreamStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgHistoryStreamCtrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgUploadMeidaFileFTPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgUploadMeidaFileFTPFinishUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbMsgUploadMeidaFileFTPCtrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbStorageSensorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbStorageSensorDataBatchUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iot_pb_front_msg_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VsFrontPbStorageSensorWuLianCanData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iot_pb_front_msg_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_iot_pb_front_msg_proto_goTypes,
		DependencyIndexes: file_iot_pb_front_msg_proto_depIdxs,
		EnumInfos:         file_iot_pb_front_msg_proto_enumTypes,
		MessageInfos:      file_iot_pb_front_msg_proto_msgTypes,
	}.Build()
	File_iot_pb_front_msg_proto = out.File
	file_iot_pb_front_msg_proto_rawDesc = nil
	file_iot_pb_front_msg_proto_goTypes = nil
	file_iot_pb_front_msg_proto_depIdxs = nil
}
